{"version":3,"file":"Templates.dcf11affa5862dec4d62.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/DuplicateMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/EditMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/NewMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/Templates.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { isNotFoundError } from '../../api/util';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { useGetNotificationTemplate, useNotificationTemplates } from './useNotificationTemplates';\n\nconst notFoundComponent = <EntityNotFound entity=\"Notification template\" />;\n\nconst DuplicateMessageTemplateComponent = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { name } = useParams<{ name: string }>();\n  const templateUid = name ? decodeURIComponent(name) : undefined;\n\n  const {\n    currentData: template,\n    isLoading,\n    error,\n  } = useGetNotificationTemplate({ alertmanager: selectedAlertmanager ?? '', uid: templateUid ?? '' });\n\n  const {\n    currentData: templates,\n    isLoading: templatesLoading,\n    error: templatesError,\n  } = useNotificationTemplates({ alertmanager: selectedAlertmanager ?? '' });\n\n  if (!selectedAlertmanager) {\n    return <EntityNotFound entity=\"Alertmanager\" />;\n  }\n\n  if (!templateUid) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading || templatesLoading) {\n    return <LoadingPlaceholder text=\"Loading notification template\" />;\n  }\n\n  if (error || templatesError || !template || !templates) {\n    return isNotFoundError(error) ? (\n      notFoundComponent\n    ) : (\n      <Alert title=\"Error loading notification template\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  const duplicatedName = generateCopiedName(template.title, templates?.map((t) => t.title) ?? []);\n\n  return (\n    <TemplateForm\n      alertmanager={selectedAlertmanager}\n      prefill={{ title: duplicatedName, content: updateDefinesWithUniqueValue(template.content) }}\n    />\n  );\n};\n\nfunction DuplicateMessageTemplate() {\n  return (\n    <AlertmanagerPageWrapper navId=\"receivers\" accessType=\"notification\">\n      <DuplicateMessageTemplateComponent />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(DuplicateMessageTemplate);\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { isNotFoundError } from '../../api/util';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { useGetNotificationTemplate } from './useNotificationTemplates';\n\nconst notFoundComponent = <EntityNotFound entity=\"Notification template\" />;\n\nconst EditMessageTemplateComponent = () => {\n  const { name } = useParams<{ name: string }>();\n  const templateUid = name ? decodeURIComponent(name) : undefined;\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData, isLoading, error } = useGetNotificationTemplate({\n    alertmanager: selectedAlertmanager ?? '',\n    uid: templateUid ?? '',\n  });\n\n  if (!templateUid) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading) {\n    return <LoadingPlaceholder text=\"Loading template...\" />;\n  }\n\n  if (error) {\n    return isNotFoundError(error) ? (\n      notFoundComponent\n    ) : (\n      <Alert severity=\"error\" title=\"Failed to fetch notification template\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!currentData) {\n    return notFoundComponent;\n  }\n\n  return <TemplateForm alertmanager={selectedAlertmanager ?? ''} originalTemplate={currentData} />;\n};\n\nfunction EditMessageTemplate() {\n  return (\n    <AlertmanagerPageWrapper navId=\"receivers\" accessType=\"notification\">\n      <EditMessageTemplateComponent />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(EditMessageTemplate);\n","import { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nfunction NewMessageTemplate() {\n  const { selectedAlertmanager } = useAlertmanager();\n\n  return (\n    <AlertmanagerPageWrapper navId=\"receivers\" accessType=\"notification\">\n      <TemplateForm alertmanager={selectedAlertmanager ?? ''} />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(NewMessageTemplate);\n","import { Route, Routes } from 'react-router-dom-v5-compat';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport DuplicateMessageTemplate from './components/contact-points/DuplicateMessageTemplate';\nimport EditMessageTemplate from './components/contact-points/EditMessageTemplate';\nimport NewMessageTemplate from './components/contact-points/NewMessageTemplate';\nimport { withPageErrorBoundary } from './withPageErrorBoundary';\n\nfunction NotificationTemplates() {\n  return (\n    <AlertmanagerPageWrapper\n      navId=\"receivers\"\n      accessType=\"notification\"\n      pageNav={{\n        id: 'templates',\n        text: 'Notification templates',\n        subTitle: 'Create and edit a group of notification templates',\n      }}\n    >\n      <Routes>\n        <Route path=\":name/edit\" element={<EditMessageTemplate />} />\n        <Route path=\"new\" element={<NewMessageTemplate />} />\n        <Route path=\":name/duplicate\" element={<DuplicateMessageTemplate />} />\n      </Routes>\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(NotificationTemplates);\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["notFoundComponent","EntityNotFound","DuplicateMessageTemplateComponent","selectedAlertmanager","name","templateUid","template","isLoading","error","templates","templatesLoading","templatesError","useNotificationTemplates","LoadingPlaceholder","Alert","duplicatedName","t","TemplateForm","DuplicateMessageTemplate","withPageErrorBoundary","EditMessageTemplateComponent","currentData","EditMessageTemplate","NewMessageTemplate","NotificationTemplates","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName"],"sourceRoot":""}