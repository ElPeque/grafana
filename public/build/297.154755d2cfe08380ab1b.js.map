{"version":3,"file":"297.154755d2cfe08380ab1b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/logs/components/panel/LogLine.tsx","webpack://grafana/./public/app/features/logs/components/panel/LogLineMessage.tsx","webpack://grafana/./public/app/features/logs/components/panel/InfiniteScroll.tsx","webpack://grafana/./public/app/features/logs/components/panel/processing.ts","webpack://grafana/./public/app/features/logs/components/panel/LogList.tsx","webpack://grafana/./public/app/features/logs/components/panel/virtualization.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { CSSProperties, useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { LogListModel } from './processing';\nimport { hasUnderOrOverflow } from './virtualization';\n\ninterface Props {\n  index: number;\n  log: LogListModel;\n  showTime: boolean;\n  style: CSSProperties;\n  onOverflow?: (index: number, id: string, height: number) => void;\n  variant?: 'infinite-scroll';\n  wrapLogMessage: boolean;\n}\n\nexport const LogLine = ({ index, log, style, onOverflow, showTime, variant, wrapLogMessage }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const logLineRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (!onOverflow || !logLineRef.current) {\n      return;\n    }\n    const calculatedHeight = typeof style.height === 'number' ? style.height : undefined;\n    const actualHeight = hasUnderOrOverflow(logLineRef.current, calculatedHeight);\n    if (actualHeight) {\n      onOverflow(index, log.uid, actualHeight);\n    }\n  }, [index, log.uid, onOverflow, style.height]);\n\n  return (\n    <div style={style} className={`${styles.logLine} ${variant}`} ref={onOverflow ? logLineRef : undefined}>\n      <div className={wrapLogMessage ? styles.wrappedLogLine : styles.unwrappedLogLine}>\n        {showTime && <span className={`${styles.timestamp} level-${log.logLevel}`}>{log.timestamp}</span>}\n        {log.logLevel && <span className={`${styles.level} level-${log.logLevel}`}>{log.logLevel}</span>}\n        {log.body}\n      </div>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  const colors = {\n    critical: '#B877D9',\n    error: '#FF5286',\n    warning: '#FBAD37',\n    debug: '#6CCF8E',\n    trace: '#6ed0e0',\n    info: '#6E9FFF',\n  };\n\n  return {\n    logLine: css({\n      color: theme.colors.text.primary,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.fontSize,\n      wordBreak: 'break-all',\n      '&:hover': {\n        opacity: 0.7,\n      },\n      '&.infinite-scroll': {\n        '&::before': {\n          borderTop: `solid 1px ${theme.colors.border.strong}`,\n          content: '\"\"',\n          height: 0,\n          left: 0,\n          position: 'absolute',\n          top: -3,\n          width: '100%',\n        },\n      },\n    }),\n    logLineMessage: css({\n      fontFamily: theme.typography.fontFamily,\n      textAlign: 'center',\n    }),\n    timestamp: css({\n      color: theme.colors.text.secondary,\n      display: 'inline-block',\n      marginRight: theme.spacing(1),\n      '&.level-critical': {\n        color: colors.critical,\n      },\n      '&.level-error': {\n        color: colors.error,\n      },\n      '&.level-info': {\n        color: colors.info,\n      },\n      '&.level-warning': {\n        color: colors.warning,\n      },\n      '&.level-debug': {\n        color: colors.debug,\n      },\n    }),\n    level: css({\n      color: theme.colors.text.secondary,\n      fontWeight: theme.typography.fontWeightBold,\n      display: 'inline-block',\n      marginRight: theme.spacing(1),\n      '&.level-critical': {\n        color: colors.critical,\n      },\n      '&.level-error': {\n        color: colors.error,\n      },\n      '&.level-warning': {\n        color: colors.warning,\n      },\n      '&.level-info': {\n        color: colors.info,\n      },\n      '&.level-debug': {\n        color: colors.debug,\n      },\n    }),\n    loadMoreButton: css({\n      background: 'transparent',\n      border: 'none',\n      display: 'inline',\n    }),\n    overflows: css({\n      outline: 'solid 1px red',\n    }),\n    unwrappedLogLine: css({\n      whiteSpace: 'pre',\n      paddingBottom: theme.spacing(0.75),\n    }),\n    wrappedLogLine: css({\n      whiteSpace: 'pre-wrap',\n      paddingBottom: theme.spacing(0.75),\n    }),\n  };\n};\n","import { CSSProperties, ReactNode } from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\nimport { getStyles } from './LogLine';\n\ninterface Props {\n  children: ReactNode;\n  onClick?: () => void;\n  style: CSSProperties;\n}\n\nexport const LogLineMessage = ({ children, onClick, style }: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <div style={style} className={`${styles.logLine} ${styles.logLineMessage}`}>\n      {onClick ? (\n        <button className={styles.loadMoreButton} onClick={onClick}>\n          {children}\n        </button>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n","import { ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { usePrevious } from 'react-use';\nimport { ListChildComponentProps, ListOnItemsRenderedProps } from 'react-window';\n\nimport { AbsoluteTimeRange, LogsSortOrder, TimeRange } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Spinner } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { canScrollBottom, getVisibleRange, ScrollDirection, shouldLoadMore } from '../InfiniteScroll';\n\nimport { LogLine } from './LogLine';\nimport { LogLineMessage } from './LogLineMessage';\nimport { LogListModel } from './processing';\n\ninterface ChildrenProps {\n  itemCount: number;\n  getItemKey: (index: number) => string;\n  onItemsRendered: (props: ListOnItemsRenderedProps) => void;\n  Renderer: (props: ListChildComponentProps) => ReactNode;\n}\n\ninterface Props {\n  children: (props: ChildrenProps) => ReactNode;\n  handleOverflow: (index: number, id: string, height: number) => void;\n  loadMore?: (range: AbsoluteTimeRange) => void;\n  logs: LogListModel[];\n  scrollElement: HTMLDivElement | null;\n  setInitialScrollPosition: () => void;\n  showTime: boolean;\n  sortOrder: LogsSortOrder;\n  timeRange: TimeRange;\n  timeZone: string;\n  wrapLogMessage: boolean;\n}\n\ntype InfiniteLoaderState = 'idle' | 'out-of-bounds' | 'pre-scroll' | 'loading';\n\nexport const InfiniteScroll = ({\n  children,\n  handleOverflow,\n  loadMore,\n  logs,\n  scrollElement,\n  setInitialScrollPosition,\n  showTime,\n  sortOrder,\n  timeRange,\n  timeZone,\n  wrapLogMessage,\n}: Props) => {\n  const [infiniteLoaderState, setInfiniteLoaderState] = useState<InfiniteLoaderState>('idle');\n  const [autoScroll, setAutoScroll] = useState(false);\n  const prevLogs = usePrevious(logs);\n  const prevSortOrder = usePrevious(sortOrder);\n  const lastScroll = useRef<number>(scrollElement?.scrollTop || 0);\n  const lastEvent = useRef<Event | WheelEvent | null>(null);\n  const countRef = useRef(0);\n  const lastLogOfPage = useRef<string[]>([]);\n\n  useEffect(() => {\n    // Logs have not changed, ignore effect\n    if (!prevLogs || prevLogs === logs) {\n      return;\n    }\n    // New logs are from infinite scrolling\n    if (infiniteLoaderState === 'loading') {\n      // out-of-bounds if no new logs returned\n      setInfiniteLoaderState(logs.length === prevLogs.length ? 'out-of-bounds' : 'idle');\n    } else {\n      lastLogOfPage.current = [];\n      setAutoScroll(true);\n    }\n  }, [infiniteLoaderState, logs, prevLogs]);\n\n  useEffect(() => {\n    if (prevSortOrder && prevSortOrder !== sortOrder) {\n      setInfiniteLoaderState('idle');\n    }\n  }, [prevSortOrder, sortOrder]);\n\n  useEffect(() => {\n    if (autoScroll) {\n      setInitialScrollPosition();\n      setAutoScroll(false);\n    }\n  }, [autoScroll, setInitialScrollPosition]);\n\n  const onLoadMore = useCallback(() => {\n    const newRange = canScrollBottom(getVisibleRange(logs), timeRange, timeZone, sortOrder);\n    if (!newRange) {\n      setInfiniteLoaderState('out-of-bounds');\n      return;\n    }\n    lastLogOfPage.current.push(logs[logs.length - 1].uid);\n    setInfiniteLoaderState('loading');\n    loadMore?.(newRange);\n\n    reportInteraction('grafana_logs_infinite_scrolling', {\n      direction: 'bottom',\n      sort_order: sortOrder,\n    });\n  }, [loadMore, logs, sortOrder, timeRange, timeZone]);\n\n  useEffect(() => {\n    if (!scrollElement || !loadMore || !config.featureToggles.logsInfiniteScrolling) {\n      return;\n    }\n\n    function handleScroll(event: Event | WheelEvent) {\n      if (!scrollElement || !loadMore || !logs.length || infiniteLoaderState !== 'pre-scroll') {\n        return;\n      }\n      const scrollDirection = shouldLoadMore(event, lastEvent.current, countRef, scrollElement, lastScroll.current);\n      lastEvent.current = event;\n      lastScroll.current = scrollElement.scrollTop;\n      if (scrollDirection === ScrollDirection.Bottom) {\n        onLoadMore();\n      }\n    }\n\n    scrollElement.addEventListener('scroll', handleScroll);\n    scrollElement.addEventListener('wheel', handleScroll);\n\n    return () => {\n      scrollElement.removeEventListener('scroll', handleScroll);\n      scrollElement.removeEventListener('wheel', handleScroll);\n    };\n  }, [infiniteLoaderState, loadMore, logs.length, onLoadMore, scrollElement]);\n\n  const Renderer = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      if (!logs[index] && infiniteLoaderState !== 'idle') {\n        return (\n          <LogLineMessage style={style} onClick={infiniteLoaderState === 'pre-scroll' ? onLoadMore : undefined}>\n            {getMessageFromInfiniteLoaderState(infiniteLoaderState, sortOrder)}\n          </LogLineMessage>\n        );\n      }\n      return (\n        <LogLine\n          index={index}\n          log={logs[index]}\n          showTime={showTime}\n          style={style}\n          variant={getLogLineVariant(logs, index, lastLogOfPage.current)}\n          wrapLogMessage={wrapLogMessage}\n          onOverflow={handleOverflow}\n        />\n      );\n    },\n    [handleOverflow, infiniteLoaderState, logs, onLoadMore, showTime, sortOrder, wrapLogMessage]\n  );\n\n  const onItemsRendered = useCallback(\n    (props: ListOnItemsRenderedProps) => {\n      if (!scrollElement || infiniteLoaderState === 'loading' || infiniteLoaderState === 'out-of-bounds') {\n        return;\n      }\n      if (scrollElement.scrollHeight <= scrollElement.clientHeight) {\n        return;\n      }\n      const lastLogIndex = logs.length - 1;\n      const preScrollIndex = logs.length - 2;\n      if (props.visibleStopIndex >= lastLogIndex) {\n        setInfiniteLoaderState('pre-scroll');\n      } else if (props.visibleStartIndex < preScrollIndex) {\n        setInfiniteLoaderState('idle');\n      }\n    },\n    [infiniteLoaderState, logs.length, scrollElement]\n  );\n\n  const getItemKey = useCallback((index: number) => (logs[index] ? logs[index].uid : index.toString()), [logs]);\n\n  const itemCount = logs.length && loadMore && infiniteLoaderState !== 'idle' ? logs.length + 1 : logs.length;\n\n  return <>{children({ getItemKey, itemCount, onItemsRendered, Renderer })}</>;\n};\n\nfunction getMessageFromInfiniteLoaderState(state: InfiniteLoaderState, order: LogsSortOrder) {\n  switch (state) {\n    case 'out-of-bounds':\n      return t('logs.infinite-scroll.end-of-range', 'End of the selected time range.');\n    case 'loading':\n      return (\n        <>\n          {order === LogsSortOrder.Ascending\n            ? t('logs.infinite-scroll.load-newer', 'Loading newer logs...')\n            : t('logs.infinite-scroll.load-older', 'Loading older logs...')}{' '}\n          <Spinner inline />\n        </>\n      );\n    case 'pre-scroll':\n      return t('logs.infinite-scroll.load-more', 'Scroll to load more');\n    default:\n      return null;\n  }\n}\n\nfunction getLogLineVariant(logs: LogListModel[], index: number, lastLogOfPage: string[]) {\n  if (!lastLogOfPage.length || !logs[index - 1]) {\n    return undefined;\n  }\n  const prevLog = logs[index - 1];\n  for (const uid of lastLogOfPage) {\n    if (prevLog.uid === uid) {\n      // First log of an infinite scrolling page\n      return 'infinite-scroll';\n    }\n  }\n  return undefined;\n}\n","import { dateTimeFormat, LogRowModel, LogsSortOrder } from '@grafana/data';\n\nimport { escapeUnescapedString, sortLogRows } from '../../utils';\n\nimport { measureTextWidth } from './virtualization';\n\nexport interface LogListModel extends LogRowModel {\n  body: string;\n  timestamp: string;\n  dimensions: LogDimensions;\n}\n\nexport interface LogDimensions {\n  timestampWidth: number;\n  levelWidth: number;\n}\n\ninterface PreProcessOptions {\n  escape: boolean;\n  order: LogsSortOrder;\n  timeZone: string;\n  wrap: boolean;\n}\n\nexport const preProcessLogs = (\n  logs: LogRowModel[],\n  { escape, order, timeZone, wrap }: PreProcessOptions\n): LogListModel[] => {\n  const orderedLogs = sortLogRows(logs, order);\n  return orderedLogs.map((log) => preProcessLog(log, { wrap, escape, timeZone, expanded: false }));\n};\n\ninterface PreProcessLogOptions {\n  escape: boolean;\n  expanded: boolean; // Not yet implemented\n  timeZone: string;\n  wrap: boolean;\n}\nconst preProcessLog = (log: LogRowModel, { escape, expanded, timeZone, wrap }: PreProcessLogOptions): LogListModel => {\n  let body = log.entry;\n  const timestamp = dateTimeFormat(log.timeEpochMs, {\n    timeZone,\n    defaultWithMS: true,\n  });\n\n  if (escape && log.hasUnescapedContent) {\n    body = escapeUnescapedString(body);\n  }\n  // With wrapping disabled, we want to turn it into a single-line log entry unless the line is expanded\n  if (!wrap && !expanded) {\n    body = body.replace(/(\\r\\n|\\n|\\r)/g, '');\n  }\n\n  return {\n    ...log,\n    body,\n    timestamp,\n    dimensions: {\n      timestampWidth: measureTextWidth(timestamp),\n      levelWidth: measureTextWidth(log.logLevel),\n    },\n  };\n};\n","import { debounce } from 'lodash';\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { VariableSizeList } from 'react-window';\n\nimport { AbsoluteTimeRange, CoreApp, EventBus, LogRowModel, LogsSortOrder, TimeRange } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { InfiniteScroll } from './InfiniteScroll';\nimport { preProcessLogs, LogListModel } from './processing';\nimport {\n  getLogLineSize,\n  init as initVirtualization,\n  resetLogLineSizes,\n  ScrollToLogsEvent,\n  storeLogLineSize,\n} from './virtualization';\n\ninterface Props {\n  app: CoreApp;\n  logs: LogRowModel[];\n  containerElement: HTMLDivElement;\n  eventBus: EventBus;\n  forceEscape?: boolean;\n  initialScrollPosition?: 'top' | 'bottom';\n  loadMore?: (range: AbsoluteTimeRange) => void;\n  showTime: boolean;\n  sortOrder: LogsSortOrder;\n  timeRange: TimeRange;\n  timeZone: string;\n  wrapLogMessage: boolean;\n}\n\nexport const LogList = ({\n  app,\n  containerElement,\n  eventBus,\n  forceEscape = false,\n  initialScrollPosition = 'top',\n  loadMore,\n  logs,\n  showTime,\n  sortOrder,\n  timeRange,\n  timeZone,\n  wrapLogMessage,\n}: Props) => {\n  const [processedLogs, setProcessedLogs] = useState<LogListModel[]>([]);\n  const [listHeight, setListHeight] = useState(\n    app === CoreApp.Explore ? window.innerHeight * 0.75 : containerElement.clientHeight\n  );\n  const theme = useTheme2();\n  const listRef = useRef<VariableSizeList | null>(null);\n  const widthRef = useRef(containerElement.clientWidth);\n  const scrollRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    initVirtualization(theme);\n  }, [theme]);\n\n  useEffect(() => {\n    const subscription = eventBus.subscribe(ScrollToLogsEvent, (e: ScrollToLogsEvent) =>\n      handleScrollToEvent(e, logs.length, listRef.current)\n    );\n    return () => subscription.unsubscribe();\n  }, [eventBus, logs.length]);\n\n  useEffect(() => {\n    setProcessedLogs(preProcessLogs(logs, { wrap: wrapLogMessage, escape: forceEscape, order: sortOrder, timeZone }));\n    listRef.current?.resetAfterIndex(0);\n  }, [forceEscape, logs, sortOrder, timeZone, wrapLogMessage]);\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      setListHeight(app === CoreApp.Explore ? window.innerHeight * 0.75 : containerElement.clientHeight);\n    }, 50);\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [app, containerElement.clientHeight]);\n\n  useLayoutEffect(() => {\n    if (widthRef.current === containerElement.clientWidth) {\n      return;\n    }\n    resetLogLineSizes();\n    listRef.current?.resetAfterIndex(0);\n    widthRef.current = containerElement.clientWidth;\n  });\n\n  const handleOverflow = useCallback(\n    (index: number, id: string, height: number) => {\n      if (containerElement) {\n        storeLogLineSize(id, containerElement, height);\n        listRef.current?.resetAfterIndex(index);\n      }\n    },\n    [containerElement]\n  );\n\n  const handleScrollPosition = useCallback(() => {\n    listRef.current?.scrollToItem(initialScrollPosition === 'top' ? 0 : logs.length - 1);\n  }, [initialScrollPosition, logs.length]);\n\n  if (!containerElement || listHeight == null) {\n    // Wait for container to be rendered\n    return null;\n  }\n\n  return (\n    <InfiniteScroll\n      handleOverflow={handleOverflow}\n      logs={processedLogs}\n      loadMore={loadMore}\n      scrollElement={scrollRef.current}\n      showTime={showTime}\n      sortOrder={sortOrder}\n      timeRange={timeRange}\n      timeZone={timeZone}\n      setInitialScrollPosition={handleScrollPosition}\n      wrapLogMessage={wrapLogMessage}\n    >\n      {({ getItemKey, itemCount, onItemsRendered, Renderer }) => (\n        <VariableSizeList\n          height={listHeight}\n          itemCount={itemCount}\n          itemSize={getLogLineSize.bind(null, processedLogs, containerElement, { wrap: wrapLogMessage, showTime })}\n          itemKey={getItemKey}\n          layout=\"vertical\"\n          onItemsRendered={onItemsRendered}\n          outerRef={scrollRef}\n          ref={listRef}\n          style={{ overflowY: 'scroll' }}\n          width=\"100%\"\n        >\n          {Renderer}\n        </VariableSizeList>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction handleScrollToEvent(event: ScrollToLogsEvent, logsCount: number, list: VariableSizeList | null) {\n  if (event.payload.scrollTo === 'top') {\n    list?.scrollTo(0);\n  } else {\n    list?.scrollToItem(logsCount - 1);\n  }\n}\n","import { BusEventWithPayload, GrafanaTheme2 } from '@grafana/data';\n\nimport { LogListModel } from './processing';\n\nlet ctx: CanvasRenderingContext2D | null = null;\nlet gridSize = 8;\nlet paddingBottom = gridSize * 0.75;\nlet lineHeight = 22;\nlet measurementMode: 'canvas' | 'dom' = 'canvas';\n\nexport function init(theme: GrafanaTheme2) {\n  const font = `${theme.typography.fontSize}px ${theme.typography.fontFamilyMonospace}`;\n  const letterSpacing = theme.typography.body.letterSpacing;\n\n  initDOMmeasurement(font, letterSpacing);\n  initCanvasMeasurement(font, letterSpacing);\n\n  gridSize = theme.spacing.gridSize;\n  paddingBottom = gridSize * 0.75;\n  lineHeight = theme.typography.fontSize * theme.typography.body.lineHeight;\n\n  widthMap = new Map<number, number>();\n  resetLogLineSizes();\n\n  determineMeasurementMode();\n\n  return true;\n}\n\nfunction determineMeasurementMode() {\n  if (!ctx) {\n    measurementMode = 'dom';\n    return;\n  }\n  const canvasCharWidth = ctx.measureText('e').width;\n  const domCharWidth = measureTextWidthWithDOM('e');\n  const diff = domCharWidth - canvasCharWidth;\n  if (diff >= 0.1) {\n    console.warn('Virtualized log list: falling back to DOM for measurement');\n    measurementMode = 'dom';\n  }\n}\n\nfunction initCanvasMeasurement(font: string, letterSpacing: string | undefined) {\n  const canvas = document.createElement('canvas');\n  ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.font = font;\n  ctx.fontKerning = 'normal';\n  ctx.fontStretch = 'normal';\n  ctx.fontVariantCaps = 'normal';\n  ctx.textRendering = 'optimizeLegibility';\n  if (letterSpacing) {\n    ctx.letterSpacing = letterSpacing;\n  }\n}\n\nconst span = document.createElement('span');\nfunction initDOMmeasurement(font: string, letterSpacing: string | undefined) {\n  span.style.font = font;\n  span.style.visibility = 'hidden';\n  span.style.position = 'absolute';\n  span.style.wordBreak = 'break-all';\n  if (letterSpacing) {\n    span.style.letterSpacing = letterSpacing;\n  }\n}\n\nlet widthMap = new Map<number, number>();\nexport function measureTextWidth(text: string): number {\n  if (!ctx) {\n    throw new Error(`Measuring context canvas is not initialized. Call init() before.`);\n  }\n  const key = text.length;\n\n  const storedWidth = widthMap.get(key);\n  if (storedWidth) {\n    return storedWidth;\n  }\n\n  const width = measurementMode === 'canvas' ? ctx.measureText(text).width : measureTextWidthWithDOM(text);\n  widthMap.set(key, width);\n\n  return width;\n}\n\nfunction measureTextWidthWithDOM(text: string) {\n  span.textContent = text;\n\n  document.body.appendChild(span);\n  const width = span.getBoundingClientRect().width;\n  document.body.removeChild(span);\n\n  return width;\n}\n\nexport function measureTextHeight(text: string, maxWidth: number, beforeWidth = 0) {\n  let logLines = 0;\n  const charWidth = measureTextWidth('e');\n  let logLineCharsLength = Math.round(maxWidth / charWidth);\n  const firstLineCharsLength = Math.floor((maxWidth - beforeWidth) / charWidth) - 2 * charWidth;\n  const textLines = text.split('\\n');\n\n  // Skip unnecessary measurements\n  if (textLines.length === 1 && text.length < firstLineCharsLength) {\n    return {\n      lines: 1,\n      height: lineHeight + paddingBottom,\n    };\n  }\n\n  for (const textLine of textLines) {\n    for (let start = 0; start < textLine.length; ) {\n      let testLogLine: string;\n      let width = 0;\n      let delta = 0;\n      let availableWidth = maxWidth - beforeWidth;\n      do {\n        testLogLine = textLine.substring(start, start + logLineCharsLength - delta);\n        width = measureTextWidth(testLogLine);\n        delta += 1;\n      } while (width >= availableWidth);\n      if (beforeWidth) {\n        beforeWidth = 0;\n      }\n      logLines += 1;\n      start += testLogLine.length;\n    }\n  }\n\n  const height = logLines * lineHeight + paddingBottom;\n\n  return {\n    lines: logLines,\n    height,\n  };\n}\n\ninterface DisplayOptions {\n  wrap: boolean;\n  showTime: boolean;\n}\n\nexport function getLogLineSize(\n  logs: LogListModel[],\n  container: HTMLDivElement | null,\n  { wrap, showTime }: DisplayOptions,\n  index: number\n) {\n  if (!container) {\n    return 0;\n  }\n  // !logs[index] means the line is not yet loaded by infinite scrolling\n  if (!wrap || !logs[index]) {\n    return lineHeight + paddingBottom;\n  }\n  const storedSize = retrieveLogLineSize(logs[index].uid, container);\n  if (storedSize) {\n    return storedSize;\n  }\n  const gap = gridSize;\n  let optionsWidth = 0;\n  if (showTime) {\n    optionsWidth += logs[index].dimensions.timestampWidth + gap;\n  }\n  if (logs[index].logLevel) {\n    optionsWidth += logs[index].dimensions.levelWidth + gap;\n  }\n  const { height } = measureTextHeight(logs[index].body, getLogContainerWidth(container), optionsWidth);\n  return height;\n}\n\nexport function hasUnderOrOverflow(element: HTMLDivElement, calculatedHeight?: number): number | null {\n  const height = calculatedHeight ?? element.clientHeight;\n  if (element.scrollHeight > height) {\n    return element.scrollHeight;\n  }\n  const child = element.firstChild;\n  if (child instanceof HTMLDivElement && child.clientHeight < height) {\n    return child.clientHeight;\n  }\n  return null;\n}\n\nconst scrollBarWidth = getScrollbarWidth();\n\nexport function getLogContainerWidth(container: HTMLDivElement) {\n  return container.clientWidth - scrollBarWidth;\n}\n\nexport function getScrollbarWidth() {\n  const hiddenDiv = document.createElement('div');\n\n  hiddenDiv.style.width = '100px';\n  hiddenDiv.style.height = '100px';\n  hiddenDiv.style.overflow = 'scroll';\n  hiddenDiv.style.position = 'absolute';\n  hiddenDiv.style.top = '-9999px';\n\n  document.body.appendChild(hiddenDiv);\n  const width = hiddenDiv.offsetWidth - hiddenDiv.clientWidth;\n  document.body.removeChild(hiddenDiv);\n\n  return width;\n}\n\nlet logLineSizesMap = new Map<string, number>();\nexport function resetLogLineSizes() {\n  logLineSizesMap = new Map<string, number>();\n}\n\nexport function storeLogLineSize(id: string, container: HTMLDivElement, height: number) {\n  const key = `${id}_${getLogContainerWidth(container)}`;\n  logLineSizesMap.set(key, height);\n}\n\nexport function retrieveLogLineSize(id: string, container: HTMLDivElement) {\n  const key = `${id}_${getLogContainerWidth(container)}`;\n  return logLineSizesMap.get(key);\n}\n\nexport interface ScrollToLogsEventPayload {\n  scrollTo: 'top' | 'bottom';\n}\n\nexport class ScrollToLogsEvent extends BusEventWithPayload<ScrollToLogsEventPayload> {\n  static type = 'logs-panel-scroll-to';\n}\n"],"names":["LogLine","index","log","style","onOverflow","showTime","variant","wrapLogMessage","theme","styles","getStyles","logLineRef","calculatedHeight","actualHeight","colors","LogLineMessage","children","onClick","handleOverflow","loadMore","logs","scrollElement","setInitialScrollPosition","sortOrder","timeRange","timeZone","infiniteLoaderState","setInfiniteLoaderState","autoScroll","setAutoScroll","prevLogs","usePrevious","prevSortOrder","lastScroll","lastEvent","countRef","lastLogOfPage","onLoadMore","newRange","config","handleScroll","event","scrollDirection","Renderer","getMessageFromInfiniteLoaderState","getLogLineVariant","onItemsRendered","props","lastLogIndex","preScrollIndex","getItemKey","itemCount","state","order","Spinner","prevLog","uid","preProcessLogs","escape","wrap","preProcessLog","expanded","body","timestamp","LogList","app","containerElement","eventBus","forceEscape","initialScrollPosition","processedLogs","setProcessedLogs","listHeight","setListHeight","listRef","widthRef","scrollRef","subscription","e","handleScrollToEvent","handleResize","id","height","handleScrollPosition","logsCount","list","ctx","gridSize","paddingBottom","lineHeight","measurementMode","init","font","letterSpacing","initDOMmeasurement","initCanvasMeasurement","widthMap","resetLogLineSizes","determineMeasurementMode","canvasCharWidth","measureTextWidthWithDOM","span","measureTextWidth","text","key","storedWidth","width","measureTextHeight","maxWidth","beforeWidth","logLines","charWidth","logLineCharsLength","firstLineCharsLength","textLines","textLine","start","testLogLine","delta","availableWidth","getLogLineSize","container","storedSize","retrieveLogLineSize","gap","optionsWidth","getLogContainerWidth","hasUnderOrOverflow","element","child","scrollBarWidth","getScrollbarWidth","hiddenDiv","logLineSizesMap","storeLogLineSize","ScrollToLogsEvent"],"sourceRoot":""}