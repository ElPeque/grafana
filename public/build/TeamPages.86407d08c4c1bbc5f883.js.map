{"version":3,"file":"TeamPages.86407d08c4c1bbc5f883.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/EmptyListCTA/EmptyListCTA.tsx","webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/core/components/Upgrade/ProBadge.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/state/selectors.ts","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { MouseEvent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button, CallToActionCard, Icon, IconName, LinkButton } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport interface Props {\n  title: string;\n  buttonIcon: IconName;\n  buttonLink?: string;\n  buttonTitle: string;\n  buttonDisabled?: boolean;\n  onClick?: (event: MouseEvent) => void;\n  proTip?: string;\n  proTipLink?: string;\n  proTipLinkTitle?: string;\n  proTipTarget?: string;\n  infoBox?: { __html: string };\n  infoBoxTitle?: string;\n}\n\nconst ctaStyle = css({\n  textAlign: 'center',\n});\n\nconst infoBoxStyles = css({\n  maxWidth: '700px',\n  margin: '0 auto',\n});\n\nconst EmptyListCTA = ({\n  title,\n  buttonIcon,\n  buttonLink,\n  buttonTitle,\n  buttonDisabled,\n  onClick,\n  proTip,\n  proTipLink,\n  proTipLinkTitle,\n  proTipTarget,\n  infoBox,\n  infoBoxTitle,\n}: Props) => {\n  const footer = () => {\n    return (\n      <>\n        {proTip ? (\n          <span key=\"proTipFooter\">\n            <Icon name=\"rocket\" />\n            <Trans i18nKey=\"empty-list-cta.pro-tip\">ProTip: {{ proTip }}</Trans>\n            {proTipLink && (\n              <a href={proTipLink} target={proTipTarget} className=\"text-link\">\n                {proTipLinkTitle}\n              </a>\n            )}\n          </span>\n        ) : (\n          ''\n        )}\n        {infoBox ? (\n          <Alert severity=\"info\" title={infoBoxTitle ?? ''} className={infoBoxStyles}>\n            <div dangerouslySetInnerHTML={infoBox} />\n          </Alert>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  };\n\n  const ctaElementClassName = !footer()\n    ? css({\n        marginBottom: '20px',\n      })\n    : '';\n\n  const ButtonEl = buttonLink ? LinkButton : Button;\n  const ctaElement = (\n    <ButtonEl\n      size=\"lg\"\n      onClick={onClick}\n      href={buttonLink}\n      icon={buttonIcon}\n      className={ctaElementClassName}\n      data-testid={selectors.components.CallToActionCard.buttonV2(buttonTitle)}\n      disabled={buttonDisabled}\n    >\n      {buttonTitle}\n    </ButtonEl>\n  );\n\n  return <CallToActionCard className={ctaStyle} message={title} footer={footer()} callToActionElement={ctaElement} />;\n};\n\nexport default EmptyListCTA;\n","import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  roles?: Role[];\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  roles,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) && teamId > 0) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles, roles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [getTeamRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { difference } from 'lodash';\nimport { useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\ntype MultiOrgRoleOptions = Record<number, Role[]>;\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n\nexport const useMultiOrgRoleOptions = (orgIDs: number[]): MultiOrgRoleOptions => {\n  const [orgRoleOptions, setOrgRoleOptions] = useState<MultiOrgRoleOptions>({});\n\n  useDeepCompareEffect(() => {\n    if (!contextSrv.licensedAccessControlEnabled() || !contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return;\n    }\n\n    const currentOrgIDs = Object.keys(orgRoleOptions).map((o) => (typeof o === 'number' ? o : parseInt(o, 10)));\n    const newOrgIDs = difference(orgIDs, currentOrgIDs);\n\n    Promise.all(\n      newOrgIDs.map((orgID) => {\n        return fetchRoleOptions(orgID).then((roleOptions) => [orgID, roleOptions]);\n      })\n    ).then((value) => {\n      setOrgRoleOptions({\n        ...orgRoleOptions,\n        ...Object.fromEntries(value),\n      });\n    });\n  }, [orgIDs]);\n\n  return orgRoleOptions;\n};\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\n\nimport { FeatureState, getBuiltInThemes, ThemeRegistryItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Preferences as UserPreferencesDTO } from '@grafana/schema/src/raw/preferences/x/preferences_types.gen';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Label,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n  Combobox,\n  ComboboxOption,\n  TextLink,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LANGUAGES, PSEUDO_LOCALE } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { changeTheme } from 'app/core/services/theme';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  preferenceType: 'org' | 'team' | 'user';\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO & {\n  isLoading: boolean;\n};\n\nfunction getLanguageOptions(): ComboboxOption[] {\n  const languageOptions = LANGUAGES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  })).sort((a, b) => {\n    if (a.value === PSEUDO_LOCALE) {\n      return 1;\n    }\n\n    if (b.value === PSEUDO_LOCALE) {\n      return -1;\n    }\n\n    return a.label.localeCompare(b.label);\n  });\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n  themeOptions: ComboboxOption[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      isLoading: false,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      language: '',\n      queryHistory: { homeTab: '' },\n      navbar: { bookmarkUrls: [] },\n    };\n\n    const allowedExtraThemes = [];\n\n    if (config.featureToggles.extraThemes) {\n      allowedExtraThemes.push('debug');\n    }\n\n    if (config.featureToggles.grafanaconThemes) {\n      allowedExtraThemes.push('desertbloom');\n      allowedExtraThemes.push('gildedgrove');\n      allowedExtraThemes.push('sapphiredusk');\n      allowedExtraThemes.push('tron');\n      allowedExtraThemes.push('gloom');\n    }\n\n    this.themeOptions = getBuiltInThemes(allowedExtraThemes).map((theme) => ({\n      value: theme.id,\n      label: getTranslatedThemeName(theme),\n    }));\n\n    // Add default option\n    this.themeOptions.unshift({ value: '', label: t('shared-preferences.theme.default-label', 'Default') });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true,\n    });\n    const prefs = await this.service.load();\n\n    this.setState({\n      isLoading: false,\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      language: prefs.language,\n      queryHistory: prefs.queryHistory,\n      navbar: prefs.navbar,\n    });\n  }\n\n  onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, language, queryHistory, navbar } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, language, queryHistory, navbar });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: ComboboxOption<string>) => {\n    this.setState({ theme: value.value });\n    reportInteraction('grafana_preferences_theme_changed', {\n      toTheme: value.value,\n      preferenceType: this.props.preferenceType,\n    });\n\n    if (value.value) {\n      changeTheme(value.value, true);\n    }\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (typeof timezone !== 'string') {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLanguageChanged = (language: string) => {\n    this.setState({ language });\n\n    reportInteraction('grafana_preferences_language_changed', {\n      toLanguage: language,\n      preferenceType: this.props.preferenceType,\n    });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, language, isLoading } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n    const currentThemeOption = this.themeOptions.find((x) => x.value === theme) ?? this.themeOptions[0];\n\n    return (\n      <form onSubmit={this.onSubmitForm} className={styles.form}>\n        <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n          <Field\n            loading={isLoading}\n            disabled={isLoading}\n            label={t('shared-preferences.fields.theme-label', 'Interface theme')}\n            description={\n              config.featureToggles.grafanaconThemes && config.feedbackLinksEnabled ? (\n                <Trans i18nKey=\"shared-preferences.fields.theme-description\">\n                  Enjoying the limited edition themes? Tell us what you'd like to see{' '}\n                  <TextLink\n                    variant=\"bodySmall\"\n                    external\n                    href=\"https://docs.google.com/forms/d/e/1FAIpQLSeRKAY8nUMEVIKSYJ99uOO-dimF6Y69_If1Q1jTLOZRWqK1cw/viewform?usp=dialog\"\n                  >\n                    here.\n                  </TextLink>\n                </Trans>\n              ) : undefined\n            }\n          >\n            <Combobox\n              options={this.themeOptions}\n              value={currentThemeOption.value}\n              onChange={this.onThemeChanged}\n              id=\"shared-preferences-theme-select\"\n            />\n          </Field>\n\n          <Field\n            loading={isLoading}\n            disabled={isLoading}\n            label={\n              <Label htmlFor=\"home-dashboard-select\">\n                <span className={styles.labelText}>\n                  <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                </span>\n              </Label>\n            }\n            data-testid=\"User preferences home dashboard drop down\"\n          >\n            <DashboardPicker\n              value={homeDashboardUID}\n              onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n              defaultOptions={true}\n              isClearable={true}\n              placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n              inputId=\"home-dashboard-select\"\n            />\n          </Field>\n\n          <Field\n            loading={isLoading}\n            disabled={isLoading}\n            label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n            data-testid={selectors.components.TimeZonePicker.containerV2}\n          >\n            <TimeZonePicker\n              includeInternal={true}\n              value={timezone}\n              onChange={this.onTimeZoneChanged}\n              inputId=\"shared-preferences-timezone-picker\"\n            />\n          </Field>\n\n          <Field\n            loading={isLoading}\n            disabled={isLoading}\n            label={t('shared-preferences.fields.week-start-label', 'Week start')}\n            data-testid={selectors.components.WeekStartPicker.containerV2}\n          >\n            <WeekStartPicker\n              value={weekStart || ''}\n              onChange={this.onWeekStartChanged}\n              inputId=\"shared-preferences-week-start-picker\"\n            />\n          </Field>\n\n          <Field\n            loading={isLoading}\n            disabled={isLoading}\n            label={\n              <Label htmlFor=\"locale-select\">\n                <span className={styles.labelText}>\n                  <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                </span>\n                <FeatureBadge featureState={FeatureState.beta} />\n              </Label>\n            }\n            data-testid=\"User preferences language drop down\"\n          >\n            <Combobox\n              value={languages.find((lang) => lang.value === language)?.value || ''}\n              onChange={(lang: ComboboxOption | null) => this.onLanguageChanged(lang?.value ?? '')}\n              options={languages}\n              placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n              id=\"locale-select\"\n            />\n          </Field>\n        </FieldSet>\n        <Button type=\"submit\" variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n          <Trans i18nKey=\"common.save\">Save</Trans>\n        </Button>\n      </form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css({\n      marginRight: '6px',\n    }),\n    form: css({\n      width: '100%',\n      maxWidth: '600px',\n    }),\n  };\n});\n\nfunction getTranslatedThemeName(theme: ThemeRegistryItem) {\n  switch (theme.id) {\n    case 'dark':\n      return t('shared.preferences.theme.dark-label', 'Dark');\n    case 'light':\n      return t('shared.preferences.theme.light-label', 'Light');\n    case 'system':\n      return t('shared.preferences.theme.system-label', 'System preference');\n    default:\n      return theme.name;\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props extends HTMLAttributes<HTMLSpanElement> {\n  text?: string;\n  experimentId?: string;\n  eventVariant?: string;\n}\n\nexport const ProBadge = ({ text = 'PRO', className, experimentId, eventVariant = '', ...htmlProps }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (experimentId) {\n      reportExperimentView(experimentId, 'test', eventVariant);\n    }\n  }, [experimentId, eventVariant]);\n\n  return (\n    <span className={cx(styles.badge, className)} {...htmlProps}>\n      {text}\n    </span>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    badge: css({\n      marginLeft: theme.spacing(1.25),\n      borderRadius: theme.shape.borderRadius(5),\n      backgroundColor: theme.colors.success.main,\n      padding: theme.spacing(0.25, 0.75),\n      color: 'white', // use the same color for both themes\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(10),\n    }),\n  };\n};\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css, cx } from '@emotion/css';\nimport { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime/src';\nimport { Button, Icon, LinkButton, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  featureName: string;\n  size?: ComponentSize;\n  text?: string;\n  eventVariant?: string;\n  featureId: string;\n}\n\nexport const UpgradeBox = ({\n  featureName,\n  className,\n  children,\n  text,\n  featureId,\n  eventVariant = '',\n  size = 'md',\n  ...htmlProps\n}: Props) => {\n  const styles = useStyles2(getUpgradeBoxStyles, size);\n\n  useEffect(() => {\n    reportExperimentView(`feature-highlights-${featureId}`, 'test', eventVariant);\n  }, [eventVariant, featureId]);\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div className={styles.inner}>\n        <p className={styles.text}>\n          <Trans i18nKey=\"upgrade-box.discovery-text\">You’ve discovered a Pro feature!</Trans>{' '}\n          {text ||\n            t('upgrade-box.discovery-text-continued', 'Get the Grafana Pro plan to access {{featureName}}.', {\n              featureName,\n            })}\n        </p>\n        <LinkButton\n          variant=\"secondary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Trans i18nKey=\"upgrade-box.upgrade-button\">Upgrade</Trans>\n        </LinkButton>\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css({\n      display: 'flex',\n      alignItems: 'center',\n      position: 'relative',\n      borderRadius: borderRadius,\n      background: theme.colors.success.transparent,\n      padding: theme.spacing(2),\n      color: theme.colors.success.text,\n      fontSize: theme.typography[fontBase].fontSize,\n      textAlign: 'left',\n      lineHeight: '16px',\n      margin: theme.spacing(0, 'auto', 3, 'auto'),\n      maxWidth: `${theme.breakpoints.values.xxl}px`,\n      width: '100%',\n    }),\n    inner: css({\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      justifyContent: 'space-between',\n    }),\n    text: css({\n      margin: 0,\n    }),\n    button: css({\n      backgroundColor: theme.colors.success.main,\n      fontWeight: theme.typography.fontWeightLight,\n      color: 'white',\n\n      '&:hover': {\n        backgroundColor: theme.colors.success.main,\n      },\n\n      '&:focus-visible': {\n        boxShadow: 'none',\n        color: theme.colors.text.primary,\n        outline: `2px solid ${theme.colors.primary.main}`,\n      },\n    }),\n    icon: css({\n      margin: theme.spacing(0.5, 1, 0.5, 0.5),\n    }),\n  };\n};\n\nexport interface UpgradeContentProps {\n  image: string;\n  featureUrl?: string;\n  featureName: string;\n  description?: string;\n  listItems: string[];\n  caption?: string;\n  action?: {\n    text: string;\n    link?: string;\n    onClick?: () => void;\n  };\n}\n\nexport const UpgradeContent = ({\n  listItems,\n  image,\n  featureUrl,\n  featureName,\n  description,\n  caption,\n  action,\n}: UpgradeContentProps) => {\n  const styles = useStyles2(getUpgradeContentStyles);\n  return (\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <h3 className={styles.title}>\n          <Trans i18nKey=\"upgrade-box.get-started\">Get started with {{ featureName }}</Trans>\n        </h3>\n        {description && <h6 className={styles.description}>{description}</h6>}\n        <ul className={styles.list}>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <Icon name={'check'} size={'xl'} className={styles.icon} /> {item}\n            </li>\n          ))}\n        </ul>\n        {action?.link && (\n          <LinkButton variant={'primary'} href={action.link}>\n            {action.text}\n          </LinkButton>\n        )}\n        {action?.onClick && (\n          <Button variant={'primary'} onClick={action.onClick}>\n            {action.text}\n          </Button>\n        )}\n        {featureUrl && (\n          <LinkButton fill={'text'} href={featureUrl} className={styles.link} target=\"_blank\" rel=\"noreferrer noopener\">\n            <Trans i18nKey=\"upgrade-box.learn-more\">Learn more</Trans>\n          </LinkButton>\n        )}\n      </div>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n        {caption && <p className={styles.caption}>{caption}</p>}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeContentStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n    }),\n    content: css({\n      width: '45%',\n      marginRight: theme.spacing(4),\n    }),\n    media: css({\n      width: '55%',\n\n      img: {\n        width: '100%',\n      },\n    }),\n    title: css({\n      color: theme.colors.text.maxContrast,\n    }),\n    description: css({\n      color: theme.colors.text.primary,\n      fontWeight: theme.typography.fontWeightLight,\n    }),\n    list: css({\n      listStyle: 'none',\n      margin: theme.spacing(4, 0, 2, 0),\n\n      li: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        color: theme.colors.text.primary,\n        padding: theme.spacing(1, 0),\n      },\n    }),\n    icon: css({\n      color: theme.colors.success.main,\n      marginRight: theme.spacing(1),\n    }),\n    link: css({\n      marginLeft: theme.spacing(2),\n    }),\n    caption: css({\n      fontWeight: theme.typography.fontWeightLight,\n      margin: theme.spacing(1, 0, 0),\n    }),\n  };\n};\n\nexport const UpgradeContentVertical = ({\n  featureName,\n  description,\n  featureUrl,\n  image,\n}: Omit<UpgradeContentProps, 'listItems' | 'caption'>) => {\n  const styles = useStyles2(getContentVerticalStyles);\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>\n        <Trans i18nKey=\"upgrade-box.get-started\">Get started with {{ featureName }}</Trans>\n      </h3>\n      {description && <h6 className={styles.description}>{description}</h6>}\n      <LinkButton fill={'text'} href={featureUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n        <Trans i18nKey=\"upgrade-box.learn-more\">Learn more</Trans>\n      </LinkButton>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n      </div>\n    </div>\n  );\n};\n\nconst getContentVerticalStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      overflow: 'auto',\n      height: '100%',\n    }),\n    title: css({\n      color: theme.colors.text.maxContrast,\n    }),\n    description: css({\n      color: theme.colors.text.primary,\n      fontWeight: theme.typography.fontWeightLight,\n    }),\n    media: css({\n      width: '100%',\n      marginTop: theme.spacing(2),\n\n      img: {\n        width: '100%',\n      },\n    }),\n  };\n};\n\nconst getImgUrl = (urlOrId: string) => {\n  if (urlOrId.startsWith('http')) {\n    return urlOrId;\n  }\n\n  return '/public/img/enterprise/highlights/' + urlOrId;\n};\n","import { Team, TeamState } from 'app/types';\n\nexport const getTeamGroups = (state: TeamState) => state.groups;\n\nexport const getTeam = (state: TeamState, currentTeamUid: string): Team | null => {\n  if (state.team.uid === currentTeamUid) {\n    return state.team;\n  }\n\n  return null;\n};\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    const styles = getStyles();\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className={cx(styles.icon, 'page-sub-heading-icon')} name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n\nconst getStyles = () => ({\n  icon: css({\n    opacity: 0.7,\n\n    '&:hover': {\n      opacity: 1,\n    },\n  }),\n});\n","import { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, Team } from '../../types';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      emptyLabel=\"There are no members in this team or you do not have the permissions to list the current members.\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import { useForm } from 'react-hook-form';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport { Button, Field, FieldSet, Input, Stack } from '@grafana/ui';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Team } from 'app/types';\n\nimport { updateTeam } from './state/actions';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings = ({ team, updateTeam }: Props) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n  const currentOrgId = contextSrv.user.orgId;\n\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<Team>({ defaultValues: team });\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  const canListRoles =\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsRolesList, team) &&\n    contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n\n  const onSubmit = async (formTeam: Team) => {\n    updateTeam(formTeam.name, formTeam.email || '');\n  };\n\n  return (\n    <Stack direction={'column'} gap={3}>\n      <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '600px' }}>\n        <FieldSet label=\"Team details\">\n          <Field label=\"Numerical identifier\" disabled={true}>\n            <Input value={team.id} id=\"id-input\" />\n          </Field>\n          <Field\n            label=\"Name\"\n            disabled={!canWriteTeamSettings}\n            required\n            invalid={!!errors.name}\n            error=\"Name is required\"\n          >\n            <Input {...register('name', { required: true })} id=\"name-input\" />\n          </Field>\n\n          {contextSrv.licensedAccessControlEnabled() && canListRoles && (\n            <Field label=\"Role\">\n              <TeamRolePicker teamId={team.id} roleOptions={roleOptions} disabled={!canUpdateRoles} maxWidth=\"100%\" />\n            </Field>\n          )}\n\n          <Field\n            label=\"Email\"\n            description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n            disabled={!canWriteTeamSettings}\n          >\n            <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n          </Field>\n          <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n            Save\n          </Button>\n        </FieldSet>\n      </form>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} preferenceType=\"team\" />\n    </Stack>\n  );\n};\n\nexport default connector(TeamSettings);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { memo, useRef } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam } from './state/selectors';\n\ntype TeamPageRouteParams = {\n  uid: string;\n  page?: string;\n};\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nconst PAGES = ['members', 'settings', 'groupsync'];\n\nconst teamSelector = createSelector(\n  [(state: StoreState) => state.team, (_: StoreState, teamUid: string) => teamUid],\n  (team, teamUid) => getTeam(team, teamUid)\n);\n\nconst pageNavSelector = createSelector(\n  [\n    (state: StoreState) => state.navIndex,\n    (_state: StoreState, pageName: string) => pageName,\n    (_state: StoreState, _pageName: string, teamUid: string) => teamUid,\n  ],\n  (navIndex, pageName, teamUid) => {\n    const teamLoadingNav = getTeamLoadingNav(pageName);\n    return getNavModel(navIndex, `team-${pageName}-${teamUid}`, teamLoadingNav).main;\n  }\n);\n\nconst TeamPages = memo(() => {\n  const isSyncEnabled = useRef(featureEnabled('teamsync'));\n  const { uid: teamUid = '', page } = useParams<TeamPageRouteParams>();\n  const team = useSelector((state) => teamSelector(state, teamUid));\n\n  let defaultPage = 'members';\n  // With RBAC the settings page will always be available\n  if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n    defaultPage = 'settings';\n  }\n  const pageName = page ?? defaultPage;\n  const pageNav = useSelector((state) => pageNavSelector(state, pageName, teamUid));\n\n  const dispatch = useDispatch();\n  const { loading: isLoading } = useAsync(async () => dispatch(loadTeam(teamUid)), [teamUid]);\n\n  const renderPage = () => {\n    const currentPage = PAGES.includes(pageName) ? pageName : PAGES[0];\n\n    const canReadTeam = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsRead, team!);\n    const canReadTeamPermissions = contextSrv.hasPermissionInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!\n    );\n    const canWriteTeamPermissions = contextSrv.hasPermissionInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (canReadTeamPermissions) {\n          return <TeamPermissions team={team!} />;\n        }\n        return null;\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled.current) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  };\n\n  return (\n    <Page navId=\"teams\" pageNav={pageNav}>\n      <Page.Contents isLoading={isLoading}>{team && Object.keys(team).length !== 0 && renderPage()}</Page.Contents>\n    </Page>\n  );\n});\n\nTeamPages.displayName = 'TeamPages';\n\nexport default TeamPages;\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamWithRoles, TeamMember, ThunkResult, Team } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport {\n  teamGroupsLoaded,\n  queryChanged,\n  pageChanged,\n  teamLoaded,\n  teamMembersLoaded,\n  teamsLoaded,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadTeams(initial = false): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { query, page, perPage, sort } = getState().teams;\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded({ teams: [], totalCount: 0, page: 1, perPage, noTeams: true }));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ query, page, perpage: perPage, sort })\n    );\n\n    // We only want to check if there is no teams on the initial request.\n    // A query that returns no teams should not render the empty list banner.\n    let noTeams = false;\n    if (initial) {\n      noTeams = response.teams.length === 0;\n    }\n\n    if (\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)\n    ) {\n      dispatch(rolesFetchBegin());\n      const teamIds = response?.teams.map((t: TeamWithRoles) => t.id);\n      const roles = await getBackendSrv().post(`/api/access-control/teams/roles/search`, { teamIds });\n      response.teams.forEach((t: TeamWithRoles) => {\n        t.roles = roles ? roles[t.id] || [] : [];\n      });\n      dispatch(rolesFetchEnd());\n    }\n\n    dispatch(teamsLoaded({ noTeams, ...response }));\n  };\n}\n\nconst loadTeamsWithDebounce = debounce((dispatch) => dispatch(loadTeams()), 500);\n\nexport function loadTeam(uid: string): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${uid}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function deleteTeam(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${uid}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    loadTeamsWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<Team>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadTeams());\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.uid}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.uid}`, { name, email });\n    dispatch(loadTeam(team.uid));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    // need to use query parameter due to escaped characters in the request\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups?groupId=${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  uid: '',\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n  accessControl: { isEditor: false },\n  orgId: 0,\n  updated: '',\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.uid,\n    subTitle: 'Manage members and settings',\n    url: `org/teams/edit/${team.uid}`,\n    text: team.name,\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.uid}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.uid}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.uid}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.uid}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.uid}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.uid}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"names":["ctaStyle","infoBoxStyles","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","onClick","proTip","proTipLink","proTipLinkTitle","proTipTarget","infoBox","infoBoxTitle","footer","ctaElementClassName","ButtonEl","ctaElement","TeamRolePicker","teamId","roleOptions","disabled","roles","onApplyRoles","pendingRoles","apply","maxWidth","width","isLoading","loading","appliedRoles","getTeamRoles","e","onRolesChange","canUpdateRoles","useRoleOptions","organizationId","orgId","setOrgId","value","useMultiOrgRoleOptions","orgIDs","orgRoleOptions","setOrgRoleOptions","currentOrgIDs","o","newOrgIDs","orgID","getLanguageOptions","languageOptions","v","a","b","SharedPreferences","props","event","homeDashboardUID","theme","timezone","weekStart","language","queryHistory","navbar","dashboardUID","allowedExtraThemes","getTranslatedThemeName","prefs","styles","getStyles","languages","currentThemeOption","x","lang","ProBadge","text","className","experimentId","eventVariant","htmlProps","w3cStandardEmailValidator","isTrial","expiry","highlightTrial","UpgradeBox","featureName","children","featureId","size","getUpgradeBoxStyles","Icon","borderRadius","fontBase","UpgradeContent","listItems","image","featureUrl","description","caption","action","getUpgradeContentStyles","item","index","Button","getImgUrl","UpgradeContentVertical","getContentVerticalStyles","urlOrId","getTeamGroups","state","getTeam","currentTeamUid","mapStateToProps","mapDispatchToProps","connector","headerTooltip","TeamGroupSync","group","isReadOnly","isAdding","newGroupId","groups","Tooltip","SlideDown","CloseButton","InlineFieldRow","InlineField","Input","TeamSyncUpgradeContent","EmptyListCTA","canSetPermissions","team","updateTeam","canWriteTeamSettings","currentOrgId","handleSubmit","register","errors","canListRoles","onSubmit","formTeam","Stack","FieldSet","Field","PageTypes","PAGES","teamSelector","_","teamUid","pageNavSelector","_state","pageName","_pageName","navIndex","teamLoadingNav","TeamPages","isSyncEnabled","page","defaultPage","pageNav","dispatch","useAsync","renderPage","currentPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","config","Page","loadTeams","initial","getState","query","perPage","sort","response","noTeams","teamIds","t","loadTeamsWithDebounce","loadTeam","uid","deleteTeam","changeQuery","changePage","changeSort","sortBy","loadTeamMembers","getStore","name","email","loadTeamGroups","addTeamGroup","groupId","removeTeamGroup","updateTeamMember","member","loadingTeam","buildNavModel","navModel","teamGroupSync","isLoadingTeam","getTeamLoadingNav","main","node","child"],"sourceRoot":""}