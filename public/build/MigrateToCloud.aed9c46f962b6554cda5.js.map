{"version":3,"file":"MigrateToCloud.aed9c46f962b6554cda5.js","mappings":"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","sources":["webpack://grafana/./public/app/features/migrate-to-cloud/shared/InfoItem.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/InfoPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/MigrationStepsPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/api/errors.ts","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/TokenErrorAlert.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/CreateTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/DeleteTokenConfirmationModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/TokenStatus.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/shared/AlertWithTraceID.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/DisconnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/ConnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/CallToAction.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneLeft.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneRight.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/EmptyState.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationSummary.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/NameCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/TypeCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourceDetailsModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/StatusCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourcesTable.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/CTAInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/SnapshotCTAs.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/SupportedTypesDisclosure.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/useNotifyOnSuccess.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/MigrateToCloud.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\n\ninterface Props {\n  children: NonNullable<ReactNode>;\n  title: string;\n  linkTitle?: string;\n  linkHref?: string;\n}\n\nexport const InfoItem = ({ children, title, linkHref, linkTitle }: Props) => {\n  return (\n    <Stack gap={2} direction=\"column\">\n      <Text element=\"h4\">{title}</Text>\n      <Text color=\"secondary\">{children}</Text>\n      {linkHref && (\n        <TextLink href={linkHref} external>\n          {linkTitle ?? linkHref}\n        </TextLink>\n      )}\n    </Stack>\n  );\n};\n","import { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPane = () => {\n  return (\n    <InfoItem title={t('migrate-to-cloud.migrate-to-this-stack.title', 'Let us help you migrate to this stack')}>\n      <Trans i18nKey=\"migrate-to-cloud.migrate-to-this-stack.body\">\n        You can migrate some resources from your self-managed Grafana installation to this cloud stack. To do this\n        securely, you&apos;ll need to generate a migration token. Your self-managed instance will use the token to\n        authenticate with this cloud stack.\n      </Trans>\n    </InfoItem>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const MigrationStepsPane = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" direction=\"column\" gap={2}>\n      <InfoItem\n        title={t('migrate-to-cloud.get-started.title', 'Performing a migration')}\n        linkTitle={t('migrate-to-cloud.get-started.link-title', 'Learn more about Private Data Source Connect')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"migrate-to-cloud.get-started.body\">\n            The migration process must be started from your self-managed Grafana instance.\n          </Trans>\n          <ol className={styles.list}>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-1\">\n                Log in to your self-managed instance and navigate to Administration, General, Migrate to Grafana Cloud.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-2\">\n                Select &quot;Migrate this instance to Cloud&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-3\">\n                You&apos;ll be prompted for a migration token. Generate one from this screen.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-4\">\n                In your self-managed instance, select &quot;Upload everything&quot; to upload data sources and\n                dashboards to this cloud stack.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-5\">\n                If some of your data sources will not work over the public internet, you’ll need to install Private Data\n                Source Connect in your self-managed environment.\n              </Trans>\n            </li>\n          </ol>\n        </Stack>\n      </InfoItem>\n      <TextLink href=\"/connections/private-data-source-connections\">\n        {t('migrate-to-cloud.get-started.configure-pdc-link', 'Configure PDC for this stack')}\n      </TextLink>\n      <TextLink href=\"/a/grafana-selfservetutorials-app/migrate-oss\">\n        {t('migrate-to-cloud.migrate-to-this-stack.link-title', 'View the full migration guide')}\n      </TextLink>\n    </Box>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css({\n    padding: 'revert',\n  }),\n});\n","import { isFetchError } from '@grafana/runtime';\n\n// TODO: candidate to hoist and share\nexport function maybeAPIError(err: unknown) {\n  if (!isFetchError<unknown>(err) || typeof err.data !== 'object' || !err.data) {\n    return null;\n  }\n\n  const data = err?.data;\n  const message = 'message' in data && typeof data.message === 'string' ? data.message : null;\n  const messageId = 'messageId' in data && typeof data.messageId === 'string' ? data.messageId : null;\n  const statusCode = 'statusCode' in data && typeof data.statusCode === 'number' ? data.statusCode : null;\n\n  if (!message || !messageId || !statusCode) {\n    return null;\n  }\n\n  return { message, messageId, statusCode };\n}\n","import { Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport function TokenErrorAlert() {\n  return (\n    <Alert severity=\"error\" title={t('migrate-to-cloud.migration-token.error-title', 'Something went wrong')}>\n      <Trans i18nKey=\"migrate-to-cloud.migration-token.error-body\">\n        Unable to generate a migration token. Please try again later.\n      </Trans>\n    </Alert>\n  );\n}\n","import { useId } from 'react';\n\nimport { Modal, Button, Input, Stack, ClipboardButton, Field } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\ninterface Props {\n  isOpen: boolean;\n  hideModal: () => void;\n  migrationToken?: string;\n}\n\nexport const CreateTokenModal = ({ isOpen, hideModal, migrationToken }: Props) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.migration-token.modal-title', 'Migration token created')}\n      onDismiss={hideModal}\n    >\n      {migrationToken ? <TokenSuccessContent migrationToken={migrationToken} /> : <TokenErrorAlert />}\n\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-close\">Close</Trans>\n        </Button>\n\n        {migrationToken && (\n          <ClipboardButton variant=\"primary\" getText={() => migrationToken} onClipboardCopy={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-and-close\">Copy to clipboard and close</Trans>\n          </ClipboardButton>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nfunction TokenSuccessContent({ migrationToken }: { migrationToken: string }) {\n  const inputId = useId();\n  return (\n    <Field\n      description={t(\n        'migrate-to-cloud.migration-token.modal-field-description',\n        'Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.'\n      )}\n      htmlFor={inputId}\n      label={t('migrate-to-cloud.migration-token.modal-field-label', 'Token')}\n    >\n      <Stack>\n        <Input id={inputId} value={migrationToken} readOnly />\n        <ClipboardButton icon=\"clipboard-alt\" getText={() => migrationToken}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-button\">Copy to clipboard</Trans>\n        </ClipboardButton>\n      </Stack>\n    </Field>\n  );\n}\n","import { Alert, ConfirmModal } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface DeleteTokenConfirmationModalProps {\n  isOpen: boolean;\n  hasError: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport function DeleteTokenConfirmationModal(props: DeleteTokenConfirmationModalProps) {\n  const { isOpen, hasError, onConfirm, onDismiss } = props;\n\n  const body = (\n    <>\n      <p>\n        <Trans i18nKey=\"migrate-to-cloud.delete-migration-token-confirm.body\">\n          If you&apos;ve already used this token with a self-managed installation, that installation will no longer be\n          able to upload content.\n        </Trans>\n      </p>\n\n      {hasError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.delete-migration-token-confirm.error-title', 'Error deleting token')}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.delete-migration-token-confirm.title', 'Delete migration token')}\n      body={body}\n      confirmText={t('migrate-to-cloud.delete-migration-token-confirm.confirm-button', 'Delete token')}\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n}\n","import Skeleton from 'react-loading-skeleton';\n\nimport { Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface Props {\n  hasToken: boolean;\n  isFetching: boolean;\n  errorMessageId: string | undefined;\n}\n\nexport const TokenStatus = ({ hasToken, errorMessageId, isFetching }: Props) => {\n  if (isFetching) {\n    return <Skeleton width={100} />;\n  } else if (hasToken) {\n    return (\n      <Text color=\"success\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.active\">Token created and active</Trans>\n      </Text>\n    );\n  } else if (errorMessageId === 'cloudmigrations.tokenNotFound') {\n    return <Trans i18nKey=\"migrate-to-cloud.token-status.no-active\">No active token</Trans>;\n  } else if (errorMessageId) {\n    return (\n      <Text color=\"error\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.unknown-error\">Error retrieving token</Trans>\n      </Text>\n    );\n  }\n\n  return (\n    <Text color=\"warning\">\n      <Trans i18nKey=\"migrate-to-cloud.token-status.unknown\">Unknown</Trans>\n    </Text>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Box, Button, Text } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport {\n  useCreateCloudMigrationTokenMutation,\n  useDeleteCloudMigrationTokenMutation,\n  useGetCloudMigrationTokenQuery,\n} from '../../api';\nimport { maybeAPIError } from '../../api/errors';\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\nimport { CreateTokenModal } from './CreateTokenModal';\nimport { DeleteTokenConfirmationModal } from './DeleteTokenConfirmationModal';\nimport { TokenStatus } from './TokenStatus';\n\nexport const MigrationTokenPane = () => {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const getTokenQuery = useGetCloudMigrationTokenQuery();\n  const [createTokenMutation, createTokenResponse] = useCreateCloudMigrationTokenMutation();\n  const [deleteTokenMutation, deleteTokenResponse] = useDeleteCloudMigrationTokenMutation();\n\n  const getTokenQueryError = maybeAPIError(getTokenQuery.error);\n\n  // GetCloudMigrationToken returns a 404 error if no token exists.\n  // When a token is deleted and the GetCloudMigrationToken query is refreshed, RTKQ will retain\n  // both the last successful data (\"we have a token!\") AND the new error. So we need to explicitly\n  // check that we don't have an error AND that we have a token.\n  const hasToken = Boolean(getTokenQuery.data?.id) && getTokenQueryError?.statusCode !== 404;\n  const isLoading = getTokenQuery.isFetching || createTokenResponse.isLoading;\n\n  const handleGenerateToken = useCallback(async () => {\n    reportInteraction('grafana_e2c_generate_token_clicked');\n\n    const resp = await createTokenMutation();\n\n    if (!('error' in resp)) {\n      setShowCreateModal(true);\n    }\n  }, [createTokenMutation]);\n\n  const handleDeleteToken = useCallback(async () => {\n    if (!getTokenQuery.data?.id) {\n      return;\n    }\n\n    reportInteraction('grafana_e2c_delete_token_clicked');\n    const resp = await deleteTokenMutation({ uid: getTokenQuery.data.id });\n    if (!('error' in resp)) {\n      setShowDeleteModal(false);\n    }\n  }, [deleteTokenMutation, getTokenQuery.data]);\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"flex-start\" direction=\"column\" gap={2}>\n        {createTokenResponse?.isError ? (\n          <TokenErrorAlert />\n        ) : (\n          <Text color=\"secondary\">\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.status\">\n              Current status:{' '}\n              <TokenStatus hasToken={hasToken} isFetching={isLoading} errorMessageId={getTokenQueryError?.messageId} />\n            </Trans>\n          </Text>\n        )}\n\n        {hasToken ? (\n          <Button onClick={() => setShowDeleteModal(true)} variant=\"destructive\">\n            {t('migrate-to-cloud.migration-token.delete-button', 'Delete token')}\n          </Button>\n        ) : (\n          <Button disabled={isLoading} onClick={handleGenerateToken}>\n            {createTokenResponse.isLoading\n              ? t('migrate-to-cloud.migration-token.generate-button-loading', 'Generating a migration token...')\n              : t('migrate-to-cloud.migration-token.generate-button', 'Generate a migration token')}\n          </Button>\n        )}\n      </Box>\n\n      <CreateTokenModal\n        isOpen={showCreateModal}\n        hideModal={() => {\n          reportInteraction('grafana_e2c_generated_token_modal_dismissed');\n          setShowCreateModal(false);\n        }}\n        migrationToken={createTokenResponse.data?.token}\n      />\n\n      <DeleteTokenConfirmationModal\n        isOpen={showDeleteModal}\n        onConfirm={handleDeleteToken}\n        onDismiss={() => setShowDeleteModal(false)}\n        hasError={Boolean(deleteTokenResponse.error)}\n      />\n    </>\n  );\n};\n","import { Box, Stack } from '@grafana/ui';\n\nimport { InfoPane } from './EmptyState/InfoPane';\nimport { MigrationStepsPane } from './EmptyState/MigrationStepsPane';\nimport { MigrationTokenPane } from './MigrationTokenPane/MigrationTokenPane';\n\nexport const Page = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={90} paddingY={6} paddingX={2} gap={6} direction=\"column\" display=\"flex\">\n        <Stack gap={2} direction=\"column\">\n          <InfoPane />\n          <MigrationTokenPane />\n        </Stack>\n\n        <MigrationStepsPane />\n      </Box>\n    </Box>\n  );\n};\n","import { isFetchError } from '@grafana/runtime';\nimport { Alert, Stack, Text } from '@grafana/ui';\nimport { Props as AlertProps } from '@grafana/ui/src/components/Alert/Alert';\n\ninterface AlertWithTraceIDProps extends AlertProps {\n  error?: unknown;\n}\n\nexport function AlertWithTraceID(props: AlertWithTraceIDProps) {\n  const { error, children, ...rest } = props;\n  const traceID = maybeGetTraceID(error);\n\n  return (\n    <Alert {...rest}>\n      <Stack direction=\"column\" gap={1}>\n        {children}\n\n        {traceID && (\n          /* Deliberately don't want to translate 'Trace ID' */\n          /* eslint-disable-next-line @grafana/no-untranslated-strings */\n          <Text element=\"p\" color=\"secondary\" variant=\"bodySmall\">\n            Trace ID: {traceID}\n          </Text>\n        )}\n      </Stack>\n    </Alert>\n  );\n}\n\nfunction maybeGetTraceID(err: unknown) {\n  const data = isFetchError<unknown>(err) ? err.data : err;\n\n  if (typeof data === 'object' && data && 'traceID' in data && typeof data.traceID === 'string') {\n    return data.traceID;\n  }\n\n  return undefined;\n}\n","import { Alert, ConfirmModal, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  isOpen: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  onDisconnectConfirm: () => Promise<void>;\n  onDismiss: () => void;\n}\n\nexport const DisconnectModal = ({ isOpen, isError, isLoading, onDisconnectConfirm, onDismiss }: Props) => {\n  const confirmBody = (\n    <Stack direction=\"column\">\n      {isError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.disconnect-modal.error', 'There was an error disconnecting')}\n        />\n      )}\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.disconnect-modal.body\">\n          This will remove the migration token from this installation. If you wish to upload more resources in the\n          future, you will need to enter a new migration token.\n        </Trans>\n      </div>\n    </Stack>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.disconnect-modal.title', 'Disconnect from cloud stack')}\n      body={<></>} // body is mandatory prop, but i don't wanna\n      description={confirmBody}\n      confirmText={\n        isLoading\n          ? t('migrate-to-cloud.disconnect-modal.disconnecting', 'Disconnecting...')\n          : t('migrate-to-cloud.disconnect-modal.disconnect', 'Disconnect')\n      }\n      dismissText={t('migrate-to-cloud.disconnect-modal.cancel', 'Cancel')}\n      onConfirm={onDisconnectConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { useId } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Stack, TextLink, Field, Input, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AlertWithTraceID } from 'app/features/migrate-to-cloud/shared/AlertWithTraceID';\n\nimport { CreateSessionApiArg } from '../../../api';\nimport { maybeAPIError } from '../../../api/errors';\n\ninterface Props {\n  isOpen: boolean;\n  isLoading: boolean;\n  error: unknown;\n  hideModal: () => void;\n  onConfirm: (connectStackData: CreateSessionApiArg) => Promise<unknown>;\n}\n\ninterface FormData {\n  token: string;\n}\n\nfunction getTMessage(messageId: string): string {\n  switch (messageId) {\n    case 'cloudmigrations.createMigration.tokenInvalid':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-invalid',\n        'Token is not valid. Generate a new token on your cloud instance and try again.'\n      );\n    case 'cloudmigrations.createMigration.tokenRequestError':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-request-error',\n        'An error occurred while validating the token. Please check the Grafana instance logs.'\n      );\n    case 'cloudmigrations.createMigration.tokenValidationFailure':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-validation-failure',\n        'Token is not valid. Please ensure the token matches the migration token on your cloud instance.'\n      );\n    case 'cloudmigrations.createMigration.instanceUnreachable':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.instance-unreachable',\n        'The cloud instance cannot be reached. Make sure the instance is running and try again.'\n      );\n    case 'cloudmigrations.createMigration.instanceRequestError':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.instance-request-error',\n        \"An error occurred while attempting to verify the cloud instance's connectivity. Please check the network settings or cloud instance status.\"\n      );\n    case 'cloudmigrations.createMigration.sessionCreationFailure':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.session-creation-failure',\n        'There was an error creating the migration. Please try again.'\n      );\n    case 'cloudmigrations.createMigration.migrationDisabled':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.migration-disabled',\n        'Cloud migrations are disabled on this instance.'\n      );\n    default:\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-not-saved',\n        'There was an error saving the token. See the Grafana server logs for more details.'\n      );\n  }\n}\n\nexport const ConnectModal = ({ isOpen, isLoading, error, hideModal, onConfirm }: Props) => {\n  const tokenId = useId();\n  const styles = useStyles2(getStyles);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    watch,\n  } = useForm<FormData>({\n    defaultValues: {\n      token: '',\n    },\n  });\n\n  const token = watch('token');\n\n  const onConfirmConnect: SubmitHandler<FormData> = (formData) => {\n    onConfirm({\n      cloudMigrationSessionRequestDto: {\n        authToken: formData.token,\n      },\n    }).then((resp) => {\n      const didError = typeof resp === 'object' && resp && 'error' in resp;\n      if (!didError) {\n        hideModal();\n      }\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.connect-modal.title', 'Connect to a cloud stack')}\n      onDismiss={hideModal}\n    >\n      <form onSubmit={handleSubmit(onConfirmConnect)}>\n        <Text color=\"secondary\">\n          <Stack direction=\"column\" gap={2}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-get-started\">\n              To get started, you&apos;ll need a Grafana.com account.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-up/create-user?pg=prod-cloud\" external>\n                {t('migrate-to-cloud.connect-modal.body-sign-up', 'Sign up for a Grafana.com account')}\n              </TextLink>\n            </div>\n\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-cloud-stack\">\n              You&apos;ll also need a cloud stack. If you just signed up, we&apos;ll automatically create your first\n              stack. If you have an account, you&apos;ll need to select or create a stack.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-in/\" external>\n                {t('migrate-to-cloud.connect-modal.body-view-stacks', 'View my cloud stacks')}\n              </TextLink>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token\">\n                Your self-managed Grafana installation needs special access to securely migrate content. You&apos;ll\n                need to create a migration token on your chosen cloud stack.\n              </Trans>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token-instructions\">\n                Log into your cloud stack and navigate to Administration, General, Migrate to Grafana Cloud. Create a\n                migration token on that screen and paste the token here.\n              </Trans>\n            </div>\n\n            {error ? (\n              <AlertWithTraceID\n                error={error}\n                severity=\"error\"\n                title={t('migrate-to-cloud.connect-modal.token-error-title', 'Error saving token')}\n              >\n                <Text element=\"p\">\n                  {getTMessage(maybeAPIError(error)?.messageId || '') ||\n                    'There was an error saving the token. See the Grafana server logs for more details.'}\n                </Text>\n              </AlertWithTraceID>\n            ) : undefined}\n\n            <Field\n              className={styles.field}\n              invalid={!!errors.token}\n              error={errors.token?.message}\n              label={t('migrate-to-cloud.connect-modal.body-token-field', 'Migration token')}\n              required\n            >\n              <Input\n                {...register('token', {\n                  required: t('migrate-to-cloud.connect-modal.token-required-error', 'Migration token is required'),\n                })}\n                id={tokenId}\n                placeholder={t('migrate-to-cloud.connect-modal.body-token-field-placeholder', 'Paste token here')}\n              />\n            </Field>\n          </Stack>\n        </Text>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.cancel\">Cancel</Trans>\n          </Button>\n          <Button type=\"submit\" disabled={isLoading || !token}>\n            {isLoading\n              ? t('migrate-to-cloud.connect-modal.connecting', 'Connecting to this stack...')\n              : t('migrate-to-cloud.connect-modal.connect', 'Connect to this stack')}\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    alignSelf: 'stretch',\n  }),\n});\n","import { useState } from 'react';\n\nimport { Box, Button, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useCreateSessionMutation } from '../../../api';\n\nimport { ConnectModal } from './ConnectModal';\n\nexport const CallToAction = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [createMigration, createMigrationResponse] = useCreateSessionMutation();\n\n  return (\n    <>\n      <Box display=\"flex\" gap={2} direction=\"column\" alignItems=\"center\" backgroundColor=\"secondary\">\n        <Text variant=\"h3\" textAlignment=\"center\">\n          <Trans i18nKey=\"migrate-to-cloud.cta.header\">Let us manage your Grafana stack</Trans>\n        </Text>\n\n        <Button disabled={createMigrationResponse.isLoading} onClick={() => setModalOpen(true)}>\n          <Trans i18nKey=\"migrate-to-cloud.cta.button\">Migrate this instance to Cloud</Trans>\n        </Button>\n      </Box>\n\n      <ConnectModal\n        isOpen={modalOpen}\n        isLoading={createMigrationResponse.isLoading}\n        error={createMigrationResponse.error}\n        onConfirm={createMigration}\n        hideModal={() => setModalOpen(false)}\n      />\n    </>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneLeft = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.what-is-cloud.title', 'What is Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.what-is-cloud.link-title', 'Learn about cloud features')}\n        linkHref=\"https://grafana.com/products/cloud\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.what-is-cloud.body\">\n          Grafana cloud is a fully managed cloud-hosted observability platform ideal for cloud native environments.\n          It&apos;s everything you love about Grafana without the overhead of maintaining, upgrading, and supporting an\n          installation.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.why-host.title', 'Why host with Grafana?')}\n        linkTitle={t('migrate-to-cloud.why-host.link-title', 'More questions? Talk to an expert')}\n        linkHref=\"https://grafana.com/contact\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.why-host.body\">\n          In addition to the convenience of managed hosting, Grafana Cloud includes many cloud-exclusive features like\n          SLOs, incident management, machine learning, and powerful observability integrations.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.is-it-secure.title', 'Is it secure?')}\n        linkTitle={t('migrate-to-cloud.is-it-secure.link-title', 'Grafana Labs Trust Center')}\n        linkHref=\"https://trust.grafana.com\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.is-it-secure.body\">\n          Grafana Labs is committed to maintaining the highest standards of data privacy and security. By implementing\n          industry-standard security technologies and procedures, we help protect our customers&apos; data from\n          unauthorized access, use, or disclosure.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneRight = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.pdc.title', 'Not all my data sources are on the public internet')}\n        linkTitle={t('migrate-to-cloud.pdc.link-title', 'Learn about PDC')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pdc.body\">\n          Exposing your data sources to the internet can raise security concerns. Private data source connect (PDC)\n          allows Grafana Cloud to access your existing data sources over a secure network tunnel.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.pricing.title', 'How much does it cost?')}\n        linkTitle={t('migrate-to-cloud.pricing.link-title', 'Grafana Cloud pricing')}\n        linkHref=\"https://grafana.com/pricing\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pricing.body\">\n          Grafana Cloud has a generous free plan and a 14 day unlimited usage trial. After your trial expires,\n          you&apos;ll be billed based on usage over the free plan limits.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.can-i-move.title', 'Can I move this installation to Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.can-i-move.link-title', 'Learn about migrating other settings')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.can-i-move.body\">\n          Once you connect this installation to a cloud stack, you&apos;ll be able to upload data sources and\n          dashboards.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Box, Grid, Stack } from '@grafana/ui';\n\nimport { CallToAction } from './CallToAction/CallToAction';\nimport { InfoPaneLeft } from './InfoPaneLeft';\nimport { InfoPaneRight } from './InfoPaneRight';\n\nexport const EmptyState = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={180} paddingY={6} paddingX={2}>\n        <Stack gap={5} direction=\"column\">\n          <CallToAction />\n\n          <Grid\n            alignItems=\"flex-start\"\n            gap={4}\n            columns={{\n              xs: 1,\n              lg: 2,\n            }}\n          >\n            <InfoPaneLeft />\n            <InfoPaneRight />\n          </Grid>\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { ReactNode } from 'react';\n\nimport { Box, Text } from '@grafana/ui';\n\ninterface MigrationInfoProps {\n  title: NonNullable<ReactNode>;\n  children: NonNullable<ReactNode>;\n}\n\nexport function MigrationInfo({ title, children }: MigrationInfoProps) {\n  return (\n    <Box minWidth={{ xs: 0, xxl: 16 }} display=\"flex\" direction=\"column\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"h4\">{children}</Text>\n    </Box>\n  );\n}\n","import { Box, Button, Space, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { formatDate } from 'app/core/internationalization/dates';\n\nimport { GetSessionApiResponse, GetSnapshotResponseDto } from '../api';\n\nimport { MigrationInfo } from './MigrationInfo';\n\ninterface MigrationSummaryProps {\n  snapshot: GetSnapshotResponseDto | undefined;\n  session: GetSessionApiResponse;\n  isBusy: boolean;\n\n  disconnectIsLoading: boolean;\n  onDisconnect: () => void;\n\n  showBuildSnapshot: boolean;\n  buildSnapshotIsLoading: boolean;\n  onBuildSnapshot: () => void;\n\n  showUploadSnapshot: boolean;\n  uploadSnapshotIsLoading: boolean;\n  onUploadSnapshot: () => void;\n\n  showRebuildSnapshot: boolean;\n}\n\nconst DATE_FORMAT: Intl.DateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n};\n\nexport function MigrationSummary(props: MigrationSummaryProps) {\n  const {\n    session,\n    snapshot,\n    isBusy,\n    disconnectIsLoading,\n    onDisconnect,\n\n    showBuildSnapshot,\n    buildSnapshotIsLoading,\n    onBuildSnapshot,\n\n    showUploadSnapshot,\n    uploadSnapshotIsLoading,\n    onUploadSnapshot,\n\n    showRebuildSnapshot,\n  } = props;\n\n  const totalCount = snapshot?.stats?.total ?? 0;\n  const errorCount = snapshot?.stats?.statuses?.['ERROR'] ?? 0;\n  const successCount = snapshot?.stats?.statuses?.['OK'] ?? 0;\n  const warningCount = snapshot?.stats?.statuses?.['WARNING'] ?? 0;\n\n  return (\n    <Box\n      borderColor=\"weak\"\n      borderStyle=\"solid\"\n      padding={2}\n      display=\"flex\"\n      gap={4}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Stack gap={4} wrap>\n        <MigrationInfo title={t('migrate-to-cloud.summary.snapshot-date', 'Snapshot timestamp')}>\n          {snapshot?.created ? (\n            formatDate(snapshot.created, DATE_FORMAT)\n          ) : (\n            <Text color=\"secondary\">\n              <Trans i18nKey=\"migrate-to-cloud.summary.snapshot-not-created\">Not yet created</Trans>\n            </Text>\n          )}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.total-resource-count', 'Total resources')}>\n          {totalCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.errored-resource-count', 'Errors')}>\n          {errorCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.successful-resource-count', 'Successfully migrated')}>\n          {successCount + warningCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.target-stack-title', 'Uploading to')}>\n          {session.slug}\n          <Space h={1} layout=\"inline\" />\n          <Button\n            disabled={isBusy}\n            onClick={onDisconnect}\n            variant=\"secondary\"\n            size=\"sm\"\n            icon={disconnectIsLoading ? 'spinner' : undefined}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.disconnect\">Disconnect</Trans>\n          </Button>\n        </MigrationInfo>\n      </Stack>\n\n      <Stack gap={2} wrap justifyContent=\"flex-end\">\n        {showBuildSnapshot && (\n          <Button disabled={isBusy} onClick={onBuildSnapshot} icon={buildSnapshotIsLoading ? 'spinner' : undefined}>\n            <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n          </Button>\n        )}\n\n        {showRebuildSnapshot && (\n          <Button\n            disabled={isBusy}\n            onClick={onBuildSnapshot}\n            icon={buildSnapshotIsLoading ? 'spinner' : undefined}\n            variant=\"secondary\"\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.rebuild-snapshot\">Rebuild snapshot</Trans>\n          </Button>\n        )}\n\n        {showUploadSnapshot && (\n          <Button\n            disabled={isBusy || uploadSnapshotIsLoading}\n            onClick={onUploadSnapshot}\n            icon={uploadSnapshotIsLoading ? 'spinner' : undefined}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.upload-migration\">Upload snapshot</Trans>\n          </Button>\n        )}\n      </Stack>\n    </Box>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CellProps, Stack, Text, Icon, useStyles2 } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { Trans } from 'app/core/internationalization';\nimport { useGetFolderQuery } from 'app/features/browse-dashboards/api/browseDashboardsAPI';\n\nimport { LocalPlugin } from '../../plugins/admin/types';\nimport { useGetDashboardByUidQuery, useGetLibraryElementByUidQuery } from '../api';\n\nimport { ResourceTableItem } from './types';\n\nexport function NameCell(props: CellProps<ResourceTableItem>) {\n  const data = props.row.original;\n\n  return (\n    <Stack direction=\"row\" gap={2} alignItems=\"center\">\n      <ResourceIcon resource={data} />\n\n      <Stack direction=\"column\" gap={0}>\n        <ResourceInfo data={data} />\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction ResourceInfo({ data }: { data: ResourceTableItem }) {\n  switch (data.type) {\n    case 'DASHBOARD':\n      return <DashboardInfo data={data} />;\n    case 'DATASOURCE':\n      return <DatasourceInfo data={data} />;\n    case 'FOLDER':\n      return <FolderInfo data={data} />;\n    case 'LIBRARY_ELEMENT':\n      return <LibraryElementInfo data={data} />;\n    // Starting from 11.4.x, new resources have both `name` and optionally a `parentName`, so we can use this catch-all component.\n    default:\n      return <BasicResourceInfo data={data} />;\n  }\n}\n\nfunction DatasourceInfo({ data }: { data: ResourceTableItem }) {\n  const datasourceUID = data.refId;\n  const datasource = useDatasource(datasourceUID);\n\n  if (!datasource) {\n    return (\n      <>\n        <Text>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-title\">\n            Data source {{ datasourceUID }}\n          </Trans>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-type\">Unknown data source</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <span>{datasource.name}</span>\n      <Text color=\"secondary\">{datasource.type}</Text>\n    </>\n  );\n}\n\nfunction getTitleFromDashboardJSON(dashboardData: object | undefined): string | null {\n  if (dashboardData && 'title' in dashboardData && typeof dashboardData.title === 'string') {\n    return dashboardData.title;\n  }\n\n  return null;\n}\n\nfunction DashboardInfo({ data }: { data: ResourceTableItem }) {\n  const dashboardUID = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n  const {\n    data: dashboardData,\n    isLoading,\n    isError,\n  } = useGetDashboardByUidQuery({ uid: dashboardUID }, { skip: skipApiCall });\n\n  const dashboardName = data.name || getTitleFromDashboardJSON(dashboardData?.dashboard) || dashboardUID;\n  const dashboardParentName = data.parentName || dashboardData?.meta?.folderTitle || 'Dashboards';\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.dashboard-load-error\">Unable to load dashboard</Trans>\n        </Text>\n        <Text color=\"secondary\">Dashboard {dashboardUID}</Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{dashboardName}</span>\n      <Text color=\"secondary\">{dashboardParentName}</Text>\n    </>\n  );\n}\n\nfunction FolderInfo({ data }: { data: ResourceTableItem }) {\n  const folderUID = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n\n  const { data: folderData, isLoading, isError } = useGetFolderQuery(folderUID, { skip: skipApiCall });\n\n  const folderName = data.name || folderData?.title;\n  const folderParentName = data.parentName || folderData?.parents?.[folderData.parents.length - 1]?.title;\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>Unable to load folder</Text>\n        <Text color=\"secondary\">Folder {data.refId}</Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{folderName}</span>\n      <Text color=\"secondary\">{folderParentName ?? 'Dashboards'}</Text>\n    </>\n  );\n}\n\nfunction LibraryElementInfo({ data }: { data: ResourceTableItem }) {\n  const uid = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n\n  const {\n    data: libraryElementData,\n    isError,\n    isLoading,\n  } = useGetLibraryElementByUidQuery({ libraryElementUid: uid }, { skip: skipApiCall });\n\n  const name = data.name || libraryElementData?.result?.name || uid;\n  const parentName = data.parentName || libraryElementData?.result?.meta?.folderName || 'General';\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.error-library-element-title\">\n            Unable to load library element\n          </Trans>\n        </Text>\n\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.error-library-element-sub\">Library Element {uid}</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{name}</span>\n      <Text color=\"secondary\">{parentName}</Text>\n    </>\n  );\n}\n\nfunction InfoSkeleton() {\n  return (\n    <>\n      <Skeleton width={250} />\n      <Skeleton width={130} />\n    </>\n  );\n}\n\nfunction BasicResourceInfo({ data }: { data: ResourceTableItem }) {\n  return (\n    <>\n      <span>{data.name}</span>\n      {data.parentName && <Text color=\"secondary\">{data.parentName}</Text>}\n    </>\n  );\n}\n\nfunction ResourceIcon({ resource }: { resource: ResourceTableItem }) {\n  const styles = useStyles2(getIconStyles);\n  const datasource = useDatasource(resource.type === 'DATASOURCE' ? resource.refId : undefined);\n  const pluginLogo = usePluginLogo(resource.type === 'PLUGIN' ? resource.plugin : undefined);\n\n  switch (resource.type) {\n    case 'DASHBOARD':\n      return <Icon size=\"xl\" name=\"dashboard\" />;\n    case 'FOLDER':\n      return <Icon size=\"xl\" name=\"folder\" />;\n    case 'DATASOURCE':\n      if (datasource?.meta?.info?.logos?.small) {\n        return <img className={styles.icon} src={datasource.meta.info.logos.small} alt=\"\" />;\n      }\n\n      return <Icon size=\"xl\" name=\"database\" />;\n    case 'LIBRARY_ELEMENT':\n      return <Icon size=\"xl\" name=\"library-panel\" />;\n    case 'MUTE_TIMING':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'NOTIFICATION_TEMPLATE':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'CONTACT_POINT':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'NOTIFICATION_POLICY':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'ALERT_RULE':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'ALERT_RULE_GROUP':\n      return <Icon size=\"xl\" name=\"bell\" />;\n    case 'PLUGIN':\n      if (pluginLogo) {\n        return <img className={styles.icon} src={pluginLogo} alt=\"\" />;\n      }\n      return <Icon size=\"xl\" name=\"plug\" />;\n    default:\n      return undefined;\n  }\n}\n\nfunction getIconStyles() {\n  return {\n    icon: css({\n      display: 'block',\n      width: getSvgSize('xl'),\n      height: getSvgSize('xl'),\n    }),\n  };\n}\n\nfunction useDatasource(datasourceUID: string | undefined): DataSourceInstanceSettings | undefined {\n  const datasource = useMemo(() => {\n    if (!datasourceUID) {\n      return undefined;\n    }\n\n    return (\n      config.datasources[datasourceUID] || Object.values(config.datasources).find((ds) => ds.uid === datasourceUID)\n    );\n  }, [datasourceUID]);\n\n  return datasource;\n}\n\nfunction usePluginLogo(plugin: LocalPlugin | undefined): string | undefined {\n  const logos = useMemo(() => {\n    if (!plugin) {\n      return undefined;\n    }\n    return plugin?.info?.logos;\n  }, [plugin]);\n\n  return logos?.small;\n}\n","import { CellProps } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { ResourceTableItem } from './types';\n\nexport function prettyTypeName(type: ResourceTableItem['type']) {\n  switch (type) {\n    case 'DATASOURCE':\n      return t('migrate-to-cloud.resource-type.datasource', 'Data source');\n    case 'DASHBOARD':\n      return t('migrate-to-cloud.resource-type.dashboard', 'Dashboard');\n    case 'FOLDER':\n      return t('migrate-to-cloud.resource-type.folder', 'Folder');\n    case 'LIBRARY_ELEMENT':\n      return t('migrate-to-cloud.resource-type.library_element', 'Library Element');\n    case 'MUTE_TIMING':\n      return t('migrate-to-cloud.resource-type.mute_timing', 'Mute Timing');\n    case 'NOTIFICATION_TEMPLATE':\n      return t('migrate-to-cloud.resource-type.notification_template', 'Notification Template');\n    case 'CONTACT_POINT':\n      return t('migrate-to-cloud.resource-type.contact_point', 'Contact Point');\n    case 'NOTIFICATION_POLICY':\n      return t('migrate-to-cloud.resource-type.notification_policy', 'Notification Policy');\n    case 'ALERT_RULE':\n      return t('migrate-to-cloud.resource-type.alert_rule', 'Alert Rule');\n    case 'ALERT_RULE_GROUP':\n      return t('migrate-to-cloud.resource-type.alert_rule_group', 'Alert Rule Group');\n    case 'PLUGIN':\n      return t('migrate-to-cloud.resource-type.plugin', 'Plugin');\n    default:\n      return t('migrate-to-cloud.resource-type.unknown', 'Unknown');\n  }\n}\n\nexport function TypeCell(props: CellProps<ResourceTableItem>) {\n  const { type } = props.row.original;\n  return <>{prettyTypeName(type)}</>;\n}\n","import { Button, Modal, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { prettyTypeName } from './TypeCell';\nimport { ResourceTableItem } from './types';\n\ninterface ResourceDetailsModalProps {\n  resource: ResourceTableItem | undefined;\n  onClose: () => void;\n}\n\nfunction getTMessage(errorCode: MigrateDataResponseItemDto['errorCode']): string {\n  switch (errorCode) {\n    case 'DATASOURCE_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-name-conflict',\n        'There is a data source with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'DATASOURCE_INVALID_URL':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-invalid-url',\n        'There is a data source which has an invalid URL. Provide a valid URL and try again.'\n      );\n    case 'DATASOURCE_ALREADY_MANAGED':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-already-managed',\n        'Data source is already provisioned and managed by Grafana in the cloud instance. If this is a different resource, set another UID and try again.'\n      );\n    case 'FOLDER_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.folder-name-conflict',\n        'There is a folder with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'DASHBOARD_ALREADY_MANAGED':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.dashboard-already-managed',\n        'Dashboard is already provisioned and managed by Grafana in the cloud instance. We recommend using the provisioned dashboard going forward. If you still wish to copy the dashboard to the cloud instance, then change the dashboard ID in the dashboard JSON, save a new snapshot and upload again.'\n      );\n    case 'LIBRARY_ELEMENT_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.library-element-name-conflict',\n        'There is a library element with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'UNSUPPORTED_DATA_TYPE':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.unsupported-data-type',\n        'Migration of this data type is not currently supported.'\n      );\n    case 'RESOURCE_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.resource-conflict',\n        'There is a resource conflict with the target instance. Please check the Grafana server logs for more details.'\n      );\n    case 'UNEXPECTED_STATUS_CODE':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.unexpected-error',\n        'There has been an error while migrating. Please check the Grafana server logs for more details.'\n      );\n    case 'INTERNAL_SERVICE_ERROR':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.internal-service-error',\n        'There has been an error while migrating. Please check the Grafana server logs for more details.'\n      );\n    case 'GENERIC_ERROR':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.generic-error',\n        'There has been an error while migrating. Please check the cloud migration logs for more information.'\n      );\n    // Handle new errors here\n    default:\n      return '';\n  }\n}\n\nexport function ResourceDetailsModal(props: ResourceDetailsModalProps) {\n  const { resource, onClose } = props;\n\n  const refId = resource?.refId;\n  const typeName = resource && prettyTypeName(resource.type);\n  const hasError = resource?.errorCode || resource?.message;\n\n  let msgTitle = t('migrate-to-cloud.resource-details.generic-title', 'Resource migration details:');\n  if (resource?.status === 'ERROR') {\n    msgTitle = t('migrate-to-cloud.resource-details.error-title', 'Unable to migrate this resource:');\n  } else if (resource?.status === 'WARNING') {\n    msgTitle = t('migrate-to-cloud.resource-details.warning-title', 'Resource migrated with a warning:');\n  }\n\n  return (\n    <Modal\n      title={t('migrate-to-cloud.resource-details.title', 'Migration resource details')}\n      isOpen={Boolean(resource)}\n      onDismiss={onClose}\n    >\n      {resource && (\n        <Stack direction=\"column\" gap={2} alignItems=\"flex-start\">\n          <Text element=\"p\" weight=\"bold\">\n            <Trans i18nKey=\"migrate-to-cloud.resource-details.resource-summary\">\n              {{ refId }} ({{ typeName }})\n            </Trans>\n          </Text>\n\n          {hasError ? (\n            <>\n              <Text element=\"p\">{msgTitle}</Text>\n              <Text element=\"p\">\n                {getTMessage(resource?.errorCode) ||\n                  resource?.message ||\n                  'There has been an error while migrating. Please check the cloud migration logs for more information.'}\n              </Text>\n            </>\n          ) : (\n            <Text element=\"p\">\n              <Trans i18nKey=\"migrate-to-cloud.resource-details.missing-message\">No message provided.</Trans>\n            </Text>\n          )}\n\n          <Button onClick={onClose}>\n            <Trans i18nKey=\"migrate-to-cloud.resource-details.dismiss-button\">OK</Trans>\n          </Button>\n        </Stack>\n      )}\n    </Modal>\n  );\n}\n","import { CellProps, Text, Stack, Button } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { ResourceTableItem } from './types';\n\nexport function StatusCell(props: CellProps<ResourceTableItem>) {\n  const item = props.row.original;\n\n  // Keep these here to preserve the translations\n  // t('migrate-to-cloud.resource-status.migrating', 'Uploading...')\n\n  if (item.status === 'PENDING') {\n    return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.not-migrated', 'Not yet uploaded')}</Text>;\n  } else if (item.status === 'OK') {\n    return <Text color=\"success\">{t('migrate-to-cloud.resource-status.migrated', 'Uploaded to cloud')}</Text>;\n  } else if (item.status === 'WARNING') {\n    return <WarningCell item={item} />;\n  } else if (item.status === 'ERROR') {\n    return <ErrorCell item={item} />;\n  }\n\n  return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.unknown', 'Unknown')}</Text>;\n}\n\nfunction ErrorCell({ item }: { item: ResourceTableItem }) {\n  return (\n    <Stack alignItems=\"center\">\n      <Text color=\"error\">{t('migrate-to-cloud.resource-status.failed', 'Error')}</Text>\n\n      {item.message && (\n        <Button size=\"sm\" variant=\"secondary\" onClick={() => item.showDetails(item)}>\n          {t('migrate-to-cloud.resource-status.error-details-button', 'Details')}\n        </Button>\n      )}\n    </Stack>\n  );\n}\n\nfunction WarningCell({ item }: { item: ResourceTableItem }) {\n  return (\n    <Stack alignItems=\"center\">\n      <Text color=\"warning\">{t('migrate-to-cloud.resource-status.warning', 'Uploaded with warning')}</Text>\n\n      {item.message && (\n        <Button size=\"sm\" variant=\"secondary\" onClick={() => item.showDetails(item)}>\n          {t('migrate-to-cloud.resource-status.warning-details-button', 'Details')}\n        </Button>\n      )}\n    </Stack>\n  );\n}\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { InteractiveTable, Pagination, Stack } from '@grafana/ui';\n\nimport { LocalPlugin } from '../../plugins/admin/types';\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { NameCell } from './NameCell';\nimport { ResourceDetailsModal } from './ResourceDetailsModal';\nimport { StatusCell } from './StatusCell';\nimport { TypeCell } from './TypeCell';\nimport { ResourceTableItem } from './types';\n\nexport interface ResourcesTableProps {\n  resources: MigrateDataResponseItemDto[];\n  localPlugins: LocalPlugin[];\n  page: number;\n  numberOfPages: number;\n  onChangePage: (page: number) => void;\n}\n\nconst columns = [\n  { id: 'name', header: 'Name', cell: NameCell },\n  { id: 'type', header: 'Type', cell: TypeCell },\n  { id: 'status', header: 'Status', cell: StatusCell },\n];\n\nexport function ResourcesTable({\n  resources,\n  localPlugins,\n  numberOfPages = 0,\n  onChangePage,\n  page = 1,\n}: ResourcesTableProps) {\n  const [focusedResource, setfocusedResource] = useState<ResourceTableItem | undefined>();\n\n  const handleShowDetailsModal = useCallback((resource: ResourceTableItem) => {\n    setfocusedResource(resource);\n  }, []);\n\n  const data = useMemo(() => {\n    return resources.map((r) => {\n      const plugin = getPlugin(r, localPlugins);\n\n      return {\n        ...r,\n        showDetails: handleShowDetailsModal,\n        plugin: plugin,\n      };\n    });\n  }, [resources, handleShowDetailsModal, localPlugins]);\n\n  return (\n    <>\n      <Stack alignItems=\"flex-end\" direction=\"column\">\n        <InteractiveTable columns={columns} data={data} getRowId={(r) => r.refId} />\n\n        <Pagination numberOfPages={numberOfPages} currentPage={page} onNavigate={onChangePage} />\n      </Stack>\n\n      <ResourceDetailsModal resource={focusedResource} onClose={() => setfocusedResource(undefined)} />\n    </>\n  );\n}\n\nfunction getPlugin(\n  r: MigrateDataResponseItemDto | undefined,\n  plugins: LocalPlugin[] | undefined\n): LocalPlugin | undefined {\n  if (!r || !plugins || r.type !== 'PLUGIN') {\n    return undefined;\n  }\n\n  return plugins.find((plugin) => plugin.id === r.refId);\n}\n","import { ReactNode } from 'react';\n\nimport { Stack, Box, Text } from '@grafana/ui';\n\ninterface CTAInfoProps {\n  title: NonNullable<ReactNode>;\n  accessory?: ReactNode;\n  children: ReactNode;\n}\n\nexport function CTAInfo(props: CTAInfoProps) {\n  const { title, accessory, children } = props;\n\n  return (\n    <Box maxWidth={44} display=\"flex\" direction=\"row\" gap={1} alignItems=\"flex-start\">\n      {accessory && <Box>{accessory}</Box>}\n\n      <Stack gap={2} direction=\"column\" alignItems=\"flex-start\">\n        <Text element=\"h3\" variant=\"h5\">\n          {title}\n        </Text>\n\n        {children}\n      </Stack>\n    </Box>\n  );\n}\n","import { Button, Icon, Spinner, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CTAInfo } from './CTAInfo';\n\ninterface SnapshotCTAProps {\n  disabled: boolean;\n  isLoading: boolean;\n  onClick: () => void;\n}\n\nexport function BuildSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo\n      title={t('migrate-to-cloud.build-snapshot.title', 'No snapshot exists')}\n      accessory={<Icon name=\"cog\" size=\"lg\" />}\n    >\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.description\">\n          This tool can migrate some resources from this installation to your cloud stack. To get started, you&apos;ll\n          need to create a snapshot of this installation. Creating a snapshot typically takes less than two minutes. The\n          snapshot is stored alongside this Grafana installation.\n        </Trans>\n      </Text>\n\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.when-complete\">\n          Once the snapshot is complete, you will be able to upload it to your cloud stack.\n        </Trans>\n      </Text>\n\n      <Button disabled={disabled} onClick={onClick} icon={isLoading ? 'spinner' : undefined}>\n        <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n\nexport function CreatingSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo\n      title={t('migrate-to-cloud.building-snapshot.title', 'Building installation snapshot')}\n      accessory={<Spinner inline />}\n    >\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description\">\n          We&apos;re creating a point-in-time snapshot of the current state of this installation. Once the snapshot is\n          complete. you&apos;ll be able to upload it to Grafana Cloud.\n        </Trans>\n      </Text>\n\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description-eta\">\n          Creating a snapshot typically takes less than two minutes.\n        </Trans>\n      </Text>\n\n      <Button disabled={disabled} onClick={onClick} icon={isLoading ? 'spinner' : undefined} variant=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.summary.cancel-snapshot\">Cancel snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n","import { Text, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport function SupportedTypesDisclosure() {\n  return (\n    <Text color=\"secondary\" textAlignment=\"center\">\n      <Trans i18nKey=\"migrate-to-cloud.support-types-disclosure.text\">\n        Dashboards, Folders, and built-in core data sources are migrated to your Grafana Cloud stack.{' '}\n        <TextLink external href=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\">\n          Learn about migrating other settings.\n        </TextLink>\n      </Trans>\n    </Text>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { t } from 'app/core/internationalization';\n\nimport { GetSnapshotResponseDto, SnapshotDto } from '../api';\n\n// After the number of distinct resource types migrated exceeeds this value, we display a generic success message.\nconst SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD = 4;\n\nexport function useNotifySuccessful(snapshot: GetSnapshotResponseDto | undefined) {\n  const previousStatusRef = useRef<SnapshotDto['status']>(undefined);\n  const notifyApp = useAppNotification();\n\n  useEffect(() => {\n    const status = snapshot?.status;\n    const didJustFinish =\n      previousStatusRef.current !== 'FINISHED' && previousStatusRef.current !== undefined && status === 'FINISHED';\n\n    previousStatusRef.current = status; // must be AFTER the check above\n\n    if (!didJustFinish) {\n      return;\n    }\n\n    if (snapshot) {\n      const title = t('migrate-to-cloud.onprem.success-title', 'Migration completed!');\n      const message = getTranslatedMessage(snapshot);\n\n      notifyApp.success(title, message);\n    }\n  }, [notifyApp, snapshot]);\n}\n\nfunction getTranslatedMessage(snapshot: GetSnapshotResponseDto) {\n  const types: string[] = [];\n\n  let distinctItems = 0;\n\n  for (const [type, count] of Object.entries(snapshot.stats?.types ?? {})) {\n    if (count <= 0) {\n      continue;\n    }\n\n    // We don't have per-resource status counts, so there's no way to accurately pluralize these\n    // so we just don't :)\n    if (type === 'DASHBOARD') {\n      types.push(t('migrate-to-cloud.migrated-counts.dashboards', 'dashboards'));\n    } else if (type === 'DATASOURCE') {\n      types.push(t('migrate-to-cloud.migrated-counts.datasources', 'data sources'));\n    } else if (type === 'FOLDER') {\n      types.push(t('migrate-to-cloud.migrated-counts.folders', 'folders'));\n    } else if (type === 'LIBRARY_ELEMENT') {\n      types.push(t('migrate-to-cloud.migrated-counts.library_elements', 'library elements'));\n    } else if (type === 'MUTE_TIMING') {\n      types.push(t('migrate-to-cloud.migrated-counts.mute_timings', 'mute timings'));\n    } else if (type === 'NOTIFICATION_TEMPLATE') {\n      types.push(t('migrate-to-cloud.migrated-counts.notification_templates', 'notification templates'));\n    } else if (type === 'CONTACT_POINT') {\n      types.push(t('migrate-to-cloud.migrated-counts.contact_points', 'contact points'));\n    } else if (type === 'NOTIFICATION_POLICY') {\n      types.push(t('migrate-to-cloud.migrated-counts.notification_policies', 'notification policies'));\n    } else if (type === 'ALERT_RULE') {\n      types.push(t('migrate-to-cloud.migrated-counts.alert_rules', 'alert rules'));\n    } else if (type === 'ALERT_RULE_GROUP') {\n      types.push(t('migrate-to-cloud.migrated-counts.alert_rule_groups', 'alert rule groups'));\n    } else if (type === 'PLUGIN') {\n      types.push(t('migrate-to-cloud.migrated-counts.plugins', 'plugins'));\n    }\n\n    distinctItems += 1;\n  }\n\n  const successCount = snapshot?.stats?.statuses?.['OK'] ?? 0;\n\n  if (distinctItems > SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD) {\n    return t(\n      'migrate-to-cloud.onprem.success-message-generic',\n      'Successfully migrated {{successCount}} resources to your Grafana Cloud instance.',\n      { successCount }\n    );\n  }\n\n  return t(\n    'migrate-to-cloud.onprem.success-message',\n    'Successfully migrated {{successCount}} {{types, list}} to your Grafana Cloud instance.',\n    { successCount, types }\n  );\n}\n","import { skipToken } from '@reduxjs/toolkit/query/react';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { AlertVariant, Box, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport {\n  GetSnapshotResponseDto,\n  SnapshotDto,\n  useCancelSnapshotMutation,\n  useCreateSnapshotMutation,\n  useDeleteSessionMutation,\n  useGetSessionListQuery,\n  useGetShapshotListQuery,\n  useGetSnapshotQuery,\n  useUploadSnapshotMutation,\n  useGetLocalPluginListQuery,\n} from '../api';\nimport { AlertWithTraceID } from '../shared/AlertWithTraceID';\n\nimport { DisconnectModal } from './DisconnectModal';\nimport { EmptyState } from './EmptyState/EmptyState';\nimport { MigrationSummary } from './MigrationSummary';\nimport { ResourcesTable } from './ResourcesTable';\nimport { BuildSnapshotCTA, CreatingSnapshotCTA } from './SnapshotCTAs';\nimport { SupportedTypesDisclosure } from './SupportedTypesDisclosure';\nimport { useNotifySuccessful } from './useNotifyOnSuccess';\n\n/**\n * Here's how migrations work:\n *\n * A single on-prem instance can be configured to be migrated to multiple cloud instances. We call these 'sessions'.\n *  - GetSessionList returns this the list of migration targets for the on prem instance\n *  - If GetMigrationList returns an empty list, then an empty state to prompt for token should be shown\n *  - The UI (at the moment) only shows the most recently created migration target (the last one returned from the API)\n *    and doesn't allow for others to be created\n *\n * A single on-prem migration 'target' (CloudMigrationSession) can have multiple snapshots.\n * A snapshot represents a copy of all migratable resources at a fixed point in time.\n * A snapshots are created asynchronously in the background, so GetSnapshot must be polled to get the current status.\n *\n * After a snapshot has been created, it will be PENDING_UPLOAD. UploadSnapshot is then called which asynchronously\n * uploads and migrates the snapshot to the cloud instance.\n */\n\nfunction useGetLatestSession() {\n  const result = useGetSessionListQuery();\n  const latestMigration = result.data?.sessions?.at(-1);\n\n  return {\n    ...result,\n    data: latestMigration,\n  };\n}\n\nconst SHOULD_POLL_STATUSES: Array<SnapshotDto['status']> = [\n  'INITIALIZING',\n  'CREATING',\n  'UPLOADING',\n  'PENDING_PROCESSING',\n  'PROCESSING',\n];\n\nconst SNAPSHOT_REBUILD_STATUSES: Array<SnapshotDto['status']> = ['PENDING_UPLOAD', 'FINISHED', 'ERROR', 'UNKNOWN'];\nconst SNAPSHOT_BUILDING_STATUSES: Array<SnapshotDto['status']> = ['INITIALIZING', 'CREATING'];\nconst SNAPSHOT_UPLOADING_STATUSES: Array<SnapshotDto['status']> = ['UPLOADING', 'PENDING_PROCESSING', 'PROCESSING'];\n\nconst PAGE_SIZE = 50;\n\nfunction useGetLatestSnapshot(sessionUid?: string, page = 1) {\n  const [shouldPoll, setShouldPoll] = useState(false);\n\n  const listResult = useGetShapshotListQuery(\n    sessionUid ? { uid: sessionUid, page: 1, limit: 1, sort: 'latest' } : skipToken\n  );\n  const lastItem = listResult.currentData?.snapshots?.at(0);\n\n  const getSnapshotQueryArgs =\n    sessionUid && lastItem?.uid\n      ? { uid: sessionUid, snapshotUid: lastItem.uid, resultLimit: PAGE_SIZE, resultPage: page }\n      : skipToken;\n\n  const snapshotResult = useGetSnapshotQuery(getSnapshotQueryArgs, {\n    pollingInterval: shouldPoll ? config.cloudMigrationPollIntervalMs : 0,\n    skipPollingIfUnfocused: true,\n  });\n\n  const isError = listResult.isError || snapshotResult.isError;\n\n  useEffect(() => {\n    const shouldPoll = !isError && SHOULD_POLL_STATUSES.includes(snapshotResult.data?.status);\n    setShouldPoll(shouldPoll);\n  }, [snapshotResult?.data?.status, isError]);\n\n  return {\n    ...snapshotResult,\n\n    // RTK Query will retain old data if a new request has been skipped.\n    // This meant that if you loaded a snapshot, disconnected, and then reconnected, we would\n    // show the old snapshot.\n    // This ensures that if the query has been skipped (because GetSessionList returned nothing)\n    // we don't return stale data\n    data: getSnapshotQueryArgs === skipToken ? undefined : snapshotResult.data,\n\n    error: listResult.error || snapshotResult.error,\n\n    // isSuccess and isUninitialised should always be from snapshotResult\n    // as only the 'final' values from those are important\n    isError,\n    isLoading: listResult.isLoading || snapshotResult.isLoading,\n    isFetching: listResult.isFetching || snapshotResult.isFetching,\n  };\n}\n\nexport const Page = () => {\n  const [disconnectModalOpen, setDisconnectModalOpen] = useState(false);\n  const session = useGetLatestSession();\n  const [page, setPage] = useState(1);\n  const snapshot = useGetLatestSnapshot(session.data?.uid, page);\n  const [performCreateSnapshot, createSnapshotResult] = useCreateSnapshotMutation();\n  const [performUploadSnapshot, uploadSnapshotResult] = useUploadSnapshotMutation();\n  const [performCancelSnapshot, cancelSnapshotResult] = useCancelSnapshotMutation();\n  const [performDisconnect, disconnectResult] = useDeleteSessionMutation();\n\n  const { currentData: localPlugins = [] } = useGetLocalPluginListQuery();\n\n  useNotifySuccessful(snapshot.data);\n\n  const sessionUid = session.data?.uid;\n  const snapshotUid = snapshot.data?.uid;\n  const isInitialLoading = session.isLoading;\n  const status = snapshot.data?.status;\n\n  // isBusy is not a loading state, but indicates that the system is doing *something*\n  // and all buttons should be disabled\n  const isBusy =\n    createSnapshotResult.isLoading ||\n    uploadSnapshotResult.isLoading ||\n    cancelSnapshotResult.isLoading ||\n    session.isLoading ||\n    snapshot.isLoading ||\n    disconnectResult.isLoading;\n\n  const showBuildSnapshot = !snapshot.isError && !snapshot.isLoading && !snapshot.data;\n  const showBuildingSnapshot = SNAPSHOT_BUILDING_STATUSES.includes(status);\n  const showUploadSnapshot =\n    !snapshot.isError && (status === 'PENDING_UPLOAD' || SNAPSHOT_UPLOADING_STATUSES.includes(status));\n  const showRebuildSnapshot = SNAPSHOT_REBUILD_STATUSES.includes(status);\n\n  const error = getError({\n    snapshot: snapshot.data,\n    getSnapshotError: snapshot.error,\n    getSessionError: session.error,\n    createSnapshotError: createSnapshotResult.error,\n    uploadSnapshotError: uploadSnapshotResult.error,\n    cancelSnapshotError: cancelSnapshotResult.error,\n    disconnectSnapshotError: disconnectResult.error,\n  });\n\n  const handleDisconnect = useCallback(async () => {\n    if (sessionUid) {\n      performDisconnect({ uid: sessionUid });\n    }\n  }, [performDisconnect, sessionUid]);\n\n  const handleCreateSnapshot = useCallback(() => {\n    if (sessionUid) {\n      performCreateSnapshot({ uid: sessionUid });\n    }\n  }, [performCreateSnapshot, sessionUid]);\n\n  const handleUploadSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      performUploadSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performUploadSnapshot, sessionUid, snapshotUid]);\n\n  const handleCancelSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      performCancelSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performCancelSnapshot, sessionUid, snapshotUid]);\n\n  if (isInitialLoading) {\n    // TODO: better loading state\n    return (\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.summary.page-loading\">Loading...</Trans>\n      </div>\n    );\n  } else if (!session.data) {\n    return <EmptyState />;\n  }\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={2}>\n        {session.data && (\n          <MigrationSummary\n            session={session.data}\n            snapshot={snapshot.data}\n            isBusy={isBusy}\n            disconnectIsLoading={disconnectResult.isLoading}\n            onDisconnect={handleDisconnect}\n            showBuildSnapshot={showBuildSnapshot}\n            buildSnapshotIsLoading={createSnapshotResult.isLoading}\n            onBuildSnapshot={handleCreateSnapshot}\n            showUploadSnapshot={showUploadSnapshot}\n            uploadSnapshotIsLoading={uploadSnapshotResult.isLoading || SNAPSHOT_UPLOADING_STATUSES.includes(status)}\n            onUploadSnapshot={handleUploadSnapshot}\n            showRebuildSnapshot={showRebuildSnapshot}\n          />\n        )}\n\n        {error && (\n          <AlertWithTraceID severity={error.severity} title={error.title} error={error.error}>\n            <Text element=\"p\">{error.body}</Text>\n          </AlertWithTraceID>\n        )}\n\n        {(showBuildSnapshot || showBuildingSnapshot) && (\n          <Box display=\"flex\" justifyContent=\"center\" paddingY={10}>\n            {showBuildSnapshot && (\n              <BuildSnapshotCTA\n                disabled={isBusy}\n                isLoading={createSnapshotResult.isLoading}\n                onClick={handleCreateSnapshot}\n              />\n            )}\n\n            {showBuildingSnapshot && (\n              <CreatingSnapshotCTA\n                disabled={isBusy}\n                isLoading={cancelSnapshotResult.isLoading}\n                onClick={handleCancelSnapshot}\n              />\n            )}\n          </Box>\n        )}\n\n        {snapshot.data?.results && snapshot.data.results.length > 0 && (\n          <Stack gap={4} direction=\"column\">\n            <ResourcesTable\n              resources={snapshot.data.results}\n              localPlugins={localPlugins}\n              onChangePage={setPage}\n              numberOfPages={Math.ceil((snapshot?.data?.stats?.total || 0) / PAGE_SIZE)}\n              page={page}\n            />\n            <SupportedTypesDisclosure />\n          </Stack>\n        )}\n      </Stack>\n\n      <DisconnectModal\n        isOpen={disconnectModalOpen}\n        isLoading={disconnectResult.isLoading}\n        isError={disconnectResult.isError}\n        onDisconnectConfirm={handleDisconnect}\n        onDismiss={() => setDisconnectModalOpen(false)}\n      />\n    </>\n  );\n};\n\ninterface GetErrorProps {\n  snapshot: GetSnapshotResponseDto | undefined;\n  getSessionError: unknown; // From getLatestSessionQuery\n  getSnapshotError: unknown; // From getLatestSnapshotQuery\n  createSnapshotError: unknown; // From createSnapshotMutation\n  uploadSnapshotError: unknown; // From uploadSnapshotMutation\n  cancelSnapshotError: unknown; // From cancelSnapshotMutation\n  disconnectSnapshotError: unknown; // From disconnectMutation\n}\n\ninterface ErrorDescription {\n  title: string;\n  body: string;\n  severity: AlertVariant;\n  error?: unknown;\n}\n\nfunction getError(props: GetErrorProps): ErrorDescription | undefined {\n  const {\n    snapshot,\n    getSnapshotError,\n    getSessionError,\n    createSnapshotError,\n    uploadSnapshotError,\n    cancelSnapshotError,\n    disconnectSnapshotError,\n  } = props;\n\n  const seeLogs = t('migrate-to-cloud.onprem.error-see-server-logs', 'See the Grafana server logs for more details');\n\n  if (getSessionError) {\n    return {\n      severity: 'error',\n      title: t('migrate-to-cloud.onprem.get-session-error-title', 'Error loading migration configuration'),\n      body: seeLogs,\n      error: getSessionError,\n    };\n  }\n\n  if (getSnapshotError) {\n    return {\n      severity: 'error',\n      title: t('migrate-to-cloud.onprem.get-snapshot-error-title', 'Error loading snapshot'),\n      body: seeLogs,\n      error: getSnapshotError,\n    };\n  }\n\n  if (disconnectSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.disconnect-error-title', 'Error disconnecting'),\n      body: seeLogs,\n      error: disconnectSnapshotError,\n    };\n  }\n\n  if (createSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.create-snapshot-error-title', 'Error creating snapshot'),\n      body: seeLogs,\n      error: createSnapshotError,\n    };\n  }\n\n  if (uploadSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.upload-snapshot-error-title', 'Error uploading snapshot'),\n      body: seeLogs,\n      error: uploadSnapshotError,\n    };\n  }\n\n  if (cancelSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.cancel-snapshot-error-title', 'Error cancelling creating snapshot'),\n      body: seeLogs,\n      error: cancelSnapshotError,\n    };\n  }\n\n  if (snapshot?.status === 'ERROR') {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.snapshot-error-status-title', 'Error migrating resources'),\n      body: t(\n        'migrate-to-cloud.onprem.snapshot-error-status-body',\n        'There was an error creating the snapshot or starting the migration process. See the Grafana server logs for more details'\n      ),\n    };\n  }\n\n  const errorCount = snapshot?.stats?.statuses?.['ERROR'] ?? 0;\n  const warningCount = snapshot?.stats?.statuses?.['WARNING'] ?? 0;\n  if (snapshot?.status === 'FINISHED' && errorCount + warningCount > 0) {\n    let msgBody = '';\n\n    // If there are any errors, that's the most pressing info. If there are no errors but warnings, show the warning text instead.\n    if (errorCount > 0) {\n      msgBody = t(\n        'migrate-to-cloud.onprem.migration-finished-with-errors-body',\n        'The migration has completed, but some items could not be migrated to the cloud stack. Check the failed resources for more details'\n      );\n    } else if (warningCount > 0) {\n      msgBody = t(\n        'migrate-to-cloud.onprem.migration-finished-with-warnings-body',\n        'The migration has completed with some warnings. Check individual resources for more details'\n      );\n    }\n\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.migration-finished-with-caveat-title', 'Resource migration complete'),\n      body: msgBody,\n    };\n  }\n\n  return undefined;\n}\n","import { config } from '@grafana/runtime';\nimport { Alert, TextLink } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { Trans, t } from '../../core/internationalization';\n\nimport { Page as CloudPage } from './cloud/Page';\nimport { Page as OnPremPage } from './onprem/Page';\n\nexport default function MigrateToCloud() {\n  const feedbackURL = config.cloudMigrationFeedbackURL;\n  return (\n    <Page navId=\"migrate-to-cloud\">\n      <Alert\n        title={t('migrate-to-cloud.public-preview.title', 'Migrate to Grafana Cloud is in public preview')}\n        buttonContent={t('migrate-to-cloud.public-preview.button-text', 'Give feedback')}\n        severity={'info'}\n        onRemove={\n          feedbackURL\n            ? () => {\n                window.open(feedbackURL, '_blank');\n              }\n            : undefined\n        }\n      >\n        <Trans i18nKey=\"migrate-to-cloud.public-preview.message\">\n          <TextLink\n            href=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide/cloud-migration-assistant/\"\n            external\n          >\n            Visit our docs\n          </TextLink>{' '}\n          to learn more about this feature!\n        </Trans>\n        {config.cloudMigrationIsTarget && (\n          <>\n            &nbsp;\n            <Trans i18nKey=\"migrate-to-cloud.public-preview.message-cloud\">\n              Your self-managed instance of Grafana requires version 11.5+, or 11.2+ with the onPremToCloudMigrations\n              feature flag enabled.\n            </Trans>\n          </>\n        )}\n      </Alert>\n      {config.cloudMigrationIsTarget ? <CloudPage /> : <OnPremPage />}\n    </Page>\n  );\n}\n"],"names":["InfoItem","children","title","linkHref","linkTitle","Stack","Text","TextLink","InfoPane","MigrationStepsPane","styles","getStyles","Box","theme","maybeAPIError","err","data","message","messageId","statusCode","TokenErrorAlert","Alert","CreateTokenModal","isOpen","hideModal","migrationToken","Modal","TokenSuccessContent","Button","ClipboardButton","inputId","Field","Input","DeleteTokenConfirmationModal","props","hasError","onConfirm","onDismiss","body","ConfirmModal","TokenStatus","hasToken","errorMessageId","isFetching","MigrationTokenPane","showCreateModal","setShowCreateModal","showDeleteModal","setShowDeleteModal","getTokenQuery","createTokenMutation","createTokenResponse","deleteTokenMutation","deleteTokenResponse","getTokenQueryError","isLoading","handleGenerateToken","handleDeleteToken","AlertWithTraceID","error","rest","traceID","maybeGetTraceID","DisconnectModal","isError","onDisconnectConfirm","confirmBody","getTMessage","ConnectModal","tokenId","handleSubmit","register","errors","watch","token","onConfirmConnect","formData","resp","CallToAction","modalOpen","setModalOpen","createMigration","createMigrationResponse","InfoPaneLeft","InfoPaneRight","EmptyState","Grid","MigrationInfo","DATE_FORMAT","MigrationSummary","session","snapshot","isBusy","disconnectIsLoading","onDisconnect","showBuildSnapshot","buildSnapshotIsLoading","onBuildSnapshot","showUploadSnapshot","uploadSnapshotIsLoading","onUploadSnapshot","showRebuildSnapshot","totalCount","errorCount","successCount","warningCount","Space","NameCell","ResourceIcon","ResourceInfo","DashboardInfo","DatasourceInfo","FolderInfo","LibraryElementInfo","BasicResourceInfo","datasourceUID","datasource","useDatasource","getTitleFromDashboardJSON","dashboardData","dashboardUID","skipApiCall","dashboardName","dashboardParentName","InfoSkeleton","folderUID","folderData","folderName","folderParentName","uid","libraryElementData","name","parentName","resource","getIconStyles","pluginLogo","usePluginLogo","Icon","config","ds","plugin","prettyTypeName","type","TypeCell","errorCode","ResourceDetailsModal","onClose","refId","typeName","msgTitle","StatusCell","item","WarningCell","ErrorCell","columns","ResourcesTable","resources","localPlugins","numberOfPages","onChangePage","page","focusedResource","setfocusedResource","handleShowDetailsModal","r","getPlugin","InteractiveTable","Pagination","plugins","CTAInfo","accessory","BuildSnapshotCTA","disabled","onClick","CreatingSnapshotCTA","Spinner","SupportedTypesDisclosure","SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD","useNotifySuccessful","previousStatusRef","notifyApp","status","didJustFinish","getTranslatedMessage","types","distinctItems","count","useGetLatestSession","result","latestMigration","SHOULD_POLL_STATUSES","SNAPSHOT_REBUILD_STATUSES","SNAPSHOT_BUILDING_STATUSES","SNAPSHOT_UPLOADING_STATUSES","PAGE_SIZE","useGetLatestSnapshot","sessionUid","shouldPoll","setShouldPoll","listResult","lastItem","getSnapshotQueryArgs","snapshotResult","disconnectModalOpen","setDisconnectModalOpen","setPage","performCreateSnapshot","createSnapshotResult","performUploadSnapshot","uploadSnapshotResult","performCancelSnapshot","cancelSnapshotResult","performDisconnect","disconnectResult","snapshotUid","isInitialLoading","showBuildingSnapshot","getError","handleDisconnect","handleCreateSnapshot","handleUploadSnapshot","handleCancelSnapshot","getSnapshotError","getSessionError","createSnapshotError","uploadSnapshotError","cancelSnapshotError","disconnectSnapshotError","seeLogs","msgBody","MigrateToCloud","feedbackURL","Page"],"sourceRoot":""}