{"version":3,"file":"AlertRuleListIndex.71fa25b09df115e9ff91.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useDeleteRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/RuleList.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesViewModeSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesFilter.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/plugins/useAlertingHomePageExtensions.ts","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/AlertRuleListItem.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/ListItem.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/ListSection.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/Namespace.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/RuleListIcon.tsx","webpack://grafana/./node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { EmptyState, LinkButton, Stack, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const canCreateAnything = canCreateGrafanaRules || canCreateCloudRules;\n\n  return (\n    <div>\n      <EmptyState\n        message=\"You haven't created any rules yet\"\n        variant=\"call-to-action\"\n        button={\n          canCreateAnything ? (\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n              {canCreateAnything && (\n                <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/alerting\">\n                  <Trans i18nKey=\"alerting.list-view.empty.new-alert-rule\">New alert rule</Trans>\n                </LinkButton>\n              )}\n              {canCreateCloudRules && (\n                <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/recording\">\n                  <Trans i18nKey=\"alerting.list-view.empty.new-recording-rule\">New recording rule</Trans>\n                </LinkButton>\n              )}\n            </Stack>\n          ) : null\n        }\n      >\n        <>\n          <Trans i18nKey=\"alerting.list-view.empty.provisioning\">\n            You can also define rules through file provisioning or Terraform.{' '}\n            <TextLink\n              href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/\"\n              external\n            >\n              Learn more\n            </TextLink>\n          </Trans>\n        </>\n      </EmptyState>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport { FC, ReactElement, useMemo, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesDataSources } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [promRequestErrors, rulerRequestErrors] = [promRuleRequests, rulerRuleRequests].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css({\n    padding: 0,\n  }),\n  floatRight: css({\n    display: 'flex',\n    justifyContent: 'flex-end',\n  }),\n  dsLink: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n});\n","import { dispatch } from 'app/store/store';\nimport { RuleGroupIdentifier } from 'app/types/unified-alerting';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../../state/actions';\nimport { useAsync } from '../useAsync';\n\nimport { RulerNotSupportedError } from './useProduceNewRuleGroup';\n\nconst { useDeleteRuleGroupFromNamespaceMutation } = alertRuleApi;\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useDeleteRuleGroup() {\n  const [deleteRuleGroup] = useDeleteRuleGroupFromNamespaceMutation();\n  const [discoverDataSourceFeature] = useLazyDiscoverDsFeaturesQuery();\n\n  return useAsync(async (ruleGroupIdentifier: RuleGroupIdentifier) => {\n    const { dataSourceName, namespaceName, groupName } = ruleGroupIdentifier;\n\n    const { rulerConfig } = await discoverDataSourceFeature({ rulesSourceName: dataSourceName }).unwrap();\n    if (!rulerConfig) {\n      throw RulerNotSupportedError(dataSourceName);\n    }\n\n    const result = await deleteRuleGroup({ rulerConfig, namespace: namespaceName, group: groupName }).unwrap();\n\n    // @TODO remove this once we can use tags to invalidate\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName: dataSourceName }));\n\n    return result;\n  });\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  DropResult,\n  Droppable,\n  DroppableProvided,\n} from '@hello-pangea/dnd';\nimport cx from 'classnames';\nimport { produce } from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { dispatch } from 'app/store/store';\nimport {\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  RuleGroupIdentifier,\n  RulerDataSourceConfig,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { useReorderRuleForRuleGroup } from '../../hooks/ruleGroup/useUpdateRuleGroup';\nimport { isLoading } from '../../hooks/useAsync';\nimport { SwapOperation, swapItems } from '../../reducers/ruler/ruleGroups';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport {\n  isAlertingRulerRule,\n  isGrafanaRulerRule,\n  isRecordingRulerRule,\n  rulesSourceToDataSourceName,\n} from '../../utils/rules';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n  folderUid?: string;\n  rulerConfig: RulerDataSourceConfig;\n}\n\ntype RulerRuleWithUID = { uid: string } & RulerRuleDTO;\n\nexport const ReorderCloudGroupModal = (props: ModalProps) => {\n  const styles = useStyles2(getStyles);\n  const { group, namespace, onClose, folderUid } = props;\n  const [operations, setOperations] = useState<Array<[number, number]>>([]);\n\n  const [reorderRulesInGroup, reorderState] = useReorderRuleForRuleGroup();\n  const isUpdating = isLoading(reorderState);\n\n  // The list of rules might have been filtered before we get to this reordering modal\n  // We need to grab the full (unfiltered) list\n  const { currentData: ruleGroup, isLoading: loadingRules } = alertRuleApi.endpoints.getRuleGroupForNamespace.useQuery(\n    {\n      rulerConfig: props.rulerConfig,\n      namespace: folderUid ?? namespace.name,\n      group: group.name,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  const [rulesList, setRulesList] = useState<RulerRuleDTO[]>([]);\n\n  useEffect(() => {\n    if (ruleGroup) {\n      setRulesList(ruleGroup?.rules);\n    }\n  }, [ruleGroup]);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const swapOperation: SwapOperation = [result.source.index, result.destination.index];\n\n      // add old index and new index to the modifications object\n      setOperations(\n        produce(operations, (draft) => {\n          draft.push(swapOperation);\n        })\n      );\n\n      // re-order the rules list for the UI rendering\n      const newOrderedRules = produce(rulesList, (draft) => {\n        swapItems(draft, swapOperation);\n      });\n      setRulesList(newOrderedRules);\n    },\n    [rulesList, operations]\n  );\n\n  const updateRulesOrder = useCallback(async () => {\n    const dataSourceName = rulesSourceToDataSourceName(namespace.rulesSource);\n\n    const ruleGroupIdentifier: RuleGroupIdentifier = {\n      dataSourceName,\n      groupName: group.name,\n      namespaceName: folderUid ?? namespace.name,\n    };\n\n    await reorderRulesInGroup.execute(ruleGroupIdentifier, operations);\n    // TODO: Remove once RTKQ is more prevalently used\n    await dispatch(fetchRulerRulesAction({ rulesSourceName: dataSourceName }));\n    onClose();\n  }, [namespace.rulesSource, namespace.name, group.name, folderUid, reorderRulesInGroup, operations, onClose]);\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: RulerRuleWithUID[] = rulesList.map((rulerRule) => ({\n    ...rulerRule,\n    uid: hashRulerRule(rulerRule),\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      {loadingRules && 'Loading...'}\n      {rulesWithUID.length > 0 && (\n        <>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable\n              droppableId=\"alert-list\"\n              mode=\"standard\"\n              renderClone={(provided, _snapshot, rubric) => (\n                <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n              )}\n            >\n              {(droppableProvided: DroppableProvided) => (\n                <div\n                  ref={droppableProvided.innerRef}\n                  className={cx(styles.listContainer, isUpdating && styles.disabled)}\n                  {...droppableProvided.droppableProps}\n                >\n                  {rulesWithUID.map((rule, index) => (\n                    <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={isUpdating}>\n                      {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                    </Draggable>\n                  ))}\n                  {droppableProvided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onClose}>\n              <Trans i18nKey={'common.cancel'}>Cancel</Trans>\n            </Button>\n            <Button onClick={() => updateRulesOrder()} disabled={isUpdating}>\n              <Trans i18nKey={'common.save'}>Save</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: RulerRuleDTO;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  // @TODO does this work with Grafana-managed recording rules too? Double check that.\n  return (\n    <div\n      data-testid=\"reorder-alert-rule\"\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isGrafanaRulerRule(rule) && <div className={styles.listItemName}>{rule.grafana_alert.title}</div>}\n      {isRecordingRulerRule(rule) && (\n        <>\n          <div className={styles.listItemName}>{rule.record}</div>\n          <Badge text=\"Recording\" color=\"purple\" />\n        </>\n      )}\n      {isAlertingRulerRule(rule) && <div className={styles.listItemName}>{rule.alert}</div>}\n      <Icon name=\"draggabledots\" />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader = ({ namespace, group }: ModalHeaderProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    maxWidth: '640px',\n    maxHeight: '80%',\n    overflow: 'hidden',\n  }),\n  listItem: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    gap: theme.spacing(),\n\n    background: theme.colors.background.primary,\n    color: theme.colors.text.secondary,\n\n    borderBottom: `solid 1px ${theme.colors.border.medium}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n\n    '&:last-child': {\n      borderBottom: 'none',\n    },\n\n    '&.isClone': {\n      border: `solid 1px ${theme.colors.primary.shade}`,\n    },\n  }),\n  listContainer: css({\n    userSelect: 'none',\n    border: `solid 1px ${theme.colors.border.medium}`,\n  }),\n  disabled: css({\n    opacity: '0.5',\n    pointerEvents: 'none',\n  }),\n  listItemName: css({\n    flex: 1,\n\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  header: css({\n    display: 'flex',\n    alignItems: 'center',\n\n    gap: theme.spacing(1),\n  }),\n  dataSourceIcon: css({\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Badge, ConfirmModal, Icon, Spinner, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleGroupIdentifier, RulesSource } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { useDeleteRuleGroup } from '../../hooks/ruleGroup/useDeleteRuleGroup';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink, makeFolderSettingsLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { GrafanaRuleGroupExporter } from '../export/GrafanaRuleGroupExporter';\nimport { decodeGrafanaNamespace } from '../expressions/util';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditRuleGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable, useIsRulesLoading } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nconst { useDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const rulesSourceName = getRulesSourceName(rulesSource);\n  const rulerRulesLoaded = useIsRulesLoading(rulesSource);\n\n  const [deleteRuleGroup] = useDeleteRuleGroup();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isExporting, setIsExporting] = useState<'group' | 'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerConfig } = useHasRuler(namespace.rulesSource);\n  const { currentData: dsFeatures } = useDiscoverDsFeaturesQuery({ rulesSourceName });\n\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler && rulerRulesLoaded && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const ruleGroupIdentifier = useMemo<RuleGroupIdentifier>(() => {\n    const namespaceName = namespace.uid ?? namespace.name;\n    const groupName = group.name;\n    const dataSourceName = getRulesSourceName(namespace.rulesSource);\n\n    return { namespaceName, groupName, dataSourceName };\n  }, [namespace, group.name]);\n\n  const deleteGroup = async () => {\n    await deleteRuleGroup.execute(ruleGroupIdentifier);\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <Stack key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </Stack>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label=\"manage permissions\"\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip=\"manage permissions\"\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule folder\"\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip=\"Export rules folder\"\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        } else if (isGroupView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule group\"\n              data-testid=\"export-group\"\n              key=\"export-group\"\n              icon=\"download-alt\"\n              tooltip=\"Export rule group\"\n              onClick={() => setIsExporting('group')}\n            />\n          );\n        }\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"reorder rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} />\n  ) : (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid={selectors.components.AlertRules.groupToggle}\n        />\n        <FolderIcon isCollapsed={isCollapsed} />\n        <CloudSourceLogo rulesSource={rulesSource} />\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && rulerConfig && (\n        <EditRuleGroupModal\n          ruleGroupIdentifier={ruleGroupIdentifier}\n          rulerConfig={rulerConfig}\n          folderTitle={decodeGrafanaNamespace(namespace).name}\n          onClose={() => closeEditModal()}\n          folderUrl={folder?.canEdit ? makeFolderSettingsLink(folder.uid) : undefined}\n        />\n      )}\n      {isReorderingGroup && dsFeatures?.rulerConfig && (\n        <ReorderCloudGroupModal\n          group={group}\n          folderUid={folderUID}\n          namespace={namespace}\n          onClose={() => setIsReorderingGroup(false)}\n          rulerConfig={dsFeatures.rulerConfig}\n        />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            <p>\n              Deleting &quot;<strong>{group.name}</strong>&quot; will permanently remove the group and{' '}\n              {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            </p>\n            <p>Are you sure you want to delete this group?</p>\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n      {folder && isExporting === 'group' && (\n        <GrafanaRuleGroupExporter\n          folderUid={folder.uid}\n          groupName={group.name}\n          onClose={() => setIsExporting(undefined)}\n        />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\n// It's a simple component but we render 80 of them on the list page it needs to be fast\n// The Tooltip component is expensive to render and the rulesSource doesn't change often\n// so memoization seems to bring a lot of benefit here\nconst CloudSourceLogo = React.memo(({ rulesSource }: { rulesSource: RulesSource | string }) => {\n  const styles = useStyles2(getStyles);\n\n  if (isCloudRulesSource(rulesSource)) {\n    return (\n      <Tooltip content={rulesSource.name} placement=\"top\">\n        <img alt={rulesSource.meta.name} className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n      </Tooltip>\n    );\n  }\n\n  return null;\n});\n\nCloudSourceLogo.displayName = 'CloudSourceLogo';\n\n// We render a lot of these on the list page, and the Icon component does quite a bit of work\n// to render its contents\nconst FolderIcon = React.memo(({ isCollapsed }: { isCollapsed: boolean }) => {\n  return <Icon name={isCollapsed ? 'folder' : 'folder-open'} />;\n});\n\nFolderIcon.displayName = 'FolderIcon';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({}),\n    header: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      flexWrap: 'nowrap',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n      '&:hover': {\n        backgroundColor: theme.components.table.rowHoverBackground,\n      },\n    }),\n    headerStats: css({\n      flexShrink: 0,\n\n      span: {\n        verticalAlign: 'middle',\n      },\n\n      [theme.breakpoints.down('sm')]: {\n        order: 2,\n        width: '100%',\n        paddingLeft: theme.spacing(1),\n      },\n    }),\n    groupName: css({\n      marginLeft: theme.spacing(1),\n      marginBottom: 0,\n      cursor: 'pointer',\n\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    spacer: css({\n      flex: 1,\n    }),\n    collapseToggle: css({\n      background: 'none',\n      border: 'none',\n      marginTop: `-${theme.spacing(1)}`,\n      marginBottom: `-${theme.spacing(1)}`,\n\n      svg: {\n        marginBottom: 0,\n      },\n    }),\n    dataSourceIcon: css({\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n    }),\n    dataSourceOrigin: css({\n      marginRight: '1em',\n      color: theme.colors.text.disabled,\n    }),\n    actionsSeparator: css({\n      margin: `0 ${theme.spacing(2)}`,\n    }),\n    actionIcons: css({\n      width: '80px',\n      alignItems: 'center',\n\n      flexShrink: 0,\n    }),\n    rulesTable: css({\n      margin: theme.spacing(2, 0),\n    }),\n    rotate90: css({\n      transform: 'rotate(90deg)',\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { LinkButton, LoadingPlaceholder, Pagination, Spinner, Text, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () => rulesDataSources.filter((ds) => isAsyncRequestStatePending(promRules[ds.name])),\n    [promRules, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            <Trans i18nKey=\"alerting.list-view.section.dataSourceManaged.title\">Data source-managed</Trans>\n          </Text>\n          {dataSourcesLoading.length ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n            />\n          ) : (\n            <div />\n          )}\n          <CreateRecordingRuleButton />\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size=\"xl\" className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: theme.spacing(1),\n  }),\n});\n\nexport function CreateRecordingRuleButton() {\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  if (canCreateCloudRules) {\n    return (\n      <LinkButton\n        key=\"new-recording-rule\"\n        href={urlUtil.renderUrl(`alerting/new/recording`, {\n          returnTo: location.pathname + location.search,\n        })}\n        tooltip=\"Create new Data source-managed recording rule\"\n        icon=\"plus\"\n        variant=\"secondary\"\n      >\n        New recording rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, LinkButton, LoadingPlaceholder, Pagination, Spinner, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { createRelativeUrl } from '../../utils/url';\nimport { GrafanaRulesExporter } from '../export/GrafanaRulesExporter';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams.view === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  const [exportRulesSupported, exportRulesAllowed] = useAlertingAbility(AlertingAction.ExportGrafanaManagedRules);\n  const canExportRules = exportRulesSupported && exportRulesAllowed;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const hasGrafanaAlerts = namespaces.length > 0;\n\n  const grafanaRecordingRulesEnabled = config.featureToggles.grafanaManagedRecordingRules;\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.title\">Grafana-managed</Trans>\n          </Text>\n          {loading ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={t('alerting.list-view.section.grafanaManaged.loading', 'Loading...')}\n            />\n          ) : (\n            <div />\n          )}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n            {hasGrafanaAlerts && canExportRules && (\n              <Button\n                aria-label=\"export all grafana rules\"\n                data-testid=\"export-all-grafana-rules\"\n                icon=\"download-alt\"\n                tooltip=\"Export all Grafana-managed rules\"\n                onClick={toggleShowExportDrawer}\n                variant=\"secondary\"\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.export-rules\">Export rules</Trans>\n              </Button>\n            )}\n            {grafanaRecordingRulesEnabled && (\n              <LinkButton\n                href={createRelativeUrl('/alerting/new/grafana-recording', {\n                  returnTo: '/alerting/list' + location.search,\n                })}\n                icon=\"plus\"\n                variant=\"secondary\"\n                tooltip=\"Create new Grafana-managed recording rule\"\n                onClick={() => logInfo(LogMessages.grafanaRecording)}\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.new-recording-rule\">New recording rule</Trans>\n              </LinkButton>\n            )}\n          </Stack>\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size=\"xl\" className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n      {canExportRules && showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(1),\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    flexDirection: 'row',\n  }),\n});\n","import { useEffect, useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertingAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertingAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\nimport { Counter, LoadingBar, Pagination, Stack } from '@grafana/ui';\nimport { DEFAULT_PER_PAGE_PAGINATION } from 'app/core/constants';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { AlertRuleListItem } from '../../rule-list/components/AlertRuleListItem';\nimport { ListSection } from '../../rule-list/components/ListSection';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesDataSources } from '../../utils/datasource';\nimport { createViewLink } from '../../utils/misc';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\nimport { hashRule } from '../../utils/rule-id';\nimport { getRulePluginOrigin, isAlertingRule, isProvisionedRule } from '../../utils/rules';\nimport { calculateTotalInstances } from '../rule-viewer/RuleViewer';\n\nimport { RuleActionsButtons } from './RuleActionsButtons';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Map<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const [ref, { width }] = useMeasure<HTMLUListElement>();\n\n  const isLoading = useDataSourcesLoadingState();\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = new Map([\n      [PromAlertingRuleState.Firing, []],\n      [PromAlertingRuleState.Pending, []],\n      [PromAlertingRuleState.Inactive, []],\n    ]);\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          // We might hit edge cases where there type = alerting, but there is no state.\n          // In this case, we shouldn't try to group these alerts in the state view\n          // Even though we handle this at the API layer, this is a last catch point for any edge cases\n          if (rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state) {\n            result.get(rule.promRule.state)?.push(rule);\n          }\n        })\n      )\n    );\n\n    result.forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n\n  const entries = groupedRules.entries();\n\n  return (\n    <ul role=\"tree\" ref={ref}>\n      {isLoading && <LoadingBar width={width} />}\n      <Stack direction=\"column\">\n        {Array.from(entries).map(([state, rules]) => (\n          <RulesByState key={state} state={state} rules={rules} />\n        ))}\n      </Stack>\n    </ul>\n  );\n};\n\nconst STATE_TITLES: Record<PromAlertingRuleState, string> = {\n  [PromAlertingRuleState.Firing]: 'Firing',\n  [PromAlertingRuleState.Pending]: 'Pending',\n  [PromAlertingRuleState.Inactive]: 'Normal',\n};\n\nconst RulesByState = ({ state, rules }: { state: PromAlertingRuleState; rules: CombinedRule[] }) => {\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(rules, 1, DEFAULT_PER_PAGE_PAGINATION);\n\n  const isFiringState = state !== PromAlertingRuleState.Firing;\n  const hasRulesMatchingState = rules.length > 0;\n\n  return (\n    <ListSection\n      title={\n        <Stack alignItems=\"center\" gap={0}>\n          {STATE_TITLES[state] ?? 'Unknown'}\n          <Counter value={rules.length} />\n        </Stack>\n      }\n      collapsed={isFiringState || hasRulesMatchingState}\n      pagination={\n        <Pagination\n          currentPage={page}\n          numberOfPages={numberOfPages}\n          onNavigate={onPageChange}\n          hideWhenSinglePage={true}\n        />\n      }\n    >\n      {pageItems.map((rule) => {\n        const { rulerRule, promRule } = rule;\n\n        const isProvisioned = rulerRule ? isProvisionedRule(rulerRule) : false;\n        const instancesCount = isAlertingRule(rule.promRule) ? calculateTotalInstances(rule.instanceTotals) : undefined;\n\n        if (!promRule) {\n          return null;\n        }\n\n        const originMeta = getRulePluginOrigin(rule.promRule);\n\n        return (\n          <AlertRuleListItem\n            key={hashRule(promRule)}\n            name={rule.name}\n            href={createViewLink(rule.namespace.rulesSource, rule)}\n            summary={rule.annotations.summary}\n            state={state}\n            health={rule.promRule?.health}\n            error={rule.promRule?.lastError}\n            labels={rule.promRule?.labels}\n            isProvisioned={isProvisioned}\n            instancesCount={instancesCount}\n            namespace={rule.namespace.name}\n            group={rule.group.name}\n            actions={<RuleActionsButtons compact rule={rule} rulesSource={rule.namespace.rulesSource} />}\n            origin={originMeta}\n          />\n        );\n      })}\n    </ListSection>\n  );\n};\n\nfunction useDataSourcesLoadingState() {\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const grafanaLoading = useUnifiedAlertingSelector((state) => {\n    const promLoading = isAsyncRequestStatePending(state.promRules[GRAFANA_RULES_SOURCE_NAME]);\n    const rulerLoading = isAsyncRequestStatePending(state.rulerRules[GRAFANA_RULES_SOURCE_NAME]);\n\n    return promLoading || rulerLoading;\n  });\n\n  const externalDataSourcesLoading = rulesDataSources.some((ds) => isAsyncRequestStatePending(promRules[ds.name]));\n\n  const loading = grafanaLoading || externalDataSourcesLoading;\n\n  return loading;\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Button, LinkButton, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans } from 'app/core/internationalization';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, trackRuleListNavigation } from '../Analytics';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport RulesFilter from '../components/rules/Filter/RulesFilter.v1';\nimport { NoRulesSplash } from '../components/rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from '../components/rules/RuleDetails';\nimport { RuleListErrors } from '../components/rules/RuleListErrors';\nimport { RuleListGroupView } from '../components/rules/RuleListGroupView';\nimport { RuleListStateView } from '../components/rules/RuleListStateView';\nimport { RuleStats } from '../components/rules/RuleStats';\nimport { shouldUsePrometheusRulesPrimary } from '../featureToggles';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { useCombinedRuleNamespaces } from '../hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from '../hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from '../hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction, fetchAllPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME, getAllRulesSourceNames } from '../utils/datasource';\nimport { createRelativeUrl } from '../utils/url';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\n\nconst RuleListV1 = () => {\n  const dispatch = useDispatch();\n  const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n  const [expandAll, setExpandAll] = useState(false);\n\n  const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n  const [queryParams] = useQueryParams();\n  const { filterState, hasActiveFilters } = useRulesFilter();\n\n  const hasActiveLabelsFilter = filterState.labels.length > 0;\n\n  const queryParamView = queryParams.view;\n  const viewType = queryParamView === 'state' || queryParamView === 'groups' ? queryParamView : 'groups';\n  const view = VIEWS[viewType] ? viewType : 'groups';\n\n  const ViewComponent = VIEWS[view];\n\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const loading = rulesDataSourceNames.some(\n    (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n  );\n\n  const promRequests = Object.entries(promRuleRequests);\n  const rulerRequests = Object.entries(rulerRuleRequests);\n\n  const allPromLoaded = promRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n  const allRulerLoaded = rulerRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n\n  const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n  const allRulerEmpty = rulerRequests.every(([_, state]) => {\n    const rulerRules = Object.entries(state?.result ?? {});\n    const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n    return noRules && state.dispatched;\n  });\n\n  const limitAlerts = hasActiveLabelsFilter ? undefined : LIMIT_ALERTS;\n  // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n  const [_, fetchRules] = useAsyncFn(async () => {\n    if (!loading) {\n      if (prometheusRulesPrimary) {\n        await dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n        await dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n      } else {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }\n  }, [loading, limitAlerts, dispatch]);\n\n  useEffect(() => {\n    trackRuleListNavigation().catch(() => {});\n  }, []);\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    if (prometheusRulesPrimary) {\n      dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n      dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n    } else {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }\n  }, [dispatch, limitAlerts]);\n  useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n  // Show splash only when we loaded all of the data sources and none of them has alerts\n  const hasNoAlertRulesCreatedYet =\n    allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n  const hasAlertRulesCreated = !hasNoAlertRulesCreatedYet;\n\n  const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n  const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n  return (\n    // We don't want to show the Loading... indicator for the whole page.\n    // We show separate indicators for Grafana-managed and Cloud rules\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      isLoading={false}\n      actions={\n        hasAlertRulesCreated && (\n          <Stack gap={1}>\n            <CreateAlertButton /> <ExportNewRuleButton />\n          </Stack>\n        )\n      }\n    >\n      <Stack direction=\"column\">\n        <RuleListErrors />\n        <RulesFilter onClear={onFilterCleared} />\n        {hasAlertRulesCreated && (\n          <Stack direction=\"row\" alignItems=\"center\">\n            {view === 'groups' && hasActiveFilters && (\n              <Button\n                icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                variant=\"secondary\"\n                onClick={() => setExpandAll(!expandAll)}\n              >\n                {expandAll ? 'Collapse all' : 'Expand all'}\n              </Button>\n            )}\n          </Stack>\n        )}\n        <RuleStats namespaces={filteredNamespaces} />\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {hasAlertRulesCreated && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </Stack>\n    </AlertingPageWrapper>\n  );\n};\n\nexport default RuleListV1;\n\nexport function CreateAlertButton() {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <LinkButton\n        href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n        icon=\"plus\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      >\n        <Trans i18nKey=\"alerting.rule-list.new-alert-rule\">New alert rule</Trans>\n      </LinkButton>\n    );\n  }\n  return null;\n}\n\nfunction ExportNewRuleButton() {\n  const returnTo = location.pathname + location.search;\n  const url = createRelativeUrl(`/alerting/export-new-rule`, {\n    returnTo,\n  });\n  return (\n    <LinkButton\n      href={url}\n      icon=\"download-alt\"\n      variant=\"secondary\"\n      tooltip=\"Export new grafana rule\"\n      onClick={() => logInfo(LogMessages.exportNewGrafanaRule)}\n    >\n      <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.export-new-rule\">Export rule definition</Trans>\n    </LinkButton>\n  );\n}\n","import { Suspense, lazy } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport RuleListV1 from './rule-list/RuleList.v1';\nimport { withPageErrorBoundary } from './withPageErrorBoundary';\nconst RuleListV2 = lazy(() => import('./rule-list/RuleList.v2'));\n\nconst RuleList = () => {\n  const newView = config.featureToggles.alertingListViewV2;\n\n  return <Suspense>{newView ? <RuleListV2 /> : <RuleListV1 />}</Suspense>;\n};\n\nexport default withPageErrorBoundary(RuleList);\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, Toggletip, useStyles2 } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title?: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title = 'Need help?' }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n  }),\n  helpInfo: css({\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { FieldSet, InlineSwitch, Stack, Text, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n  switchMode?: {\n    isAdvancedMode: boolean;\n    setAdvancedMode: (isAdvanced: boolean) => void;\n  };\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n  switchMode,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n  const AlertRuleSelectors = selectors.components.AlertRules;\n  return (\n    <div className={styles.parent} data-testid={AlertRuleSelectors.step(stepNo.toString())}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Text variant=\"h3\">\n              {stepNo}. {title}\n            </Text>\n            {switchMode && (\n              <Text variant=\"bodySmall\">\n                <InlineSwitch\n                  data-testid={AlertRuleSelectors.stepAdvancedModeSwitch(stepNo.toString())}\n                  value={switchMode.isAdvancedMode}\n                  onChange={(event) => {\n                    switchMode.setAdvancedMode(event.currentTarget.checked);\n                  }}\n                  label=\"Advanced options\"\n                  showLabel\n                  transparent\n                  className={styles.reverse}\n                />\n              </Text>\n            )}\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(2)} ${theme.spacing(3)}`,\n  }),\n  description: css({\n    marginTop: `-${theme.spacing(2)}`,\n  }),\n  fullWidth: css({\n    width: '100%',\n  }),\n  reverse: css({\n    flexDirection: 'row-reverse',\n    gap: theme.spacing(1),\n  }),\n});\n","import { Button, IconName, LinkButton, Tooltip } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  SelectableValue,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePickerProps, DataSourcePickerState, getDataSourceSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ActionMeta, MultiSelect, PluginSignatureBadge, Stack } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <Stack alignItems=\"center\" justifyContent=\"space-between\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </Stack>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { trackRulesListViewChange } from '../../../Analytics';\nimport { useRulesFilter } from '../../../hooks/useFilteredRules';\nimport { useURLSearchParams } from '../../../hooks/useURLSearchParams';\n\nexport type SupportedView = 'list' | 'grouped';\n\ntype LegacySupportedView = 'list' | 'grouped' | 'state';\n\nconst ViewOptions: Array<SelectableValue<SupportedView>> = [\n  { icon: 'folder', label: 'Grouped', value: 'grouped' },\n  { icon: 'list-ul', label: 'List', value: 'list' },\n];\n\nfunction RulesViewModeSelectorV2() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const { hasActiveFilters } = useRulesFilter();\n  const wantsListView = queryParams.get('view') === 'list';\n\n  const selectedViewOption = hasActiveFilters || wantsListView ? 'list' : 'grouped';\n\n  /* If we change to the grouped view, we just remove the \"list\" and \"search\" params */\n  const handleViewChange = (view: SupportedView) => {\n    if (view === 'list') {\n      updateQueryParams({ view });\n      trackRulesListViewChange({ view });\n    } else {\n      updateQueryParams({ view: undefined, search: undefined });\n    }\n  };\n\n  return <RadioButtonGroup options={ViewOptions} value={selectedViewOption} onChange={handleViewChange} />;\n}\n\nconst LegacyViewOptions: Array<SelectableValue<LegacySupportedView>> = [\n  { label: 'Grouped', value: 'grouped' },\n  { label: 'List', value: 'list' },\n  { label: 'State', value: 'state' },\n];\n\nfunction RulesViewModeSelectorV1() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const viewParam = queryParams.get('view');\n\n  const currentView = viewParamToLegacyView(viewParam);\n\n  const handleViewChange = (view: LegacySupportedView) => {\n    updateQueryParams({ view });\n  };\n\n  return <RadioButtonGroup options={LegacyViewOptions} value={currentView} onChange={handleViewChange} />;\n}\n\nfunction viewParamToLegacyView(viewParam: string | null): LegacySupportedView {\n  if (viewParam === 'list') {\n    return 'list';\n  }\n\n  if (viewParam === 'state') {\n    return 'state';\n  }\n\n  return 'grouped';\n}\n\nexport const RulesViewModeSelector = config.featureToggles.alertingListViewV2\n  ? RulesViewModeSelectorV2\n  : RulesViewModeSelectorV1;\n","import { css } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { AccessControlAction } from 'app/types';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport {\n  LogMessages,\n  logInfo,\n  trackRulesSearchComponentInteraction,\n  trackRulesSearchInputInteraction,\n} from '../../../Analytics';\nimport { useRulesFilter } from '../../../hooks/useFilteredRules';\nimport { useAlertingHomePageExtensions } from '../../../plugins/useAlertingHomePageExtensions';\nimport { RuleHealth } from '../../../search/rulesSearchParser';\nimport { AlertmanagerProvider } from '../../../state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { alertStateToReadable } from '../../../utils/rules';\nimport { PopupCard } from '../../HoverCard';\nimport { MultipleDataSourcePicker } from '../MultipleDataSourcePicker';\n\nimport { RulesViewModeSelector } from './RulesViewModeSelector';\n\nconst RuleTypeOptions: SelectableValue[] = [\n  { label: 'Alert ', value: PromRuleType.Alerting },\n  { label: 'Recording ', value: PromRuleType.Recording },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onClear?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onClear = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const { pluginsFilterEnabled } = usePluginsFilterStatus();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({\n    defaultValues: { searchQuery },\n  });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n    trackRulesSearchComponentInteraction('dataSourceNames');\n  };\n\n  const handleDashboardChange = (dashboardUid: string | undefined) => {\n    updateFilters({ ...filterState, dashboardUid });\n    trackRulesSearchComponentInteraction('dashboardUid');\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    trackRulesSearchComponentInteraction('ruleState');\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    trackRulesSearchComponentInteraction('ruleType');\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    trackRulesSearchComponentInteraction('ruleHealth');\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onClear();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const handleContactPointChange = (contactPoint: string) => {\n    updateFilters({ ...filterState, contactPoint });\n    trackRulesSearchComponentInteraction('contactPoint');\n  };\n\n  const canRenderContactPointSelector =\n    (contextSrv.hasPermission(AccessControlAction.AlertingReceiversRead) &&\n      config.featureToggles.alertingSimplifiedRouting) ??\n    false;\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" gap={1} wrap=\"wrap\">\n        <Field\n          className={styles.dsPickerContainer}\n          label={\n            <Label htmlFor=\"data-source-picker\">\n              <Stack gap={0.5} alignItems=\"center\">\n                <span>Search by data sources</span>\n                <Tooltip\n                  content={\n                    <div>\n                      <p>\n                        Data sources containing configured alert rules are Mimir or Loki data sources where alert rules\n                        are stored and evaluated in the data source itself.\n                      </p>\n                      <p>\n                        In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                        alert rules in the Grafana UI as well as in the data source where they were configured.\n                      </p>\n                    </div>\n                  }\n                >\n                  <Icon\n                    id=\"data-source-picker-inline-help\"\n                    name=\"info-circle\"\n                    size=\"sm\"\n                    title=\"Search by data sources help\"\n                  />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <MultipleDataSourcePicker\n            key={dataSourceKey}\n            alerting\n            noDefault\n            placeholder=\"All data sources\"\n            current={filterState.dataSourceNames}\n            onChange={handleDataSourceChange}\n            onClear={clearDataSource}\n          />\n        </Field>\n\n        <Field\n          className={styles.dashboardPickerContainer}\n          label={<Label htmlFor=\"filters-dashboard-picker\">Dashboard</Label>}\n        >\n          {/* The key prop is to clear the picker value */}\n          {/* DashboardPicker doesn't do that itself when value is undefined */}\n          <DashboardPicker\n            inputId=\"filters-dashboard-picker\"\n            key={filterState.dashboardUid ? 'dashboard-defined' : 'dashboard-not-defined'}\n            value={filterState.dashboardUid}\n            onChange={(value) => handleDashboardChange(value?.uid)}\n            isClearable\n            cacheOptions\n          />\n        </Field>\n\n        <div>\n          <Label>State</Label>\n          <RadioButtonGroup\n            options={RuleStateOptions}\n            value={filterState.ruleState}\n            onChange={handleAlertStateChange}\n          />\n        </div>\n        <div>\n          <Label>Rule type</Label>\n          <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n        </div>\n        <div>\n          <Label>Health</Label>\n          <RadioButtonGroup\n            options={RuleHealthOptions}\n            value={filterState.ruleHealth}\n            onChange={handleRuleHealthChange}\n          />\n        </div>\n        {canRenderContactPointSelector && (\n          <AlertmanagerProvider accessType={'notification'} alertmanagerSourceName={GRAFANA_RULES_SOURCE_NAME}>\n            <Stack direction=\"column\" gap={0}>\n              <Field\n                label={\n                  <Label htmlFor=\"contactPointFilter\">\n                    <Trans i18nKey=\"alerting.contactPointFilter.label\">Contact point</Trans>\n                  </Label>\n                }\n              >\n                <ContactPointSelector\n                  selectedContactPointName={filterState.contactPoint}\n                  selectProps={{\n                    inputId: 'contactPointFilter',\n                    width: 40,\n                    onChange: (selectValue) => {\n                      handleContactPointChange(selectValue?.value?.name!);\n                    },\n                    isClearable: true,\n                  }}\n                />\n              </Field>\n            </Stack>\n          </AlertmanagerProvider>\n        )}\n        {pluginsFilterEnabled && (\n          <div>\n            <Label>Plugin rules</Label>\n            <RadioButtonGroup<'hide'>\n              options={[\n                { label: 'Show', value: undefined },\n                { label: 'Hide', value: 'hide' },\n              ]}\n              value={filterState.plugins}\n              onChange={(value) => updateFilters({ ...filterState, plugins: value })}\n            />\n          </div>\n        )}\n      </Stack>\n\n      <Stack direction=\"column\" gap={0}>\n        <Stack direction=\"row\" gap={1}>\n          <form\n            className={styles.searchInput}\n            onSubmit={handleSubmit((data) => {\n              setSearchQuery(data.searchQuery);\n              searchQueryRef.current?.blur();\n              trackRulesSearchInputInteraction({ oldQuery: searchQuery, newQuery: data.searchQuery });\n            })}\n          >\n            <Field\n              label={\n                <Label htmlFor=\"rulesSearchInput\">\n                  <Stack gap={0.5} alignItems=\"center\">\n                    <span>Search</span>\n                    <PopupCard content={<SearchQueryHelp />}>\n                      <Icon name=\"info-circle\" size=\"sm\" tabIndex={0} title=\"Search help\" />\n                    </PopupCard>\n                  </Stack>\n                </Label>\n              }\n            >\n              <Input\n                id=\"rulesSearchInput\"\n                key={queryStringKey}\n                prefix={searchIcon}\n                ref={(e) => {\n                  ref(e);\n                  searchQueryRef.current = e;\n                }}\n                {...rest}\n                placeholder=\"Search\"\n                data-testid=\"search-query-input\"\n              />\n            </Field>\n            <input type=\"submit\" hidden />\n          </form>\n          <div>\n            <Label>View as</Label>\n            <RulesViewModeSelector />\n          </div>\n        </Stack>\n        {hasActiveFilters && (\n          <div>\n            <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    dsPickerContainer: css({\n      width: theme.spacing(60),\n      flexGrow: 0,\n      margin: 0,\n    }),\n    dashboardPickerContainer: css({\n      minWidth: theme.spacing(50),\n    }),\n    searchInput: css({\n      flex: 1,\n      margin: 0,\n    }),\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasources\" expr=\"datasource:mimir datasource:prometheus\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n        <HelpRow title=\"Dashboard UID\" expr=\"dashboard:eadde4c7-54e6-4964-85c0-484ab852fd04\" />\n        <HelpRow title=\"Contact point\" expr=\"contactPoint:slack\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  code: css({\n    display: 'block',\n    textAlign: 'center',\n  }),\n});\n\nfunction usePluginsFilterStatus() {\n  const { components } = useAlertingHomePageExtensions();\n  return { pluginsFilterEnabled: components.length > 0 };\n}\n\nexport default RulesFilter;\n","import { PluginExtensionPoints } from '@grafana/data';\nimport { usePluginComponents } from '@grafana/runtime';\n\nexport function useAlertingHomePageExtensions() {\n  return usePluginComponents({\n    extensionPointId: PluginExtensionPoints.AlertingHomePage,\n    limitPerPlugin: 1,\n  });\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { ReactNode, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Icon, Stack, Text, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { Rule, RuleGroupIdentifierV2, RuleHealth, RulesSourceIdentifier } from 'app/types/unified-alerting';\nimport { Labels, PromAlertingRuleState, RulesSourceApplication } from 'app/types/unified-alerting-dto';\n\nimport { logError } from '../../Analytics';\nimport { MetaText } from '../../components/MetaText';\nimport { ProvisioningBadge } from '../../components/Provisioning';\nimport { PluginOriginBadge } from '../../plugins/PluginOriginBadge';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { getGroupOriginName } from '../../utils/groupIdentifier';\nimport { labelsSize } from '../../utils/labels';\nimport { createContactPointSearchLink } from '../../utils/misc';\nimport { RulePluginOrigin } from '../../utils/rules';\n\nimport { ListItem } from './ListItem';\nimport { DataSourceIcon } from './Namespace';\nimport { RuleListIcon } from './RuleListIcon';\nimport { calculateNextEvaluationEstimate } from './util';\n\ninterface AlertRuleListItemProps {\n  name: string;\n  href: string;\n  summary?: string;\n  error?: string;\n  state?: PromAlertingRuleState;\n  isPaused?: boolean;\n  health?: RuleHealth;\n  isProvisioned?: boolean;\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  labels?: Labels;\n  instancesCount?: number;\n  namespace?: string;\n  group?: string;\n  rulesSource?: RulesSourceIdentifier;\n  application?: RulesSourceApplication;\n  // used for alert rules that use simplified routing\n  contactPoint?: string;\n  actions?: ReactNode;\n  origin?: RulePluginOrigin;\n}\n\nexport const AlertRuleListItem = (props: AlertRuleListItemProps) => {\n  const {\n    name,\n    summary,\n    state,\n    health,\n    error,\n    href,\n    isProvisioned,\n    lastEvaluation,\n    evaluationInterval,\n    isPaused = false,\n    instancesCount = 0,\n    namespace,\n    group,\n    rulesSource,\n    application,\n    contactPoint,\n    labels,\n    origin,\n    actions = null,\n  } = props;\n\n  const metadata: ReactNode[] = [];\n  if (namespace && group) {\n    metadata.push(\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        <RuleLocation namespace={namespace} group={group} rulesSource={rulesSource} application={application} />\n      </Text>\n    );\n  }\n\n  if (!isPaused) {\n    if (lastEvaluation && evaluationInterval) {\n      metadata.push(\n        <EvaluationMetadata lastEvaluation={lastEvaluation} evaluationInterval={evaluationInterval} state={state} />\n      );\n    }\n\n    if (instancesCount) {\n      metadata.push(\n        <MetaText icon=\"layers-alt\">\n          <TextLink href={href + '?tab=instances'} variant=\"bodySmall\" color=\"primary\" inline={false}>\n            {pluralize('instance', instancesCount, true)}\n          </TextLink>\n        </MetaText>\n      );\n    }\n  }\n\n  if (labelsSize(labels) > 0) {\n    metadata.push(\n      <MetaText icon=\"tag-alt\">\n        <TextLink href={href} variant=\"bodySmall\" color=\"primary\" inline={false}>\n          {pluralize('label', labelsSize(labels), true)}\n        </TextLink>\n      </MetaText>\n    );\n  }\n\n  if (!isPaused && contactPoint) {\n    metadata.push(\n      <MetaText icon=\"at\">\n        <Trans i18nKey=\"alerting.contact-points.delivered-to\">Delivered to</Trans>{' '}\n        <TextLink\n          href={createContactPointSearchLink(contactPoint, GRAFANA_RULES_SOURCE_NAME)}\n          variant=\"bodySmall\"\n          color=\"primary\"\n          inline={false}\n        >\n          {contactPoint}\n        </TextLink>\n      </MetaText>\n    );\n  }\n\n  return (\n    <ListItem\n      title={\n        <Stack direction=\"row\" alignItems=\"center\">\n          <TextLink href={href} inline={false}>\n            {name}\n          </TextLink>\n          {origin && <PluginOriginBadge pluginId={origin.pluginId} size=\"sm\" />}\n          {/* show provisioned badge only when it also doesn't have plugin origin */}\n          {isProvisioned && !origin && <ProvisioningBadge />}\n          {/* let's not show labels for now, but maybe users would be interested later? Or maybe show them only in the list view? */}\n          {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n        </Stack>\n      }\n      description={<Summary content={summary} error={error} />}\n      icon={<RuleListIcon state={state} health={health} isPaused={isPaused} />}\n      actions={actions}\n      meta={metadata}\n    />\n  );\n};\n\ntype RecordingRuleListItemProps = Omit<AlertRuleListItemProps, 'summary' | 'state' | 'instancesCount' | 'contactPoint'>;\n\nexport function RecordingRuleListItem({\n  name,\n  namespace,\n  group,\n  rulesSource,\n  application,\n  href,\n  health,\n  isProvisioned,\n  error,\n  isPaused,\n  origin,\n  actions,\n}: RecordingRuleListItemProps) {\n  const metadata: ReactNode[] = [];\n  if (namespace && group) {\n    metadata.push(\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        <RuleLocation namespace={namespace} group={group} rulesSource={rulesSource} application={application} />\n      </Text>\n    );\n  }\n\n  return (\n    <ListItem\n      title={\n        <Stack direction=\"row\" alignItems=\"center\">\n          <TextLink href={href} inline={false}>\n            {name}\n          </TextLink>\n          {origin && <PluginOriginBadge pluginId={origin.pluginId} size=\"sm\" />}\n          {/* show provisioned badge only when it also doesn't have plugin origin */}\n          {isProvisioned && !origin && <ProvisioningBadge />}\n          {/* let's not show labels for now, but maybe users would be interested later? Or maybe show them only in the list view? */}\n          {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n        </Stack>\n      }\n      description={<Summary error={error} />}\n      icon={<RuleListIcon recording={true} health={health} isPaused={isPaused} />}\n      actions={actions}\n      meta={metadata}\n    />\n  );\n}\n\ninterface SummaryProps {\n  content?: string;\n  error?: string;\n}\n\nfunction Summary({ content, error }: SummaryProps) {\n  if (error) {\n    return (\n      <Text variant=\"bodySmall\" color=\"error\" weight=\"light\" truncate element=\"p\">\n        {error}\n      </Text>\n    );\n  }\n  if (content) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {content}\n      </Text>\n    );\n  }\n\n  return null;\n}\n\ninterface EvaluationMetadataProps {\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  state?: PromAlertingRuleState;\n}\n\nfunction EvaluationMetadata({ lastEvaluation, evaluationInterval, state }: EvaluationMetadataProps) {\n  const nextEvaluation = calculateNextEvaluationEstimate(lastEvaluation, evaluationInterval);\n\n  // @TODO support firing for calculation\n  if (state === PromAlertingRuleState.Firing && nextEvaluation) {\n    const firingFor = '2m 34s';\n\n    return (\n      <MetaText icon=\"clock-nine\">\n        <Trans i18nKey=\"alerting.alert-rules.firing-for\">Firing for</Trans> <Text color=\"primary\">{firingFor}</Text>\n        {nextEvaluation && (\n          <>\n            {'· '}\n            <Trans i18nKey=\"alerting.alert-rules.next-evaluation-in\">next evaluation in</Trans>{' '}\n            {nextEvaluation.humanized}\n          </>\n        )}\n      </MetaText>\n    );\n  }\n\n  // for recording rules and normal or pending state alert rules we just show when we evaluated last and how long that took\n  if (nextEvaluation) {\n    return (\n      <MetaText icon=\"clock-nine\">\n        <Trans i18nKey=\"alerting.alert-rules.next-evaluation\">Next evaluation</Trans> {nextEvaluation.humanized}\n      </MetaText>\n    );\n  }\n\n  return null;\n}\n\ninterface UnknownRuleListItemProps {\n  rule: Rule;\n  groupIdentifier: RuleGroupIdentifierV2;\n}\n\nexport const UnknownRuleListItem = ({ rule, groupIdentifier }: UnknownRuleListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const { namespace, groupName } = groupIdentifier;\n    const ruleContext = {\n      name: rule.name,\n      groupName,\n      namespace: JSON.stringify(namespace),\n      rulesSource: getGroupOriginName(groupIdentifier),\n    };\n    logError(new Error('unknown rule type'), ruleContext);\n  }, [rule, groupIdentifier]);\n\n  return (\n    <Alert title={'Unknown rule type'} className={styles.resetMargin}>\n      <details>\n        <summary>\n          <Trans i18nKey=\"alerting.alert-rules.rule-definition\">Rule definition</Trans>\n        </summary>\n        <pre>\n          <code>{JSON.stringify(rule, null, 2)}</code>\n        </pre>\n      </details>\n    </Alert>\n  );\n};\n\ninterface RuleLocationProps {\n  namespace: string;\n  group: string;\n  rulesSource?: RulesSourceIdentifier;\n  application?: RulesSourceApplication;\n}\n\n// @TODO make the datasource / namespace / group click-able to allow further filtering of the list\nexport const RuleLocation = ({ namespace, group, rulesSource, application }: RuleLocationProps) => {\n  const isGrafanaApp = application === 'grafana';\n  const isDataSourceApp = !!rulesSource && !!application && !isGrafanaApp;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n      {isGrafanaApp && <Icon size=\"xs\" name=\"folder\" />}\n      {isDataSourceApp && (\n        <Tooltip content={rulesSource.name}>\n          <span>\n            <DataSourceIcon application={application} size={14} />\n          </span>\n        </Tooltip>\n      )}\n\n      <Stack direction=\"row\" alignItems=\"center\" gap={0}>\n        {namespace}\n        <Icon size=\"sm\" name=\"angle-right\" />\n        {group}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertListItemContainer: css({\n    position: 'relative',\n    listStyle: 'none',\n    background: theme.colors.background.primary,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    padding: theme.spacing(1, 1, 1, 1.5),\n  }),\n  resetMargin: css({\n    margin: 0,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React, { ReactNode } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, Text, useStyles2 } from '@grafana/ui';\n\ninterface ListItemProps {\n  icon?: ReactNode;\n  title: ReactNode;\n  description?: ReactNode;\n  meta?: ReactNode[];\n  metaRight?: ReactNode[];\n  actions?: ReactNode;\n  'data-testid'?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const { icon = null, title, description, meta, metaRight, actions, 'data-testid': testId } = props;\n\n  return (\n    <li className={styles.alertListItemContainer} role=\"treeitem\" aria-selected=\"false\" data-testid={testId}>\n      <Stack direction=\"row\" alignItems=\"start\" gap={1} wrap={false}>\n        {/* icon */}\n        {icon}\n\n        <Stack direction=\"column\" gap={0} flex=\"1\" minWidth={0}>\n          {/* title */}\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.textOverflow}>{title}</div>\n            <div className={styles.textOverflow}>{description}</div>\n          </Stack>\n\n          {/* metadata */}\n          <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n            {meta?.map((item, index) => (\n              <React.Fragment key={index}>\n                {index > 0 && <Separator />}\n                {item}\n              </React.Fragment>\n            ))}\n          </Stack>\n        </Stack>\n\n        {/* actions & meta right */}\n        <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={false}>\n          {/* @TODO move this so the metadata row can extend beyond the width of this column */}\n          {metaRight}\n          {actions}\n        </Stack>\n      </Stack>\n    </li>\n  );\n};\n\nexport const SkeletonListItem = () => {\n  return (\n    <ListItem\n      icon={<Skeleton width={16} height={16} circle />}\n      title={<Skeleton height={16} width={350} />}\n      actions={<Skeleton height={10} width={200} />}\n    />\n  );\n};\n\nconst Separator = () => (\n  <Text color=\"secondary\" variant=\"bodySmall\">\n    {'·'}\n  </Text>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertListItemContainer: css({\n    position: 'relative',\n    listStyle: 'none',\n    background: theme.colors.background.primary,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1)}`,\n  }),\n  textOverflow: css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: 'inherit',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport { PropsWithChildren, ReactNode } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, Stack, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { Spacer } from '../../components/Spacer';\n\ninterface ListSectionProps extends PropsWithChildren {\n  title: ReactNode;\n  collapsed?: boolean;\n  actions?: ReactNode;\n  pagination?: ReactNode;\n}\n\nexport const ListSection = ({\n  children,\n  title,\n  collapsed = false,\n  actions = null,\n  pagination = null,\n}: ListSectionProps) => {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, toggleCollapsed] = useToggle(collapsed);\n\n  return (\n    <li className={styles.wrapper} role=\"treeitem\" aria-selected=\"false\">\n      <div className={styles.sectionTitle}>\n        <Stack alignItems=\"center\">\n          <Stack alignItems=\"center\" gap={0}>\n            <IconButton\n              name={isCollapsed ? 'angle-right' : 'angle-down'}\n              onClick={toggleCollapsed}\n              aria-label={t('common.collapse', 'Collapse')}\n            />\n            {title}\n          </Stack>\n          {actions && (\n            <>\n              <Spacer />\n              {actions}\n            </>\n          )}\n        </Stack>\n      </div>\n      {!isEmpty(children) && !isCollapsed && (\n        <>\n          <ul role=\"group\" className={styles.groupItemsWrapper}>\n            {children}\n          </ul>\n          {pagination}\n        </>\n      )}\n    </li>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupItemsWrapper: css({\n    position: 'relative',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n\n    marginLeft: theme.spacing(1.5),\n  }),\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n\n    gap: theme.spacing(1),\n  }),\n  sectionTitle: css({\n    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,\n\n    background: theme.colors.background.secondary,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { PromApplication, RulesSourceApplication } from 'app/types/unified-alerting-dto';\n\nimport { WithReturnButton } from '../../components/WithReturnButton';\n\ninterface NamespaceProps extends PropsWithChildren {\n  name: string;\n  href?: string;\n  application?: RulesSourceApplication;\n}\n\n// @TODO add export rules for namespace back in\nconst Namespace = ({ children, name, href, application }: NamespaceProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.namespaceWrapper} role=\"treeitem\" aria-selected=\"false\">\n      <div className={styles.namespaceTitle}>\n        <Stack alignItems={'center'} gap={1}>\n          <DataSourceIcon application={application} />\n          {href ? (\n            <WithReturnButton\n              title=\"Alert rules\"\n              component={\n                <TextLink href={href} inline={false}>\n                  {name}\n                </TextLink>\n              }\n            />\n          ) : (\n            name\n          )}\n        </Stack>\n      </div>\n      {children && (\n        <ul role=\"group\" className={styles.groupItemsWrapper}>\n          {children}\n        </ul>\n      )}\n    </li>\n  );\n};\n\ninterface NamespaceIconProps {\n  application?: RulesSourceApplication;\n  size?: number;\n}\n\nexport const DataSourceIcon = ({ application, size = 16 }: NamespaceIconProps) => {\n  switch (application) {\n    case PromApplication.Prometheus:\n      return (\n        <img\n          width={size}\n          height={size}\n          src=\"public/app/plugins/datasource/prometheus/img/prometheus_logo.svg\"\n          alt=\"Prometheus\"\n        />\n      );\n    case PromApplication.Mimir:\n      return (\n        <img width={size} height={size} src=\"public/app/plugins/datasource/prometheus/img/mimir_logo.svg\" alt=\"Mimir\" />\n      );\n    case 'Loki':\n      return <img width={size} height={size} src=\"public/app/plugins/datasource/loki/img/loki_icon.svg\" alt=\"Loki\" />;\n    case 'grafana':\n    default:\n      return <Icon name=\"grafana\" />;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupItemsWrapper: css({\n    position: 'relative',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n\n    marginLeft: theme.spacing(3),\n\n    '&:before': {\n      content: \"''\",\n      position: 'absolute',\n      height: '100%',\n\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n\n      marginTop: 0,\n      marginLeft: `-${theme.spacing(2.5)}`,\n    },\n  }),\n  namespaceWrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n\n    gap: theme.spacing(1),\n  }),\n  namespaceTitle: css({\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    // background: theme.colors.background.secondary,\n\n    // border: `solid 1px ${theme.colors.border.weak}`,\n    // borderRadius: theme.shape.radius.default,\n  }),\n});\n\nexport default Namespace;\n","import { memo } from 'react';\nimport type { RequireAtLeastOne } from 'type-fest';\n\nimport { Icon, type IconName, Text, Tooltip } from '@grafana/ui';\nimport type { TextProps } from '@grafana/ui/src/components/Text/Text';\nimport type { RuleHealth } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isErrorHealth } from '../../components/rule-viewer/RuleViewer';\n\ninterface RuleListIconProps {\n  recording?: boolean;\n  state?: PromAlertingRuleState;\n  health?: RuleHealth;\n  isPaused?: boolean;\n}\n\nconst icons: Record<PromAlertingRuleState, IconName> = {\n  [PromAlertingRuleState.Inactive]: 'check-circle',\n  [PromAlertingRuleState.Pending]: 'circle',\n  [PromAlertingRuleState.Firing]: 'exclamation-circle',\n};\n\nconst color: Record<PromAlertingRuleState, 'success' | 'error' | 'warning'> = {\n  [PromAlertingRuleState.Inactive]: 'success',\n  [PromAlertingRuleState.Pending]: 'warning',\n  [PromAlertingRuleState.Firing]: 'error',\n};\n\nconst stateNames: Record<PromAlertingRuleState, string> = {\n  [PromAlertingRuleState.Inactive]: 'Normal',\n  [PromAlertingRuleState.Pending]: 'Pending',\n  [PromAlertingRuleState.Firing]: 'Firing',\n};\n\n/**\n * Make sure that the order of importance here matches the one we use in the StateBadge component for the detail view\n * This component is often rendered tens or hundreds of times in a single page, so it's performance is important\n */\nexport const RuleListIcon = memo(function RuleListIcon({\n  state,\n  health,\n  recording = false,\n  isPaused = false,\n}: RequireAtLeastOne<RuleListIconProps>) {\n  let iconName: IconName = state ? icons[state] : 'circle';\n  let iconColor: TextProps['color'] = state ? color[state] : 'secondary';\n  let stateName: string = state ? stateNames[state] : 'unknown';\n\n  if (recording) {\n    iconName = 'record-audio';\n    iconColor = 'success';\n    stateName = 'Recording';\n  }\n\n  if (health === 'nodata') {\n    iconName = 'exclamation-triangle';\n    iconColor = 'warning';\n    stateName = 'Insufficient data';\n  }\n\n  if (isErrorHealth(health)) {\n    iconName = 'times-circle';\n    iconColor = 'error';\n    stateName = 'Failed to evaluate rule';\n  }\n\n  if (isPaused) {\n    iconName = 'pause-circle';\n    iconColor = 'warning';\n    stateName = 'Paused';\n  }\n\n  return (\n    <Tooltip content={stateName} placement=\"right\">\n      <div>\n        <Text color={iconColor}>\n          <Icon name={iconName} size=\"lg\" />\n        </Text>\n      </div>\n    </Tooltip>\n  );\n});\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","canCreateAnything","EmptyState","Stack","TextLink","RuleListErrors","expanded","setExpanded","closed","setClosed","useLocalStorage","promRuleRequests","useUnifiedAlertingSelector","state","rulerRuleRequests","styles","getStyles","errors","promRequestErrors","rulerRequestErrors","requests","result","dataSource","error","grafanaPromError","grafanaRulerError","ErrorSummaryButton","Alert","item","idx","Button","count","onClick","Tooltip","theme","useDeleteRuleGroupFromNamespaceMutation","alertRuleApi","useLazyDiscoverDsFeaturesQuery","featureDiscoveryApi","useDeleteRuleGroup","deleteRuleGroup","discoverDataSourceFeature","useAsync","ruleGroupIdentifier","dataSourceName","namespaceName","groupName","rulerConfig","GrafanaRuleFolderExporter","folder","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRuleFolderExportPreview","exportFormat","exportFolderDefinition","isFetching","LoadingPlaceholder","downloadFileName","FileExportPreview","GrafanaRuleGroupExporter","folderUid","GrafanaRuleGroupExportPreview","ruleGroupTextDefinition","ReorderCloudGroupModal","props","group","namespace","operations","setOperations","reorderRulesInGroup","reorderState","isUpdating","ruleGroup","loadingRules","rulesList","setRulesList","onDragEnd","swapOperation","draft","newOrderedRules","updateRulesOrder","rulesWithUID","rulerRule","Modal","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","rule","index","isClone","isDragging","Badge","Icon","useDiscoverDsFeaturesQuery","RulesGroup","expandAll","viewMode","rulesSource","rulesSourceName","rulerRulesLoaded","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isExporting","setIsExporting","isCollapsed","setIsCollapsed","canEditRules","hasRuler","useHasRuler","dsFeatures","folderUID","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Spinner","baseUrl","ActionIcon","RuleLocation","closeEditModal","saved","CollapseToggle","selectors","FolderIcon","CloudSourceLogo","RulesTable","EditRuleGroupModal","ConfirmModal","useCombinedGroupNamespace","namespaces","ns","g","CloudRules","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","Text","CreateRecordingRuleButton","Pagination","createCloudRuleSupported","createCloudRuleAllowed","location","url","GrafanaRulesExporter","GrafanaRulesExportPreview","rulesDefinition","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","exportRulesSupported","exportRulesAllowed","canExportRules","showExportDrawer","toggleShowExportDrawer","useToggle","hasGrafanaAlerts","grafanaRecordingRulesEnabled","config","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateView","ref","width","useMeasure","isLoading","useDataSourcesLoadingState","entries","rules","LoadingBar","RulesByState","STATE_TITLES","isFiringState","hasRulesMatchingState","ListSection","Counter","promRule","instancesCount","originMeta","AlertRuleListItem","RuleActionsButtons","grafanaLoading","promLoading","rulerLoading","externalDataSourcesLoading","VIEWS","LIMIT_ALERTS","prometheusRulesPrimary","dispatch","rulesDataSourceNames","setExpandAll","onFilterCleared","filterState","hasActiveFilters","hasActiveLabelsFilter","queryParamView","viewType","view","ViewComponent","name","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","hasAlertRulesCreated","combinedNamespaces","useCombinedRuleNamespaces","filteredNamespaces","useFilteredRules","AlertingPageWrapper","CreateAlertButton","ExportNewRuleButton","RuleStats","createRuleSupported","createRuleAllowed","returnTo","RuleListV2","RuleList","newView","withPageErrorBoundary","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","NeedHelpInfo","contentText","externalLink","linkText","title","RuleEditorSection","stepNo","fullWidth","description","switchMode","AlertRuleSelectors","event","tooltip","icon","to","target","className","tooltipPlacement","rest","ariaLabel","MultipleDataSourcePicker","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","filter","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","inputId","disabled","options","value","isClearable","o","PluginSignatureBadge","ViewOptions","RulesViewModeSelectorV2","updateQueryParams","useURLSearchParams","selectedViewOption","handleViewChange","RadioButtonGroup","LegacyViewOptions","RulesViewModeSelectorV1","viewParam","currentView","viewParamToLegacyView","RulesViewModeSelector","RuleTypeOptions","RuleHealthOptions","RuleStateOptions","key","RulesFilter","pluginsFilterEnabled","usePluginsFilterStatus","searchQuery","setSearchQuery","updateFilters","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","setValue","handleDataSourceChange","dataSourceValue","dataSourceNames","handleDashboardChange","dashboardUid","clearDataSource","handleAlertStateChange","handleRuleTypeChange","ruleType","handleRuleHealthChange","ruleHealth","handleClearFiltersClick","handleContactPointChange","contactPoint","canRenderContactPointSelector","searchIcon","Field","Label","DashboardPicker","ContactPointSelector","selectValue","data","SearchQueryHelp","Input","e","helpStyles","HelpRow","expr","components","useAlertingHomePageExtensions","summary","health","href","lastEvaluation","evaluationInterval","isPaused","application","labels","origin","metadata","EvaluationMetadata","Summary","RecordingRuleListItem","content","nextEvaluation","UnknownRuleListItem","groupIdentifier","ruleContext","isGrafanaApp","isDataSourceApp","meta","metaRight","testId","Separator","SkeletonListItem","collapsed","pagination","toggleCollapsed","Namespace","DataSourceIcon","size","icons","color","stateNames","RuleListIcon","recording","iconName","iconColor","stateName","callback","delay","savedCallback","interval_1"],"sourceRoot":""}