{"version":3,"file":"newLogsPanel.f0b9c2148e87c0005985.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/logs-new/LogsPanel.tsx","webpack://grafana/./public/app/plugins/panel/logs-new/suggestions.ts","webpack://grafana/./public/app/plugins/panel/logs-new/module.tsx","webpack://grafana/./public/app/plugins/panel/logs/LogsPanel.tsx","webpack://grafana/./public/app/plugins/panel/logs/types.ts","webpack://grafana/./public/app/plugins/panel/logs/useDatasourcesFromTargets.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  CoreApp,\n  DataFrame,\n  GrafanaTheme2,\n  LoadingState,\n  LogsSortOrder,\n  PanelProps,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { usePanelContext, useStyles2 } from '@grafana/ui';\nimport { LogList } from 'app/features/logs/components/panel/LogList';\nimport { PanelDataErrorView } from 'app/features/panel/components/PanelDataErrorView';\n\nimport { dataFrameToLogsModel, dedupLogRows } from '../../../features/logs/logsModel';\nimport { requestMoreLogs } from '../logs/LogsPanel';\nimport { isOnNewLogsReceivedType } from '../logs/types';\nimport { useDatasourcesFromTargets } from '../logs/useDatasourcesFromTargets';\n\nimport { Options } from './panelcfg.gen';\n\ninterface LogsPanelProps extends PanelProps<Options> {}\n\nexport const LogsPanel = ({\n  data,\n  timeZone,\n  fieldConfig,\n  options: { dedupStrategy, enableInfiniteScrolling, onNewLogsReceived, showTime, sortOrder, wrapLogMessage },\n  id,\n}: LogsPanelProps) => {\n  const style = useStyles2(getStyles);\n  const [logsContainer, setLogsContainer] = useState<HTMLDivElement | null>(null);\n  const [panelData, setPanelData] = useState(data);\n  const dataSourcesMap = useDatasourcesFromTargets(data.request?.targets);\n  // Prevents the scroll position to change when new data from infinite scrolling is received\n  const keepScrollPositionRef = useRef(false);\n  // Loading ref to prevent firing multiple requests\n  const loadingRef = useRef(false);\n  const { eventBus } = usePanelContext();\n\n  const logs = useMemo(() => {\n    const logsModel = panelData\n      ? dataFrameToLogsModel(panelData.series, panelData.request?.intervalMs, undefined, panelData.request?.targets)\n      : null;\n    return logsModel ? dedupLogRows(logsModel.rows, dedupStrategy) : [];\n  }, [dedupStrategy, panelData]);\n\n  useEffect(() => {\n    if (data.state !== LoadingState.Loading) {\n      setPanelData(data);\n    }\n  }, [data]);\n\n  const loadMoreLogs = useCallback(\n    async (scrollRange: AbsoluteTimeRange) => {\n      if (!data.request || !config.featureToggles.logsInfiniteScrolling || loadingRef.current) {\n        return;\n      }\n      loadingRef.current = true;\n\n      const onNewLogsReceivedCallback = isOnNewLogsReceivedType(onNewLogsReceived) ? onNewLogsReceived : undefined;\n\n      let newSeries: DataFrame[] = [];\n      try {\n        newSeries = await requestMoreLogs(dataSourcesMap, panelData, scrollRange, timeZone, onNewLogsReceivedCallback);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        loadingRef.current = false;\n      }\n\n      keepScrollPositionRef.current = true;\n      setPanelData({\n        ...panelData,\n        series: newSeries,\n      });\n    },\n    [data.request, dataSourcesMap, onNewLogsReceived, panelData, timeZone]\n  );\n\n  const initialScrollPosition = useMemo(() => {\n    /**\n     * In dashboards, users with newest logs at the bottom have the expectation of keeping the scroll at the bottom\n     * when new data is received. See https://github.com/grafana/grafana/pull/37634\n     */\n    if (data.request?.app === CoreApp.Dashboard || data.request?.app === CoreApp.PanelEditor) {\n      return sortOrder === LogsSortOrder.Ascending ? 'bottom' : 'top';\n    }\n    return 'top';\n  }, [data.request?.app, sortOrder]);\n\n  if (!logs.length) {\n    return <PanelDataErrorView fieldConfig={fieldConfig} panelId={id} data={data} needsStringField />;\n  }\n\n  return (\n    <div className={style.container} ref={(element: HTMLDivElement) => setLogsContainer(element)}>\n      {logs.length > 0 && logsContainer && (\n        <LogList\n          app={CoreApp.Dashboard}\n          containerElement={logsContainer}\n          eventBus={eventBus}\n          initialScrollPosition={initialScrollPosition}\n          logs={logs}\n          loadMore={enableInfiniteScrolling ? loadMoreLogs : undefined}\n          showTime={showTime}\n          sortOrder={sortOrder}\n          timeRange={data.timeRange}\n          timeZone={timeZone}\n          wrapLogMessage={wrapLogMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginBottom: theme.spacing(1.5),\n    minHeight: '100%',\n    maxHeight: '100%',\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n  }),\n});\n","import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class LogsPanelSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'logs-new',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    const { dataSummary: ds } = builder;\n\n    // Require a string & time field\n    if (!ds.hasData || !ds.hasTimeField || !ds.hasStringField) {\n      return;\n    }\n\n    if (ds.preferredVisualisationType === 'logs') {\n      list.append({ name: SuggestionName.Logs, score: VisualizationSuggestionScore.Best });\n    } else {\n      list.append({ name: SuggestionName.Logs });\n    }\n  }\n}\n","import { PanelPlugin, LogsSortOrder, LogsDedupStrategy, LogsDedupDescription } from '@grafana/data';\n\nimport { LogsPanel } from './LogsPanel';\nimport { Options } from './panelcfg.gen';\nimport { LogsPanelSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options>(LogsPanel)\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'showTime',\n        name: 'Time',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'wrapLogMessage',\n        name: 'Wrap lines',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'enableLogDetails',\n        name: 'Enable log details',\n        description: '',\n        defaultValue: true,\n      })\n      .addBooleanSwitch({\n        path: 'enableInfiniteScrolling',\n        name: 'Enable infinite scrolling',\n        description: 'Experimental. Request more results by scrolling to the bottom of the logs list.',\n        defaultValue: false,\n      })\n      .addRadio({\n        path: 'dedupStrategy',\n        name: 'Deduplication',\n        description: '',\n        settings: {\n          options: [\n            { value: LogsDedupStrategy.none, label: 'None', description: LogsDedupDescription[LogsDedupStrategy.none] },\n            {\n              value: LogsDedupStrategy.exact,\n              label: 'Exact',\n              description: LogsDedupDescription[LogsDedupStrategy.exact],\n            },\n            {\n              value: LogsDedupStrategy.numbers,\n              label: 'Numbers',\n              description: LogsDedupDescription[LogsDedupStrategy.numbers],\n            },\n            {\n              value: LogsDedupStrategy.signature,\n              label: 'Signature',\n              description: LogsDedupDescription[LogsDedupStrategy.signature],\n            },\n          ],\n        },\n        defaultValue: LogsDedupStrategy.none,\n      })\n      .addRadio({\n        path: 'sortOrder',\n        name: 'Order',\n        description: '',\n        settings: {\n          options: [\n            { value: LogsSortOrder.Descending, label: 'Newest first' },\n            { value: LogsSortOrder.Ascending, label: 'Oldest first' },\n          ],\n        },\n        defaultValue: LogsSortOrder.Descending,\n      });\n  })\n  .setSuggestionsSupplier(new LogsPanelSuggestionsSupplier());\n","import { css, cx } from '@emotion/css';\nimport { groupBy } from 'lodash';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { isObservable, lastValueFrom } from 'rxjs';\n\nimport {\n  AbsoluteTimeRange,\n  CoreApp,\n  DataFrame,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataQueryResponse,\n  DataSourceApi,\n  dateTimeForTimeZone,\n  Field,\n  GrafanaTheme2,\n  hasLogsContextSupport,\n  hasLogsContextUiSupport,\n  Labels,\n  LogRowContextOptions,\n  LogRowModel,\n  LogsSortOrder,\n  PanelData,\n  PanelProps,\n  TimeRange,\n  TimeZone,\n  toUtc,\n  urlUtil,\n  LogSortOrderChangeEvent,\n  LoadingState,\n} from '@grafana/data';\nimport { convertRawToRange } from '@grafana/data/src/datetime/rangeutil';\nimport { config, getAppEvents } from '@grafana/runtime';\nimport { ScrollContainer, usePanelContext, useStyles2 } from '@grafana/ui';\nimport { getFieldLinksForExplore } from 'app/features/explore/utils/links';\nimport { InfiniteScroll } from 'app/features/logs/components/InfiniteScroll';\nimport { LogRowContextModal } from 'app/features/logs/components/log-context/LogRowContextModal';\nimport { PanelDataErrorView } from 'app/features/panel/components/PanelDataErrorView';\nimport { combineResponses } from 'app/plugins/datasource/loki/mergeResponses';\n\nimport { createAndCopyShortLink, getLogsPermalinkRange } from '../../../core/utils/shortLinks';\nimport { LogLabels } from '../../../features/logs/components/LogLabels';\nimport { LogRows } from '../../../features/logs/components/LogRows';\nimport { COMMON_LABELS, dataFrameToLogsModel, dedupLogRows } from '../../../features/logs/logsModel';\n\nimport {\n  isIsFilterLabelActive,\n  isOnClickFilterLabel,\n  isOnClickFilterOutLabel,\n  isOnClickFilterOutString,\n  isOnClickFilterString,\n  isOnClickHideField,\n  isOnClickShowField,\n  isOnNewLogsReceivedType,\n  isReactNodeArray,\n  onNewLogsReceivedType,\n  Options,\n} from './types';\nimport { useDatasourcesFromTargets } from './useDatasourcesFromTargets';\n\ninterface LogsPanelProps extends PanelProps<Options> {\n  /**\n   * Adds a key => value filter to the query referenced by the provided DataFrame refId. Used by Log details and Logs table.\n   * onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n   *\n   * Adds a negative key => value filter to the query referenced by the provided DataFrame refId. Used by Log details and Logs table.\n   * onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n   *\n   * Adds a string filter to the query referenced by the provided DataFrame refId. Used by the Logs popover menu.\n   * onClickFilterOutString?: (value: string, refId?: string) => void;\n   *\n   * Removes a string filter to the query referenced by the provided DataFrame refId. Used by the Logs popover menu.\n   * onClickFilterString?: (value: string, refId?: string) => void;\n   *\n   * Determines if a given key => value filter is active in a given query. Used by Log details.\n   * isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n   *\n   * Array of field names to display instead of the log line. Pass a list of fields or an empty array to enable hide/show fields in Log Details.\n   * displayedFields?: string[]\n   *\n   * Called from the \"eye\" icon in Log Details to request showing the displayed field. If ommited, a default implementation is used.\n   * onClickShowField?: (key: string) => void;\n   *\n   * Called from the \"eye\" icon in Log Details to request hiding the displayed field. If ommited, a default implementation is used.\n   * onClickHideField?: (key: string) => void;\n   *\n   * Passed to the LogRowMenuCell component to be rendered before the default actions in the menu.\n   * logRowMenuIconsBefore?: ReactNode[];\n   *\n   * Passed to the LogRowMenuCell component to be rendered after the default actions in the menu.\n   * logRowMenuIconsAfter?: ReactNode[];\n   *\n   * Callback to be invoked when enableInfiniteScrolling and new logs have been received after an scroll event.\n   * onNewLogsReceived?: (allLogs: DataFrame[], newLogs: DataFrame[]) => void;\n   */\n}\ninterface LogsPermalinkUrlState {\n  logs?: {\n    id?: string;\n  };\n}\n\nconst noCommonLabels: Labels = {};\n\nexport const LogsPanel = ({\n  data,\n  timeZone,\n  fieldConfig,\n  options: {\n    showLabels,\n    showTime,\n    wrapLogMessage,\n    showCommonLabels,\n    prettifyLogMessage,\n    sortOrder,\n    dedupStrategy,\n    enableLogDetails,\n    showLogContextToggle,\n    onClickFilterLabel,\n    onClickFilterOutLabel,\n    onClickFilterOutString,\n    onClickFilterString,\n    isFilterLabelActive,\n    logRowMenuIconsBefore,\n    logRowMenuIconsAfter,\n    enableInfiniteScrolling,\n    onNewLogsReceived,\n    ...options\n  },\n  id,\n}: LogsPanelProps) => {\n  const isAscending = sortOrder === LogsSortOrder.Ascending;\n  const style = useStyles2(getStyles);\n  const logsContainerRef = useRef<HTMLDivElement>(null);\n  const [contextRow, setContextRow] = useState<LogRowModel | null>(null);\n  const [scrollElement, setScrollElement] = useState<HTMLDivElement | null>(null);\n  const [displayedFields, setDisplayedFields] = useState<string[]>(options.displayedFields ?? []);\n  // Loading state to be passed as a prop to the <InfiniteScroll> component\n  const [infiniteScrolling, setInfiniteScrolling] = useState(false);\n  // Loading ref to prevent firing multiple requests\n  const loadingRef = useRef(false);\n  const [panelData, setPanelData] = useState(data);\n  const dataSourcesMap = useDatasourcesFromTargets(panelData.request?.targets);\n  // Prevents the scroll position to change when new data from infinite scrolling is received\n  const keepScrollPositionRef = useRef(false);\n  let closeCallback = useRef<() => void>();\n  const { eventBus, onAddAdHocFilter } = usePanelContext();\n\n  useEffect(() => {\n    getAppEvents().publish(\n      new LogSortOrderChangeEvent({\n        order: sortOrder,\n      })\n    );\n  }, [sortOrder]);\n\n  const onLogRowHover = useCallback(\n    (row?: LogRowModel) => {\n      if (row) {\n        eventBus.publish(\n          new DataHoverEvent({\n            point: {\n              time: row.timeEpochMs,\n            },\n          })\n        );\n      }\n    },\n    [eventBus]\n  );\n\n  const onLogContainerMouseLeave = useCallback(() => {\n    eventBus.publish(new DataHoverClearEvent());\n  }, [eventBus]);\n\n  const onCloseContext = useCallback(() => {\n    setContextRow(null);\n    if (closeCallback.current) {\n      closeCallback.current();\n    }\n  }, [closeCallback]);\n\n  const onOpenContext = useCallback(\n    (row: LogRowModel, onClose: () => void) => {\n      setContextRow(row);\n      closeCallback.current = onClose;\n    },\n    [closeCallback]\n  );\n\n  const showContextToggle = useCallback(\n    (row: LogRowModel): boolean => {\n      if (\n        !row.dataFrame.refId ||\n        !dataSourcesMap ||\n        (!showLogContextToggle &&\n          panelData.request?.app !== CoreApp.Dashboard &&\n          panelData.request?.app !== CoreApp.PanelEditor &&\n          panelData.request?.app !== CoreApp.PanelViewer)\n      ) {\n        return false;\n      }\n\n      const dataSource = dataSourcesMap.get(row.dataFrame.refId);\n      return hasLogsContextSupport(dataSource);\n    },\n    [dataSourcesMap, showLogContextToggle, panelData.request?.app]\n  );\n\n  const showPermaLink = useCallback(() => {\n    return !(\n      panelData.request?.app !== CoreApp.Dashboard &&\n      panelData.request?.app !== CoreApp.PanelEditor &&\n      panelData.request?.app !== CoreApp.PanelViewer\n    );\n  }, [panelData.request?.app]);\n\n  const getLogRowContext = useCallback(\n    async (row: LogRowModel, origRow: LogRowModel, options: LogRowContextOptions): Promise<DataQueryResponse> => {\n      if (!origRow.dataFrame.refId || !dataSourcesMap) {\n        return Promise.resolve({ data: [] });\n      }\n\n      const query = panelData.request?.targets[0];\n      if (!query) {\n        return Promise.resolve({ data: [] });\n      }\n\n      const dataSource = dataSourcesMap.get(origRow.dataFrame.refId);\n      if (!hasLogsContextSupport(dataSource)) {\n        return Promise.resolve({ data: [] });\n      }\n\n      options.scopedVars = panelData.request?.scopedVars;\n\n      return dataSource.getLogRowContext(row, options, query);\n    },\n    [panelData.request?.targets, panelData.request?.scopedVars, dataSourcesMap]\n  );\n\n  const getLogRowContextUi = useCallback(\n    (origRow: LogRowModel, runContextQuery?: () => void): React.ReactNode => {\n      if (!origRow.dataFrame.refId || !dataSourcesMap) {\n        return <></>;\n      }\n\n      const query = panelData.request?.targets[0];\n      if (!query) {\n        return <></>;\n      }\n\n      const dataSource = dataSourcesMap.get(origRow.dataFrame.refId);\n      if (!hasLogsContextUiSupport(dataSource)) {\n        return <></>;\n      }\n\n      if (!dataSource.getLogRowContextUi) {\n        return <></>;\n      }\n\n      return dataSource.getLogRowContextUi(origRow, runContextQuery, query, panelData.request?.scopedVars);\n    },\n    [panelData.request?.targets, panelData.request?.scopedVars, dataSourcesMap]\n  );\n\n  // Important to memoize stuff here, as panel rerenders a lot for example when resizing.\n  const [logRows, deduplicatedRows, commonLabels] = useMemo(() => {\n    const logs = panelData\n      ? dataFrameToLogsModel(panelData.series, panelData.request?.intervalMs, undefined, panelData.request?.targets)\n      : null;\n    const logRows = logs?.rows || [];\n    const commonLabels = logs?.meta?.find((m) => m.label === COMMON_LABELS);\n    const deduplicatedRows = dedupLogRows(logRows, dedupStrategy);\n    return [logRows, deduplicatedRows, commonLabels];\n  }, [dedupStrategy, panelData]);\n\n  const onPermalinkClick = useCallback(\n    async (row: LogRowModel) => {\n      return await copyDashboardUrl(row, logRows, panelData.timeRange);\n    },\n    [panelData.timeRange, logRows]\n  );\n\n  useEffect(() => {\n    if (data.state !== LoadingState.Loading) {\n      setPanelData(data);\n    }\n  }, [data]);\n\n  useLayoutEffect(() => {\n    if (!logsContainerRef.current || !scrollElement || keepScrollPositionRef.current) {\n      keepScrollPositionRef.current = false;\n      return;\n    }\n    /**\n     * In dashboards, users with newest logs at the bottom have the expectation of keeping the scroll at the bottom\n     * when new data is received. See https://github.com/grafana/grafana/pull/37634\n     */\n    if (panelData.request?.app === CoreApp.Dashboard || panelData.request?.app === CoreApp.PanelEditor) {\n      scrollElement.scrollTo(0, isAscending ? logsContainerRef.current.scrollHeight : 0);\n    }\n  }, [panelData.request?.app, isAscending, scrollElement, logRows]);\n\n  const getFieldLinks = useCallback(\n    (field: Field, rowIndex: number) => {\n      return getFieldLinksForExplore({ field, rowIndex, range: panelData.timeRange });\n    },\n    [panelData]\n  );\n\n  /**\n   * Scrolls the given row into view.\n   */\n  const scrollIntoView = useCallback(\n    (row: HTMLElement) => {\n      scrollElement?.scrollTo({\n        top: row.offsetTop,\n        behavior: 'smooth',\n      });\n    },\n    [scrollElement]\n  );\n\n  const handleOnClickFilterLabel = useCallback(\n    (key: string, value: string) => {\n      onAddAdHocFilter?.({\n        key,\n        value,\n        operator: '=',\n      });\n    },\n    [onAddAdHocFilter]\n  );\n\n  const handleOnClickFilterOutLabel = useCallback(\n    (key: string, value: string) => {\n      onAddAdHocFilter?.({\n        key,\n        value,\n        operator: '!=',\n      });\n    },\n    [onAddAdHocFilter]\n  );\n\n  const showField = useCallback(\n    (key: string) => {\n      const index = displayedFields?.indexOf(key);\n      if (index === -1) {\n        setDisplayedFields(displayedFields?.concat(key));\n      }\n    },\n    [displayedFields]\n  );\n\n  const hideField = useCallback(\n    (key: string) => {\n      const index = displayedFields?.indexOf(key);\n      if (index !== undefined && index > -1) {\n        setDisplayedFields(displayedFields?.filter((k) => key !== k));\n      }\n    },\n    [displayedFields]\n  );\n\n  useEffect(() => {\n    if (options.displayedFields) {\n      setDisplayedFields(options.displayedFields);\n    }\n  }, [options.displayedFields]);\n\n  const loadMoreLogs = useCallback(\n    async (scrollRange: AbsoluteTimeRange) => {\n      if (!data.request || !config.featureToggles.logsInfiniteScrolling || loadingRef.current) {\n        return;\n      }\n\n      loadingRef.current = true;\n      setInfiniteScrolling(true);\n\n      const onNewLogsReceivedCallback = isOnNewLogsReceivedType(onNewLogsReceived) ? onNewLogsReceived : undefined;\n\n      let newSeries: DataFrame[] = [];\n      try {\n        newSeries = await requestMoreLogs(dataSourcesMap, panelData, scrollRange, timeZone, onNewLogsReceivedCallback);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        setInfiniteScrolling(false);\n        loadingRef.current = false;\n      }\n\n      keepScrollPositionRef.current = true;\n      setPanelData({\n        ...panelData,\n        series: newSeries,\n      });\n    },\n    [data.request, dataSourcesMap, onNewLogsReceived, panelData, timeZone]\n  );\n\n  if (!data || logRows.length === 0) {\n    return <PanelDataErrorView fieldConfig={fieldConfig} panelId={id} data={data} needsStringField />;\n  }\n\n  const renderCommonLabels = () => (\n    <div className={cx(style.labelContainer, isAscending && style.labelContainerAscending)}>\n      <span className={style.label}>Common labels:</span>\n      <LogLabels\n        labels={typeof commonLabels?.value === 'object' ? commonLabels?.value : noCommonLabels}\n        emptyMessage=\"(no common labels)\"\n      />\n    </div>\n  );\n\n  // Passing callbacks control the display of the filtering buttons. We want to pass it only if onAddAdHocFilter is defined.\n  const defaultOnClickFilterLabel = onAddAdHocFilter ? handleOnClickFilterLabel : undefined;\n  const defaultOnClickFilterOutLabel = onAddAdHocFilter ? handleOnClickFilterOutLabel : undefined;\n\n  const onClickShowField = isOnClickShowField(options.onClickShowField) ? options.onClickShowField : showField;\n  const onClickHideField = isOnClickHideField(options.onClickHideField) ? options.onClickHideField : hideField;\n\n  return (\n    <>\n      {contextRow && (\n        <LogRowContextModal\n          open={contextRow !== null}\n          row={contextRow}\n          onClose={onCloseContext}\n          getRowContext={(row, options) => getLogRowContext(row, contextRow, options)}\n          logsSortOrder={sortOrder}\n          timeZone={timeZone}\n          getLogRowContextUi={getLogRowContextUi}\n        />\n      )}\n      <ScrollContainer ref={(scrollElement) => setScrollElement(scrollElement)}>\n        <div onMouseLeave={onLogContainerMouseLeave} className={style.container} ref={logsContainerRef}>\n          {showCommonLabels && !isAscending && renderCommonLabels()}\n          <InfiniteScroll\n            loading={infiniteScrolling}\n            loadMoreLogs={enableInfiniteScrolling ? loadMoreLogs : undefined}\n            range={data.timeRange}\n            timeZone={timeZone}\n            rows={logRows}\n            scrollElement={scrollElement}\n            sortOrder={sortOrder}\n          >\n            <LogRows\n              scrollElement={scrollElement}\n              scrollIntoView={scrollIntoView}\n              permalinkedRowId={getLogsPanelState()?.logs?.id ?? undefined}\n              onPermalinkClick={showPermaLink() ? onPermalinkClick : undefined}\n              logRows={logRows}\n              showContextToggle={showContextToggle}\n              deduplicatedRows={deduplicatedRows}\n              dedupStrategy={dedupStrategy}\n              showLabels={showLabels}\n              showTime={showTime}\n              wrapLogMessage={wrapLogMessage}\n              prettifyLogMessage={prettifyLogMessage}\n              timeZone={timeZone}\n              getFieldLinks={getFieldLinks}\n              logsSortOrder={sortOrder}\n              enableLogDetails={enableLogDetails}\n              previewLimit={isAscending ? logRows.length : undefined}\n              onLogRowHover={onLogRowHover}\n              app={CoreApp.Dashboard}\n              onOpenContext={onOpenContext}\n              onClickFilterLabel={\n                isOnClickFilterLabel(onClickFilterLabel) ? onClickFilterLabel : defaultOnClickFilterLabel\n              }\n              onClickFilterOutLabel={\n                isOnClickFilterOutLabel(onClickFilterOutLabel) ? onClickFilterOutLabel : defaultOnClickFilterOutLabel\n              }\n              onClickFilterString={isOnClickFilterString(onClickFilterString) ? onClickFilterString : undefined}\n              onClickFilterOutString={\n                isOnClickFilterOutString(onClickFilterOutString) ? onClickFilterOutString : undefined\n              }\n              isFilterLabelActive={isIsFilterLabelActive(isFilterLabelActive) ? isFilterLabelActive : undefined}\n              displayedFields={displayedFields}\n              onClickShowField={displayedFields !== undefined ? onClickShowField : undefined}\n              onClickHideField={displayedFields !== undefined ? onClickHideField : undefined}\n              logRowMenuIconsBefore={isReactNodeArray(logRowMenuIconsBefore) ? logRowMenuIconsBefore : undefined}\n              logRowMenuIconsAfter={isReactNodeArray(logRowMenuIconsAfter) ? logRowMenuIconsAfter : undefined}\n              // Ascending order causes scroll to stick to the bottom, so previewing is futile\n              renderPreview={isAscending ? false : true}\n            />\n          </InfiniteScroll>\n          {showCommonLabels && isAscending && renderCommonLabels()}\n        </div>\n      </ScrollContainer>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginBottom: theme.spacing(1.5),\n  }),\n  labelContainer: css({\n    margin: theme.spacing(0, 0, 0.5, 0.5),\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  labelContainerAscending: css({\n    margin: theme.spacing(0.5, 0, 0.5, 0),\n  }),\n  label: css({\n    marginRight: theme.spacing(0.5),\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightMedium,\n  }),\n});\n\nfunction getLogsPanelState(): LogsPermalinkUrlState | undefined {\n  const urlParams = urlUtil.getUrlSearchParams();\n  const panelStateEncoded = urlParams?.panelState;\n  if (\n    panelStateEncoded &&\n    Array.isArray(panelStateEncoded) &&\n    panelStateEncoded?.length > 0 &&\n    typeof panelStateEncoded[0] === 'string'\n  ) {\n    try {\n      return JSON.parse(panelStateEncoded[0]);\n    } catch (e) {\n      console.error('error parsing logsPanelState', e);\n    }\n  }\n\n  return undefined;\n}\n\nasync function copyDashboardUrl(row: LogRowModel, rows: LogRowModel[], timeRange: TimeRange) {\n  // this is an extra check, to be sure that we are not\n  // creating permalinks for logs without an id-field.\n  // normally it should never happen, because we do not\n  // display the permalink button in such cases.\n  if (row.rowId === undefined || !row.dataFrame.refId) {\n    return;\n  }\n\n  // get panel state, add log-row-id\n  const panelState = {\n    logs: { id: row.uid },\n  };\n\n  // Grab the current dashboard URL\n  const currentURL = new URL(window.location.href);\n\n  // Add panel state containing the rowId, and absolute time range from the current query, but leave everything else the same, if the user is in edit mode when grabbing the link, that's what will be linked to, etc.\n  currentURL.searchParams.set('panelState', JSON.stringify(panelState));\n  const range = getLogsPermalinkRange(row, rows, {\n    from: toUtc(timeRange.from).valueOf(),\n    to: toUtc(timeRange.to).valueOf(),\n  });\n  currentURL.searchParams.set('from', range.from.toString());\n  currentURL.searchParams.set('to', range.to.toString());\n\n  await createAndCopyShortLink(currentURL.toString());\n\n  return Promise.resolve();\n}\n\nexport async function requestMoreLogs(\n  dataSourcesMap: Map<string, DataSourceApi>,\n  panelData: PanelData,\n  timeRange: AbsoluteTimeRange,\n  timeZone: TimeZone,\n  onNewLogsReceived?: onNewLogsReceivedType\n) {\n  if (!panelData.request) {\n    return [];\n  }\n\n  const range: TimeRange = convertRawToRange({\n    from: dateTimeForTimeZone(timeZone, timeRange.from),\n    to: dateTimeForTimeZone(timeZone, timeRange.to),\n  });\n\n  const targetGroups = groupBy(panelData.request.targets, 'datasource.uid');\n  const dataRequests = [];\n\n  for (const uid in targetGroups) {\n    const dataSource = dataSourcesMap.get(panelData.request.targets[0].refId);\n    if (!dataSource) {\n      console.warn(`Could not resolve data source for target ${panelData.request.targets[0].refId}`);\n      continue;\n    }\n    dataRequests.push(\n      dataSource.query({\n        ...panelData.request,\n        range,\n        targets: targetGroups[uid],\n      })\n    );\n  }\n\n  const responses = await Promise.all(dataRequests);\n  let updatedSeries = panelData.series;\n  for (const response of responses) {\n    const newData = isObservable(response) ? await lastValueFrom(response) : response;\n\n    updatedSeries = combineResponses(\n      {\n        data: updatedSeries,\n      },\n      { data: newData.data }\n    ).data;\n\n    if (onNewLogsReceived) {\n      onNewLogsReceived(updatedSeries, newData.data);\n    }\n  }\n\n  return updatedSeries;\n}\n","import React, { ReactNode } from 'react';\n\nimport { DataFrame } from '@grafana/data';\n\nexport type { Options } from './panelcfg.gen';\n\ntype onClickFilterLabelType = (key: string, value: string, frame?: DataFrame) => void;\ntype onClickFilterOutLabelType = (key: string, value: string, frame?: DataFrame) => void;\ntype onClickFilterValueType = (value: string, refId?: string) => void;\ntype onClickFilterOutStringType = (value: string, refId?: string) => void;\ntype isFilterLabelActiveType = (key: string, value: string, refId?: string) => Promise<boolean>;\ntype isOnClickShowFieldType = (value: string) => void;\ntype isOnClickHideFieldType = (value: string) => void;\nexport type onNewLogsReceivedType = (allLogs: DataFrame[], newLogs: DataFrame[]) => void;\n\nexport function isOnClickFilterLabel(callback: unknown): callback is onClickFilterLabelType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterOutLabel(callback: unknown): callback is onClickFilterOutLabelType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterString(callback: unknown): callback is onClickFilterValueType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterOutString(callback: unknown): callback is onClickFilterOutStringType {\n  return typeof callback === 'function';\n}\n\nexport function isIsFilterLabelActive(callback: unknown): callback is isFilterLabelActiveType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickShowField(callback: unknown): callback is isOnClickShowFieldType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickHideField(callback: unknown): callback is isOnClickHideFieldType {\n  return typeof callback === 'function';\n}\n\nexport function isOnNewLogsReceivedType(callback: unknown): callback is onNewLogsReceivedType {\n  return typeof callback === 'function';\n}\n\nexport function isReactNodeArray(node: unknown): node is ReactNode[] {\n  return Array.isArray(node) && node.every(React.isValidElement);\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\n\nexport const useDatasourcesFromTargets = (targets: DataQuery[] | undefined): Map<string, DataSourceApi> => {\n  const [dataSourcesMap, setDataSourcesMap] = useState(new Map<string, DataSourceApi>());\n\n  useAsync(async () => {\n    if (!targets) {\n      setDataSourcesMap(new Map<string, DataSourceApi>());\n      return;\n    }\n\n    const raw = await Promise.all(\n      targets\n        .filter((target) => !!target.datasource?.uid)\n        .map((target) =>\n          getDataSourceSrv()\n            .get(target.datasource?.uid)\n            .then((ds) => ({ key: target.refId, ds }))\n        )\n    );\n\n    setDataSourcesMap(new Map<string, DataSourceApi>(raw.map(({ key, ds }) => [key, ds])));\n  }, [targets]);\n\n  return dataSourcesMap;\n};\n"],"names":["data","timeZone","fieldConfig","dedupStrategy","enableInfiniteScrolling","onNewLogsReceived","showTime","sortOrder","wrapLogMessage","id","style","getStyles","logsContainer","setLogsContainer","panelData","setPanelData","dataSourcesMap","useDatasourcesFromTargets","keepScrollPositionRef","loadingRef","eventBus","logs","logsModel","loadMoreLogs","scrollRange","config","onNewLogsReceivedCallback","newSeries","e","initialScrollPosition","element","LogList","PanelDataErrorView","theme","LogsPanelSuggestionsSupplier","builder","list","ds","PanelPlugin","noCommonLabels","LogsPanel","showLabels","showCommonLabels","prettifyLogMessage","enableLogDetails","showLogContextToggle","onClickFilterLabel","onClickFilterOutLabel","onClickFilterOutString","onClickFilterString","isFilterLabelActive","logRowMenuIconsBefore","logRowMenuIconsAfter","options","isAscending","logsContainerRef","contextRow","setContextRow","scrollElement","setScrollElement","displayedFields","setDisplayedFields","infiniteScrolling","setInfiniteScrolling","closeCallback","onAddAdHocFilter","onLogRowHover","row","onLogContainerMouseLeave","onCloseContext","onOpenContext","onClose","showContextToggle","dataSource","showPermaLink","getLogRowContext","origRow","query","getLogRowContextUi","runContextQuery","logRows","deduplicatedRows","commonLabels","m","onPermalinkClick","copyDashboardUrl","getFieldLinks","field","rowIndex","scrollIntoView","handleOnClickFilterLabel","key","value","handleOnClickFilterOutLabel","showField","hideField","index","k","requestMoreLogs","renderCommonLabels","defaultOnClickFilterLabel","defaultOnClickFilterOutLabel","onClickShowField","onClickHideField","getLogsPanelState","panelStateEncoded","rows","timeRange","panelState","currentURL","range","targetGroups","dataRequests","uid","responses","updatedSeries","response","newData","isOnClickFilterLabel","callback","isOnClickFilterOutLabel","isOnClickFilterString","isOnClickFilterOutString","isIsFilterLabelActive","isOnClickShowField","isOnClickHideField","isOnNewLogsReceivedType","isReactNodeArray","node","targets","setDataSourcesMap","raw","target"],"sourceRoot":""}