{"version":3,"file":"ServiceAccountsPage.2042ea8c386828852a87.js","mappings":"sMAsCO,MAAMA,EAAiB,CAAC,CAC7B,UAAAC,EACA,MAAAC,EACA,OAAAC,EACA,MAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,yBAAAC,EACA,MAAAC,EAAQ,GACR,aAAAC,EACA,aAAAC,EACA,SAAAC,EACA,MAAAC,EACA,UAAAC,CACF,IAAa,CACX,KAAM,CAAC,CAAE,QAAAC,EAAS,MAAOC,EAAef,GAAS,CAAC,CAAE,EAAGgB,CAAY,KAAI,KAAW,SAAY,CAC5F,GAAI,CACF,GAAIhB,EACF,OAAOA,EAET,GAAIQ,GAAiBE,GAAc,OACjC,OAAOA,EAGT,GAAI,KAAW,cAAc,sBAAoB,mBAAmB,GAAKT,EAAS,EAChF,OAAO,QAAM,MAAeA,EAAQC,CAAK,CAE7C,MAAY,CAEV,QAAQ,MAAM,uBAAuB,CACvC,CACA,MAAO,CAAC,CACV,EAAG,CAACA,EAAOD,EAAQS,EAAcV,CAAK,CAAC,KAEvC,aAAU,IAAM,CAEVE,GACFc,EAAa,CAEjB,EAAG,CAACA,EAAcd,CAAK,CAAC,EAExB,MAAMe,EAAgB,MAAOjB,GAAkB,CACxCQ,EAGMC,GACTA,EAAaT,EAAOC,EAAQC,CAAK,GAHjC,QAAM,MAAgBF,EAAOC,EAAQC,CAAK,EAC1C,MAAMc,EAAa,EAIvB,EAEME,EACJ,KAAW,cAAc,sBAAoB,kBAAkB,GAC/D,KAAW,cAAc,sBAAoB,qBAAqB,EAEpE,SACE,OAAC,KACC,aAAAH,EACA,UAAAhB,EACA,cAAAkB,EACA,kBAAAd,EACA,YAAAC,EACA,UAAWU,GAAWD,EACtB,SAAAR,EACA,kBAAAC,EACA,yBAAAC,EACA,cAAa,GACb,MAAAC,EACA,eAAAU,EACA,SAAAP,EACA,MAAAC,CAAA,CACF,CAEJ,C,yEClGA,MAAMO,EADa,OAAO,OAAO,GAAO,EAAE,OAAQC,GAAMA,IAAM,IAAQ,IAAI,EAC/C,IAAKA,IAAO,CAAE,MAAOA,EAAG,MAAOA,CAAE,EAAE,EAEvD,SAASC,EAAc,CAAE,MAAAC,EAAO,SAAAC,EAAU,aAAcC,EAAW,QAAAC,EAAS,UAAAC,EAAW,GAAGC,CAAU,EAAU,CACnH,SACE,OAAC,MACC,QAAAF,EACA,MAAAH,EACA,QAAAH,EACA,SAAWS,GAAQL,EAASK,EAAI,OAAS,IAAQ,IAAI,EACrD,YAAY,iBACZ,aAAYJ,EACZ,UAAAE,EACC,GAAGC,CAAA,CACN,CAEJ,C,6ZCYO,MAAME,EAAsB,CAAC,CAClC,SAAAC,EACA,aAAAC,EACA,YAAA3B,EACA,oBAAA4B,EACA,UAAAC,EACA,SAAAC,EACA,gBAAAC,EACA,WAAAC,EACA,WAAAC,GACA,aAAAC,EACA,YAAAC,GACA,UAAA1B,CACF,IAAgC,CAC9B,MAAM2B,KAA4C,WAChD,IAAM,CACJ,CACE,GAAI,YACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAlB,CAAM,EAAG,IAAK,CAAE,SAAAmB,CAAS,CAAE,IACnCC,EAAepB,EAAOmB,EAAU5B,EAAW,WAAW,CAEjE,EACA,CACE,GAAI,OACJ,OAAQ,UACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAS,CAAM,EAAG,IAAK,CAAE,SAAAmB,CAAS,CAAE,IACnCC,EAAepB,EAAOmB,EAAU5B,CAAS,EAElD,SAAU,QACZ,EACA,CACE,GAAI,KACJ,OAAQ,KACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAS,CAAM,EAAG,IAAK,CAAE,SAAAmB,CAAS,CAAE,IACnCC,EAAepB,EAAOmB,EAAU5B,EAAW,IAAI,CAE1D,EACA,CACE,GAAI,OACJ,OAAQ,QACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAS,CAAM,EAAG,IAAK,CAAE,SAAAmB,CAAS,CAAE,IACnCE,EAAYrB,EAAOmB,EAAU5B,EAAWT,EAAa2B,CAAY,CAE5E,EACA,CACE,GAAI,SACJ,OAAQ,SACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAT,CAAM,EAAG,IAAK,CAAE,SAAAmB,CAAS,CAAE,IACnCC,EAAepB,EAAOmB,EAAU5B,EAAW,QAAQ,CAE9D,EACA,CACE,GAAI,UACJ,OAAQ,GACR,KAAM,CAAC,CAAE,IAAK,CAAE,SAAA4B,CAAS,CAAE,IAClBG,GAAeH,EAAU5B,EAAWsB,EAAiBD,EAAUD,EAAWD,CAAmB,CAExG,CACF,EACA,CAACnB,EAAWsB,EAAiBF,EAAWC,EAAUF,EAAqBD,EAAc3B,CAAW,CAClG,EACA,SACE,QAACyC,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,EAC/B,oBAACC,EAAA,EAAgB,CAAC,QAAAN,EAAkB,KAAMV,EAAU,SAAWiB,GAAY,OAAOA,EAAQ,EAAE,EAAG,EAC9FX,GAAcC,GAAa,MAC1B,OAACQ,EAAA,EAAK,CAAC,eAAgB,WACrB,mBAACG,EAAA,EAAU,CAAC,cAAeX,GAAY,YAAAE,GAA0B,WAAYD,CAAA,CAAc,EAC7F,GAEJ,CAEJ,EAEMI,EAAiB,CACrBpB,EACAmB,EACA5B,EACAoC,IACG,CACH,GAAIpC,EACF,OAAOoC,IAAe,eAAc,OAAC,IAAQ,CAAC,OAAM,GAAC,MAAO,GAAI,OAAQ,GAAI,KAAK,OAAC,IAAQ,CAAC,MAAO,IAAK,EAEzG,MAAMC,EAAO,wBAAwBT,EAAS,GAAG,GAC3CjB,EAAY,0BAA0B,IAAI,WAChD,OAAQyB,EAAY,CAClB,IAAK,YACH,SACE,OAAC,KAAE,aAAYzB,EAAW,KAAA0B,EACxB,mBAACC,EAAA,EAAM,CAAC,IAAK7B,EAAO,IAAK,cAAe,EAC1C,EAEJ,IAAK,KACH,SACE,OAAC8B,EAAA,EAAQ,CAAC,KAAAF,EAAY,aAAY1B,EAAW,MAAM,YAAY,OAAQ,GACpE,SAAAiB,EAAS,MACZ,EAEJ,IAAK,SACH,SACE,QAACI,EAAA,EAAK,CAAC,WAAW,SAChB,oBAACQ,EAAA,EAAI,CAAC,KAAK,kBAAmB,MAC9B,OAACD,EAAA,EAAQ,CAAC,KAAAF,EAAY,aAAY1B,EAAW,MAAM,UAAU,OAAQ,GAClE,SAAAF,GAAS,YACZ,GACF,EAEJ,QACE,SACE,OAAC8B,EAAA,EAAQ,CAAC,KAAAF,EAAY,aAAY1B,EAAW,MAAM,UAAU,OAAQ,GAClE,SAAAF,CAAA,CACH,CAEN,CACF,EAEMqB,EAAc,CAClBrB,EACAmB,EACA5B,EACAT,EACA2B,IACG,CACH,MAAMuB,EACJ,KAAW,cAAc,sBAAoB,eAAe,GAC5D,KAAW,cAAc,sBAAoB,mBAAmB,EAC5DC,EAAgB,KAAW,wBAAwB,sBAAoB,qBAAsBd,CAAQ,EAE3G,OAAI5B,KACK,OAAC,IAAQ,CAAC,MAAO,IAAK,EAEtB,KAAW,6BAA6B,EAC7CyC,MACE,OAACxD,EAAA,GACC,OAAQ2C,EAAS,GACjB,MAAOA,EAAS,MAChB,UAAWnB,EACX,MAAOmB,EAAS,OAAS,CAAC,EAC1B,kBAAoBe,GAAYzB,EAAayB,EAASf,CAAQ,EAC9D,YAAArC,EACA,kBAAmB,CAACmD,EACpB,SAAUd,EAAS,YAAcA,EAAS,WAC1C,MAAO,GACT,KAGF,OAACpB,EAAA,GACC,aAAW,OACX,MAAAC,EACA,SAAUmB,EAAS,YAAc,CAACc,GAAiBd,EAAS,WAC5D,SAAWe,GAAYzB,EAAayB,EAASf,CAAQ,EACvD,CAGN,EAEMG,GAAiB,CACrBH,EACA5B,EACAsB,EACAD,EACAD,EACAD,IAEInB,KACK,OAAC,IAAQ,CAAC,MAAO,IAAK,EAErB4B,EAAS,cA4Bf,OAACI,EAAA,EAAK,CAAC,WAAW,SAAS,eAAe,WACxC,mBAACY,EAAA,GACC,SAAU,GACV,KAAK,OACL,KAAK,KACL,QAAS,4DACX,EACF,KAlCA,QAACZ,EAAA,EAAK,CAAC,WAAW,SAAS,eAAe,WACvC,eAAW,cAAc,sBAAoB,oBAAoB,GAAK,CAACJ,EAAS,WAC/E,OAACiB,EAAA,GAAM,CAAC,QAAS,IAAMvB,EAAgBM,CAAQ,EAAG,SAAUA,EAAS,WAAY,qBAEjF,EAED,KAAW,wBAAwB,sBAAoB,qBAAsBA,CAAQ,IACnFA,EAAS,cACR,OAACiB,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMxB,EAASO,CAAQ,EAAG,kBAEzE,KAEA,OAACiB,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMzB,EAAUQ,CAAQ,EAAG,mBAE1E,GAGH,KAAW,wBAAwB,sBAAoB,sBAAuBA,CAAQ,MACrF,OAACgB,EAAA,GACC,KAAK,YACL,aAAY,0BAA0BhB,EAAS,IAAI,GACnD,QAAQ,YACR,QAAS,IAAMT,EAAoBS,CAAQ,EAC7C,GAEJ,EAcNZ,EAAoB,YAAc,sB,2BChNlC,SAAS8B,EAAgBC,EAAmB,CAC1C,MAAO,CACL,GAAGA,EAAM,eACX,CACF,CAEA,MAAMC,GAAqB,CACzB,WAAU,KACV,YAAW,KACX,eAAc,KACd,qBAAoB,KACpB,qBAAoB,KACpB,qBAAoB,KACpB,kBAAiB,KACjB,0BAAyB,IAC3B,EAEMC,MAAY,WAAQH,EAAiBE,EAAkB,EAEvDE,EAAmB,CACvB,CAAE,MAAO,MAAO,MAAO,4BAA0B,GAAI,EACrD,CAAE,MAAO,sBAAuB,MAAO,4BAA0B,iBAAkB,EACnF,CAAE,MAAO,WAAY,MAAO,4BAA0B,QAAS,CACjE,EAEIC,EAAA,GAAO,eAAe,yBACxBD,EAAiB,KAAK,CAAE,MAAO,UAAW,MAAO,4BAA0B,QAAS,CAAC,EAGhF,MAAME,GAAqC,CAAC,CACjD,KAAAC,EACA,WAAAC,EACA,WAAA9B,EACA,gBAAA+B,EACA,UAAAvD,EACA,YAAAT,EACA,MAAAiE,EACA,0BAAAC,EACA,YAAAC,GACA,eAAAC,EACA,qBAAAC,GACA,qBAAAC,EACA,qBAAAC,EACA,kBAAAC,EACA,0BAAAC,CACF,IAA0B,CACxB,KAAM,CAACC,GAAgBC,EAAiB,KAAI,YAAS,EAAK,EACpD,CAACC,GAAmBC,EAAoB,KAAI,YAAS,EAAK,EAC1D,CAACC,GAAoBC,EAAqB,KAAI,YAAS,EAAK,EAC5D,CAACC,GAAUC,EAAW,KAAI,YAAS,EAAE,EACrC,CAACC,EAAuBC,CAAwB,KAAI,YAAmC,IAAI,EAC3FC,MAAS,MAAWC,CAAS,KAEnC,aAAU,IAAM,CACdhB,GAAqB,CAAE,qBAAsB,EAAK,CAAC,EAC/C,KAAW,6BAA6B,GAC1CD,EAAe,CAEnB,EAAG,CAACA,EAAgBC,EAAoB,CAAC,EAEzC,MAAMiB,GACJtB,EAAgB,SAAW,GAAKE,IAA8B,4BAA0B,KAAO,CAACD,EAE5FtC,GAAe,MAAO4D,EAAeC,KAAsC,CAC/E,MAAMC,GAAwB,CAAE,GAAGD,GAAgB,KAAAD,CAAW,EAC9DhB,EAAqBkB,EAAqB,EACtC,KAAW,6BAA6B,GAC1CrB,EAAe,CAEnB,EAEMsB,GAAiBxE,GAAkB,CACvCiD,GAAYjD,CAAK,CACnB,EAEMyE,GAAuBzE,GAAqC,CAChEsD,EAAkBtD,CAAK,CACzB,EAEMU,GAAuB4D,GAAsC,CACjEL,EAAyBK,CAAc,EACvCX,GAAqB,EAAI,CAC3B,EAEMe,GAAyB,SAAY,CACrCV,GACFZ,EAAqBY,EAAsB,GAAG,EAEhDW,GAAmB,CACrB,EAEMC,GAAwBN,GAAsC,CAClEL,EAAyBK,CAAc,EACvCT,GAAsB,EAAI,CAC5B,EAEMlD,GAAY,IAAM,CAClBqD,GACFX,EAAqB,CAAE,GAAGW,EAAuB,WAAY,EAAK,CAAC,EAErEa,GAAoB,CACtB,EAEMjE,GAAY0D,GAAsC,CACtDjB,EAAqB,CAAE,GAAGiB,EAAgB,WAAY,EAAM,CAAC,CAC/D,EAEMQ,GAAcR,GAAsC,CACxDL,EAAyBK,CAAc,EACvCb,GAAkB,EAAI,CACxB,EAEMsB,GAAgB,MAAOC,GAA+B,CACtDhB,GACFT,EAA0BS,EAAsB,IAAKgB,EAAOjB,EAAW,CAE3E,EAEMkB,GAAkB,IAAM,CAC5BxB,GAAkB,EAAK,EACvBQ,EAAyB,IAAI,EAC7BF,GAAY,EAAE,CAChB,EAEMY,GAAqB,IAAM,CAC/BhB,GAAqB,EAAK,EAC1BM,EAAyB,IAAI,CAC/B,EAEMY,GAAsB,IAAM,CAChChB,GAAsB,EAAK,EAC3BI,EAAyB,IAAI,CAC/B,EAEMiB,MACJ,OAAC,KACC,UAAU,gBACV,KAAK,2EACL,OAAO,SACP,IAAI,sBACL,0BAED,EAEIC,MACJ,QAAC,QAAK,wHACwG,IAC3GD,EAAA,EACH,EAGF,SACE,OAACE,EAAA,GACC,MAAM,kBACN,SAAAD,GACA,WACE,mBACG,UAACf,IAA4B,KAAW,cAAc,sBAAoB,qBAAqB,MAC9F,OAAC,KAAU,CAAC,KAAK,6BAA6B,QAAQ,UAAU,+BAEhE,EAEJ,EAGF,oBAACgB,EAAA,EAAK,SAAL,CACC,qBAAC7D,EAAA,EAAK,CAAC,eAAe,gBAAgB,KAAK,OACzC,oBAAC8D,EAAA,EAAW,CAAC,KAAI,GACf,mBAACC,EAAA,GACC,UAAWpB,GAAO,YAClB,YAAY,iCACZ,MAAOnB,EACP,SAAUyB,EAAA,CACZ,EACF,KACA,OAACe,EAAA,EAAG,CAAC,aAAc,EACjB,mBAACC,EAAA,GACC,QAAS/C,EACT,SAAUgC,GACV,MAAOzB,CAAA,CACT,EACF,GACF,EACC,CAACzD,GAAa,CAAC6E,IAA4BtB,EAAgB,SAAW,MACrE,OAAC2C,EAAA,GACC,QAAQ,YACR,WAAS,KAAE,uCAAwC,4BAA4B,EACjF,EAED,CAAClG,GAAa6E,OACb,OAACqB,EAAA,GACC,QAAQ,iBACR,UACE,OAAC,MACC,SAAU,CAAC,KAAW,cAAc,sBAAoB,qBAAqB,EAC7E,KAAK,6BACL,KAAK,mBACL,KAAK,KAEL,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,+BAAmB,EAChF,EAEF,WAAS,KAAE,qCAAsC,8CAA8C,EAE/F,mBAAC,KAAK,CAAC,QAAQ,yCAAyC,+FAExD,EACF,GAGAlG,GAAauD,EAAgB,SAAW,OACxC,OAACvC,EAAA,CACC,SAAUuC,EACV,WAAY,GACZ,WAAA/B,EACA,aAAc8B,EACd,YAAaD,EACb,aAAAnC,GACA,YAAA3B,EACA,oBAAA4B,GACA,UAAWkE,GACX,SAAAhE,GACA,gBAAiBkE,GACjB,UAAAvF,CAAA,CACF,EAEDyE,MACC,oBACE,oBAAC0B,EAAA,GACC,OAAQhC,GACR,KAAM,oCAAoCM,EAAsB,IAAI,IAChEA,EAAsB,OACpB,QAAQA,EAAsB,MAAM,iBAAiB,IACnD,QACAA,EAAsB,MACxB,CAAC,GACD,EACN,IACA,YAAY,SACZ,MAAM,yBACN,UAAWU,GACX,UAAWC,EAAA,CACb,KACA,OAACe,EAAA,GACC,OAAQ9B,GACR,MAAM,0BACN,KAAM,qCAAqCI,EAAsB,IAAI,KACrE,YAAY,0BACZ,UAAWrD,GACX,UAAWkE,EAAA,CACb,KACA,OAACc,GAAA,GACC,OAAQnC,GACR,MAAOM,GACP,oBAAqBE,EAAsB,MAC3C,cAAee,GACf,QAASE,EAAA,CACX,GACF,GAEJ,EACF,CAEJ,EAEMd,EAAayB,IAA0B,CAC3C,eAAa,OAAI,CACf,SAAUA,EAAM,QAAQ,EAAE,CAC5B,CAAC,CACH,GAGA,GADgCpD,GAAUG,EAAkC,C,uLCtS5E,MAAMkD,EAAqB,CACzB,CAAE,MAAO,gBAAiB,MAAO,EAAM,EACvC,CAAE,MAAO,sBAAuB,MAAO,EAAK,CAC9C,EAeaF,EAAmB,CAAC,CAAE,OAAAG,EAAQ,MAAAd,EAAO,oBAAAe,EAAqB,cAAAC,EAAe,QAAAC,CAAQ,IAAa,CACzG,MAAMC,EAAW,IAAI,KACrBA,EAAS,QAAQA,EAAS,QAAQ,EAAI,CAAC,EAEvC,MAAMC,EAAoB,IAAI,KAC1B,IAAO,0BAA4B,QAAa,IAAO,wBAA0B,GACnFA,EAAkB,QAAQA,EAAkB,QAAQ,EAAI,IAAO,wBAA0B,CAAC,EAE1FA,EAAkB,QAAQ,MAAgB,EAE5C,MAAMC,EAAwB,IAAO,0BAA4B,QAAa,IAAO,wBAA0B,EAEzG,CAACC,EAAkBC,CAAmB,KAAI,YAAS,EAAE,EACrD,CAACC,EAAcC,CAAe,KAAI,YAAS,EAAE,EAC7C,CAACC,EAAsBC,CAAuB,KAAI,YAASN,CAAqB,EAChF,CAACO,EAAwBC,EAAyB,KAAI,YAAwBV,CAAQ,EACtF,CAACW,GAAuBC,CAAwB,KAAI,YAASH,IAA2B,EAAE,EAC1FzC,KAAS,MAAWC,CAAS,KAEnC,aAAU,IAAM,CAEV2B,GACFQ,EAAoB,GAAGP,CAAmB,OAAI,KAAO,CAAC,EAAE,CAE5D,EAAG,CAACA,EAAqBD,CAAM,CAAC,EAEhC,MAAMiB,GAA0B/G,GAAyB,CAEvD8G,EADgB9G,IAAU,EACM,EAChC4G,GAA0B5G,CAAK,CACjC,EAEMgH,GAAkB,IAAM,CAC5BhB,EAAc,CACZ,KAAMO,GAAgBF,EACtB,cAAeI,EAAuBQ,EAAiBN,CAAsB,EAAI,MACnF,CAAC,CACH,EAEMO,EAAkB,IAAM,CAC5BV,EAAgB,EAAE,EAClBF,EAAoB,EAAE,EACtBI,EAAwBN,CAAqB,EAC7CQ,GAA0BV,CAAQ,EAClCY,EAAyBH,IAA2B,EAAE,EACtDV,EAAQ,CACV,EAEMkB,GAAcnC,EAAsC,gCAA9B,4BAE5B,SACE,OAAC,IAAK,CAAC,OAAAc,EAAgB,MAAOqB,GAAY,UAAWD,EAAiB,UAAWhD,EAAO,MACrF,SAACc,KA4CA,oBACE,oBAAC,KACC,MAAM,QACN,YAAY,0GAEZ,oBAAC,OAAI,UAAWd,EAAO,cACrB,oBAAC,IAAK,CAAC,KAAK,aAAa,MAAOc,EAAO,SAAQ,GAAC,KAChD,OAAC,KACC,UAAWd,EAAO,2BAClB,QAAQ,UACR,KAAK,KACL,KAAK,OACL,QAAS,IAAMc,EAChB,0BAED,GACF,EACF,KACA,QAAC,IAAM,UAAN,CACC,oBAAC,IAAe,CAAC,QAAQ,UAAU,QAAS,IAAMA,EAAO,gBAAiBkC,EAAiB,uCAE3F,KACA,OAAC,KAAM,CAAC,QAAQ,YAAY,QAASA,EAAiB,iBAEtD,GACF,GACF,KArEA,QAAC,OACC,oBAAC,KACC,MAAM,eACN,YAAY,oCAGZ,SAAU,GAEV,mBAAC,KACC,KAAK,YACL,MAAOX,EACP,YAAaF,EACb,SAAWe,GAAM,CACfZ,EAAgBY,EAAE,cAAc,KAAK,CACvC,EACF,EACF,KACA,OAAC,IAAK,CAAC,MAAM,aACX,mBAAC,KACC,QAASvB,EACT,MAAOY,EACP,SAAUC,EACV,KAAK,KACP,EACF,EACCD,MACC,OAAC,IAAK,CAAC,MAAM,kBACX,mBAAC,KACC,SAAUM,GACV,MAAOJ,EACP,YAAY,GACZ,QAAST,EACT,QAASC,CAAA,CACX,EACF,KAEF,OAAC,IAAM,UAAN,CACC,mBAAC,KAAM,CAAC,QAASa,GAAiB,SAAUP,GAAwB,CAACI,GAAuB,0BAE5F,EACF,GACF,CA4BA,CAEJ,CAEJ,EAEMI,EAAoBI,GAAwB,CAChD,MAAMC,EAAa,IAAI,KAAKD,CAAI,EAC1BE,EAAM,IAAI,KAEhB,OAAO,KAAK,MAAMD,EAAW,QAAQ,EAAIC,EAAI,QAAQ,GAAK,GAAI,CAChE,EAEMpD,EAAayB,IACV,CACL,SAAO,OAAI,CACT,MAAO,OACT,CAAC,EACD,iBAAe,OAAI,CACjB,QAAS,MACX,CAAC,EACD,8BAA4B,OAAI,CAC9B,WAAYA,EAAM,QAAQ,EAAG,CAC/B,CAAC,CACH,E,kLChKF,MAAM4B,EAAW,uBAEV,SAAStE,GAAoC,CAClD,MAAO,OAAOuE,GAAa,CACzB,GAAI,CACF,GAAI,KAAW,6BAA6B,GAAK,KAAW,cAAc,sBAAoB,eAAe,EAAG,CAC9G,MAAM5H,EAAU,QAAM,MAAiB,EACvC4H,KAAS,MAAgB5H,CAAO,CAAC,CACnC,CACF,OAAS6H,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,CACF,CACF,CAMO,SAASvE,EACd,CAAE,qBAAAwE,CAAqB,EAAgC,CAAE,qBAAsB,EAAM,EAClE,CACnB,MAAO,OAAOF,EAAUG,IAAa,CACnC,GAAI,CACF,GAAI,KAAW,cAAc,sBAAoB,mBAAmB,EAAG,CACjED,GACFF,KAAS,MAA0B,CAAC,EAEtC,KAAM,CAAE,QAAAI,EAAS,KAAAjF,EAAM,MAAAG,EAAO,0BAAAC,CAA0B,EAAI4E,EAAS,EAAE,gBACjEE,EAAS,QAAM,MAAc,EAAE,IACnC,uCAAuCD,CAAO,SAASjF,CAAI,UAAUG,CAAK,GAAGgF,EAC3E/E,CACF,CAAC,qBACH,EAEA,GACE,KAAW,6BAA6B,GACxC,KAAW,cAAc,sBAAoB,mBAAmB,EAChE,CACAyE,KAAS,MAAgB,CAAC,EAC1B,MAAM7I,EAAQ,KAAW,KAAK,MACxBoJ,EAAUF,GAAQ,gBAAgB,IAAKG,GAAyBA,EAAE,EAAE,EACpEvJ,EAAQ,QAAM,MAAc,EAAE,KAAK,yCAA0C,CAAE,QAAAsJ,EAAS,MAAApJ,CAAM,CAAC,EACrGkJ,EAAO,gBAAgB,QAASG,GAAyB,CACvDA,EAAE,MAAQvJ,EAAQA,EAAMuJ,EAAE,EAAE,GAAK,CAAC,EAAI,CAAC,CACzC,CAAC,EACDR,KAAS,MAAc,CAAC,CAC1B,CAEAA,KAAS,MAAuBK,CAAM,CAAC,CACzC,CACF,OAASJ,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,QAAE,CACAD,KAAS,MAAwB,CAAC,CACpC,CACF,CACF,CAEA,MAAMS,KAAmC,YAAUT,GAAaA,EAAStE,EAAqB,CAAC,EAAG,IAAK,CACrG,QAAS,EACX,CAAC,EAEM,SAASE,EAAqBiB,EAAsD,CACzF,MAAO,OAAOmD,GAAa,CACzB,QAAM,MAAc,EAAE,MAAM,GAAGD,CAAQ,IAAIlD,EAAe,GAAG,sBAAuB,CAClF,GAAGA,CACL,CAAC,EACDmD,EAAStE,EAAqB,CAAC,CACjC,CACF,CAEO,SAASC,EAAqB+E,EAA8C,CACjF,MAAO,OAAOV,GAAa,CACzB,QAAM,MAAc,EAAE,OAAO,GAAGD,CAAQ,IAAIW,CAAiB,EAAE,EAC/DV,EAAStE,EAAqB,CAAC,CACjC,CACF,CAEO,SAASI,EACd6E,EACApD,EACAqD,EACmB,CACnB,MAAO,OAAOZ,GAAa,CACzB,MAAMK,EAAS,QAAM,MAAc,EAAE,KAAK,GAAGN,CAAQ,IAAIY,CAAK,UAAWpD,CAAK,EAC9EqD,EAAeP,EAAO,GAAG,EACzBL,EAAStE,EAAqB,CAAC,CACjC,CACF,CAGA,MAAM4E,EAAkB/H,GAAqC,CAC3D,OAAQA,EAAO,CACb,KAAK,4BAA0B,kBAC7B,MAAO,sBACT,KAAK,4BAA0B,SAC7B,MAAO,iBACT,KAAK,4BAA0B,SAC7B,MAAO,iBACT,QACE,MAAO,EACX,CACF,EAEO,SAASiD,EAAYF,EAAkC,CAC5D,MAAO,OAAO0E,GAAa,CACzBA,KAAS,MAAa1E,CAAK,CAAC,EAC5BmF,EAAiCT,CAAQ,CAC3C,CACF,CAEO,SAASnE,EAAkBgF,EAAsD,CACtF,MAAO,OAAOb,GAAa,CACzBA,KAAS,MAAmBa,CAAM,CAAC,EACnCb,EAAStE,EAAqB,CAAC,CACjC,CACF,CAEO,SAASN,EAAWD,EAAiC,CAC1D,MAAO,OAAO6E,GAAa,CACzBA,KAAS,MAAY7E,CAAI,CAAC,EAC1B6E,EAAStE,EAAqB,CAAC,CACjC,CACF,C","sources":["webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountTable.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder=\"Choose role...\"\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  InteractiveTable,\n  Pagination,\n  Stack,\n  TextLink,\n  Button,\n  IconButton,\n  Icon,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountDTO } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\ntype Cell<T extends keyof ServiceAccountDTO = keyof ServiceAccountDTO> = CellProps<\n  ServiceAccountDTO,\n  ServiceAccountDTO[T]\n>;\n\ninterface ServiceAccountTableProps {\n  services: ServiceAccountDTO[];\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n  showPaging?: boolean;\n  totalPages: number;\n  onChangePage: (page: number) => void;\n  currentPage: number;\n  isLoading: boolean;\n}\n\nexport const ServiceAccountTable = ({\n  services,\n  onRoleChange,\n  roleOptions,\n  onRemoveButtonClick,\n  onDisable,\n  onEnable,\n  onAddTokenClick,\n  showPaging,\n  totalPages,\n  onChangePage,\n  currentPage,\n  isLoading,\n}: ServiceAccountTableProps) => {\n  const columns: Array<Column<ServiceAccountDTO>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          return getCellContent(value, original, isLoading, 'avatarUrl');\n        },\n      },\n      {\n        id: 'name',\n        header: 'Account',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          return getCellContent(value, original, isLoading);\n        },\n        sortType: 'string',\n      },\n      {\n        id: 'id',\n        header: 'ID',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          return getCellContent(value, original, isLoading, 'id');\n        },\n      },\n      {\n        id: 'role',\n        header: 'Roles',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          return getRoleCell(value, original, isLoading, roleOptions, onRoleChange);\n        },\n      },\n      {\n        id: 'tokens',\n        header: 'Tokens',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          return getCellContent(value, original, isLoading, 'tokens');\n        },\n      },\n      {\n        id: 'actions',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return getActionsCell(original, isLoading, onAddTokenClick, onEnable, onDisable, onRemoveButtonClick);\n        },\n      },\n    ],\n    [isLoading, onAddTokenClick, onDisable, onEnable, onRemoveButtonClick, onRoleChange, roleOptions]\n  );\n  return (\n    <Stack direction={'column'} gap={2}>\n      <InteractiveTable columns={columns} data={services} getRowId={(service) => String(service.id)} />\n      {showPaging && totalPages > 1 && (\n        <Stack justifyContent={'flex-end'}>\n          <Pagination numberOfPages={totalPages} currentPage={currentPage} onNavigate={onChangePage} />\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\nconst getCellContent = (\n  value: string,\n  original: ServiceAccountDTO,\n  isLoading: boolean,\n  columnName?: Column<ServiceAccountDTO>['id']\n) => {\n  if (isLoading) {\n    return columnName === 'avatarUrl' ? <Skeleton circle width={24} height={24} /> : <Skeleton width={100} />;\n  }\n  const href = `/org/serviceaccounts/${original.uid}`;\n  const ariaLabel = `Edit service account's ${name} details`;\n  switch (columnName) {\n    case 'avatarUrl':\n      return (\n        <a aria-label={ariaLabel} href={href}>\n          <Avatar src={value} alt={'User avatar'} />\n        </a>\n      );\n    case 'id':\n      return (\n        <TextLink href={href} aria-label={ariaLabel} color=\"secondary\" inline={false}>\n          {original.login}\n        </TextLink>\n      );\n    case 'tokens':\n      return (\n        <Stack alignItems=\"center\">\n          <Icon name=\"key-skeleton-alt\" />\n          <TextLink href={href} aria-label={ariaLabel} color=\"primary\" inline={false}>\n            {value || 'No tokens'}\n          </TextLink>\n        </Stack>\n      );\n    default:\n      return (\n        <TextLink href={href} aria-label={ariaLabel} color=\"primary\" inline={false}>\n          {value}\n        </TextLink>\n      );\n  }\n};\n\nconst getRoleCell = (\n  value: OrgRole,\n  original: ServiceAccountDTO,\n  isLoading: boolean,\n  roleOptions: Role[],\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void\n) => {\n  const displayRolePicker =\n    contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n  const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, original);\n\n  if (isLoading) {\n    return <Skeleton width={100} />;\n  } else {\n    return contextSrv.licensedAccessControlEnabled() ? (\n      displayRolePicker && (\n        <UserRolePicker\n          userId={original.id}\n          orgId={original.orgId}\n          basicRole={value}\n          roles={original.roles || []}\n          onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n          roleOptions={roleOptions}\n          basicRoleDisabled={!canUpdateRole}\n          disabled={original.isExternal || original.isDisabled}\n          width={40}\n        />\n      )\n    ) : (\n      <OrgRolePicker\n        aria-label=\"Role\"\n        value={value}\n        disabled={original.isExternal || !canUpdateRole || original.isDisabled}\n        onChange={(newRole) => onRoleChange(newRole, original)}\n      />\n    );\n  }\n};\n\nconst getActionsCell = (\n  original: ServiceAccountDTO,\n  isLoading: boolean,\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void,\n  onEnable: (serviceAccount: ServiceAccountDTO) => void,\n  onDisable: (serviceAccount: ServiceAccountDTO) => void,\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void\n) => {\n  if (isLoading) {\n    return <Skeleton width={100} />;\n  } else {\n    return !original.isExternal ? (\n      <Stack alignItems=\"center\" justifyContent=\"flex-end\">\n        {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !original.tokens && (\n          <Button onClick={() => onAddTokenClick(original)} disabled={original.isDisabled}>\n            Add token\n          </Button>\n        )}\n        {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, original) &&\n          (original.isDisabled ? (\n            <Button variant=\"secondary\" size=\"md\" onClick={() => onEnable(original)}>\n              Enable\n            </Button>\n          ) : (\n            <Button variant=\"secondary\" size=\"md\" onClick={() => onDisable(original)}>\n              Disable\n            </Button>\n          ))}\n\n        {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, original) && (\n          <IconButton\n            name=\"trash-alt\"\n            aria-label={`Delete service account ${original.name}`}\n            variant=\"secondary\"\n            onClick={() => onRemoveButtonClick(original)}\n          />\n        )}\n      </Stack>\n    ) : (\n      <Stack alignItems=\"center\" justifyContent=\"flex-end\">\n        <IconButton\n          disabled={true}\n          name=\"lock\"\n          size=\"md\"\n          tooltip={`This is a managed service account and cannot be modified.`}\n        />\n      </Stack>\n    );\n  }\n};\n\nServiceAccountTable.displayName = 'ServiceAccountTable';\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport {\n  ConfirmModal,\n  FilterInput,\n  LinkButton,\n  RadioButtonGroup,\n  InlineField,\n  EmptyState,\n  Box,\n  Stack,\n  useStyles2,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { ServiceAccountTable } from './ServiceAccountTable';\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport {\n  changeQuery,\n  changePage,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changePage,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst availableFilters = [\n  { label: 'All', value: ServiceAccountStateFilter.All },\n  { label: 'With expired tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n  { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n];\n\nif (config.featureToggles.externalServiceAccounts) {\n  availableFilters.push({ label: 'Managed', value: ServiceAccountStateFilter.External });\n}\n\nexport const ServiceAccountsListPageUnconnected = ({\n  page,\n  changePage,\n  totalPages,\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  query,\n  serviceAccountStateFilter,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n}: Props): JSX.Element => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.uid);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.uid, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      documentation.\n    </a>\n  );\n  const subTitle = (\n    <span>\n      Service accounts and their tokens can be used to authenticate against the Grafana API. Find out more in our{' '}\n      {docsLink}\n    </span>\n  );\n\n  return (\n    <Page\n      navId=\"serviceaccounts\"\n      subTitle={subTitle}\n      actions={\n        <>\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </>\n      }\n    >\n      <Page.Contents>\n        <Stack justifyContent=\"space-between\" wrap=\"wrap\">\n          <InlineField grow>\n            <FilterInput\n              className={styles.filterInput}\n              placeholder=\"Search service account by name\"\n              value={query}\n              onChange={onQueryChange}\n            />\n          </InlineField>\n          <Box marginBottom={1}>\n            <RadioButtonGroup\n              options={availableFilters}\n              onChange={onStateFilterChange}\n              value={serviceAccountStateFilter}\n            />\n          </Box>\n        </Stack>\n        {!isLoading && !noServiceAccountsCreated && serviceAccounts.length === 0 && (\n          <EmptyState\n            variant=\"not-found\"\n            message={t('service-accounts.empty-state.message', 'No services accounts found')}\n          />\n        )}\n        {!isLoading && noServiceAccountsCreated && (\n          <EmptyState\n            variant=\"call-to-action\"\n            button={\n              <LinkButton\n                disabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n                href=\"org/serviceaccounts/create\"\n                icon=\"key-skeleton-alt\"\n                size=\"lg\"\n              >\n                <Trans i18nKey=\"service-accounts.empty-state.button-title\">Add service account</Trans>\n              </LinkButton>\n            }\n            message={t('service-accounts.empty-state.title', \"You haven't created any service accounts yet\")}\n          >\n            <Trans i18nKey=\"service-accounts.empty-state.more-info\">\n              Remember, you can provide specific permissions for API access to other applications\n            </Trans>\n          </EmptyState>\n        )}\n\n        {(isLoading || serviceAccounts.length !== 0) && (\n          <ServiceAccountTable\n            services={serviceAccounts}\n            showPaging={true}\n            totalPages={totalPages}\n            onChangePage={changePage}\n            currentPage={page}\n            onRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n            onRemoveButtonClick={onRemoveButtonClick}\n            onDisable={onDisableButtonClick}\n            onEnable={onEnable}\n            onAddTokenClick={onTokenAdd}\n            isLoading={isLoading}\n          />\n        )}\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  filterInput: css({\n    maxWidth: theme.spacing(50),\n  }),\n});\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const maxExpirationDate = new Date();\n  if (config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > -1) {\n    maxExpirationDate.setDate(maxExpirationDate.getDate() + config.tokenExpirationDayLimit + 1);\n  } else {\n    maxExpirationDate.setDate(8640000000000000);\n  }\n  const defaultExpirationDate = config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > 0;\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(defaultExpirationDate);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(defaultExpirationDate);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal isOpen={isOpen} title={modalTitle} onDismiss={onCloseInternal} className={styles.modal}>\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          <Field label=\"Expiration\">\n            <RadioButtonGroup\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n          </Field>\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n                maxDate={maxExpirationDate}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css({\n      width: '550px',\n    }),\n    modalTokenRow: css({\n      display: 'flex',\n    }),\n    modalCopyToClipboardButton: css({\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n};\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  stateFilterChanged,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)\n        ) {\n          dispatch(rolesFetchBegin());\n          const orgId = contextSrv.user.orgId;\n          const userIds = result?.serviceAccounts.map((u: ServiceAccountDTO) => u.id);\n          const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n          result.serviceAccounts.forEach((u: ServiceAccountDTO) => {\n            u.roles = roles ? roles[u.id] || [] : [];\n          });\n          dispatch(rolesFetchEnd());\n        }\n\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.uid}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountUid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountUid}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saUid: string,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saUid}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    case ServiceAccountStateFilter.External:\n      return '&external=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n"],"names":["UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","maxWidth","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","options","r","OrgRolePicker","value","onChange","ariaLabel","inputId","autoFocus","restProps","val","ServiceAccountTable","services","onRoleChange","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","showPaging","totalPages","onChangePage","currentPage","columns","original","getCellContent","getRoleCell","getActionsCell","Stack","InteractiveTable","service","Pagination","columnName","href","Avatar","TextLink","Icon","displayRolePicker","canUpdateRole","newRole","IconButton","Button","mapStateToProps","state","mapDispatchToProps","connector","availableFilters","config","ServiceAccountsListPageUnconnected","page","changePage","serviceAccounts","query","serviceAccountStateFilter","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","isAddModalOpen","setIsAddModalOpen","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","styles","getStyles","noServiceAccountsCreated","role","serviceAccount","updatedServiceAccount","onQueryChange","onStateFilterChange","onServiceAccountRemove","onRemoveModalClose","onDisableButtonClick","onDisableModalClose","onTokenAdd","onTokenCreate","token","onAddModalClose","docsLink","subTitle","Page","InlineField","FilterInput","Box","RadioButtonGroup","EmptyState","ConfirmModal","CreateTokenModal","theme","EXPIRATION_OPTIONS","isOpen","serviceAccountLogin","onCreateToken","onClose","tomorrow","maxExpirationDate","defaultExpirationDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","onExpirationDateChange","onGenerateToken","getSecondsToLive","onCloseInternal","modalTitle","e","date","dateAsDate","now","BASE_URL","dispatch","error","withLoadingIndicator","getState","perPage","result","getStateFilter","userIds","u","fetchServiceAccountsWithDebounce","serviceAccountUid","saUid","onTokenCreated","filter"],"sourceRoot":""}