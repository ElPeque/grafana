{"version":3,"file":"3776.1178fe5298ad2272a8c5.js","mappings":"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","sources":["webpack://grafana/./public/app/features/explore/Logs/utils/logs.ts","webpack://grafana/./public/app/features/logs/components/InfiniteScroll.tsx","webpack://grafana/./public/app/features/logs/components/LoadingIndicator.tsx","webpack://grafana/./public/app/features/logs/components/LogDetailsBody.tsx","webpack://grafana/./public/app/features/logs/components/LogLabels.tsx","webpack://grafana/./public/app/features/logs/components/LogMessageAnsi.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMenuCell.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMessage.tsx","webpack://grafana/./public/app/features/explore/Logs/PopoverMenu.tsx","webpack://grafana/./public/app/features/logs/UniqueKeyMaker.ts","webpack://grafana/./public/app/features/logs/components/LogLabelStatsRow.tsx","webpack://grafana/./public/app/features/logs/components/LogLabelStats.tsx","webpack://grafana/./public/app/features/logs/components/LogDetailsRow.tsx","webpack://grafana/./public/app/features/logs/components/LogDetails.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMessageDisplayedFields.tsx","webpack://grafana/./public/app/features/logs/components/LogRow.tsx","webpack://grafana/./public/app/features/logs/components/PreviewLogRow.tsx","webpack://grafana/./public/app/features/logs/components/LogRows.tsx","webpack://grafana/./public/app/features/logs/components/getLogRowStyles.ts","webpack://grafana/./public/app/features/logs/components/log-context/LogContextButtons.tsx","webpack://grafana/./public/app/features/logs/components/log-context/LogRowContextModal.tsx"],"sourcesContent":["import { shallowCompare } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport const SETTINGS_KEYS = {\n  showLabels: 'grafana.explore.logs.showLabels',\n  showTime: 'grafana.explore.logs.showTime',\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\n  prettifyLogMessage: 'grafana.explore.logs.prettifyLogMessage',\n  logsSortOrder: 'grafana.explore.logs.sortOrder',\n  logContextWrapLogMessage: 'grafana.explore.logs.logContext.wrapLogMessage',\n};\n\nexport const visualisationTypeKey = 'grafana.explore.logs.visualisationType';\n\nexport const canKeepDisplayedFields = (logsQueries: DataQuery[] | undefined, prevLogsQueries: DataQuery[]): boolean => {\n  if (!logsQueries) {\n    return false;\n  }\n  for (let i = 0; i < logsQueries.length; i++) {\n    if (!logsQueries[i] || !prevLogsQueries[i] || !shallowCompare(logsQueries[i], prevLogsQueries[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { css } from '@emotion/css';\nimport { ReactNode, MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\nimport { AbsoluteTimeRange, CoreApp, LogRowModel, TimeRange } from '@grafana/data';\nimport { convertRawToRange, isRelativeTime, isRelativeTimeRange } from '@grafana/data/src/datetime/rangeutil';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { LogsSortOrder, TimeZone } from '@grafana/schema';\nimport { Button, Icon } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LoadingIndicator } from './LoadingIndicator';\n\nexport type Props = {\n  app?: CoreApp;\n  children: ReactNode;\n  loading: boolean;\n  loadMoreLogs?: (range: AbsoluteTimeRange) => void;\n  range: TimeRange;\n  rows: LogRowModel[];\n  scrollElement: HTMLDivElement | null;\n  sortOrder: LogsSortOrder;\n  timeZone: TimeZone;\n  topScrollEnabled?: boolean;\n};\n\nexport const InfiniteScroll = ({\n  app,\n  children,\n  loading,\n  loadMoreLogs,\n  range,\n  rows,\n  scrollElement,\n  sortOrder,\n  timeZone,\n  topScrollEnabled = false,\n}: Props) => {\n  const [upperOutOfRange, setUpperOutOfRange] = useState(false);\n  const [lowerOutOfRange, setLowerOutOfRange] = useState(false);\n  const [upperLoading, setUpperLoading] = useState(false);\n  const [lowerLoading, setLowerLoading] = useState(false);\n  const rowsRef = useRef<LogRowModel[]>(rows);\n  const lastScroll = useRef<number>(scrollElement?.scrollTop || 0);\n  const lastEvent = useRef<Event | WheelEvent | null>(null);\n  const countRef = useRef(0);\n\n  // Reset messages when range/order/rows change\n  useEffect(() => {\n    setUpperOutOfRange(false);\n    setLowerOutOfRange(false);\n  }, [range, rows, sortOrder]);\n\n  // Reset loading messages when loading stops\n  useEffect(() => {\n    if (!loading) {\n      setUpperLoading(false);\n      setLowerLoading(false);\n    }\n  }, [loading]);\n\n  // Ensure bottom loader visibility\n  useEffect(() => {\n    if (lowerLoading && scrollElement) {\n      scrollElement.scrollTo(0, scrollElement.scrollHeight - scrollElement.clientHeight);\n    }\n  }, [lowerLoading, scrollElement]);\n\n  // Request came back with no new past rows\n  useEffect(() => {\n    if (rows !== rowsRef.current && rows.length === rowsRef.current.length && (upperLoading || lowerLoading)) {\n      if (sortOrder === LogsSortOrder.Descending && lowerLoading) {\n        setLowerOutOfRange(true);\n      } else if (sortOrder === LogsSortOrder.Ascending && upperLoading) {\n        setUpperOutOfRange(true);\n      }\n    }\n    rowsRef.current = rows;\n  }, [lowerLoading, rows, sortOrder, upperLoading]);\n\n  useEffect(() => {\n    if (!scrollElement || !loadMoreLogs) {\n      return;\n    }\n\n    function handleScroll(event: Event | WheelEvent) {\n      if (!scrollElement || !loadMoreLogs || !rows.length || loading || !config.featureToggles.logsInfiniteScrolling) {\n        return;\n      }\n      const scrollDirection = shouldLoadMore(event, lastEvent.current, countRef, scrollElement, lastScroll.current);\n      lastEvent.current = event;\n      lastScroll.current = scrollElement.scrollTop;\n      if (scrollDirection === ScrollDirection.NoScroll) {\n        return;\n      }\n      event.stopImmediatePropagation();\n      if (scrollDirection === ScrollDirection.Top && topScrollEnabled) {\n        scrollTop();\n      } else if (scrollDirection === ScrollDirection.Bottom) {\n        scrollBottom();\n      }\n    }\n\n    function scrollTop() {\n      const newRange = canScrollTop(getVisibleRange(rows), range, timeZone, sortOrder);\n      if (!newRange) {\n        setUpperOutOfRange(true);\n        return;\n      }\n      setUpperOutOfRange(false);\n      loadMoreLogs?.(newRange);\n      setUpperLoading(true);\n      reportInteraction('grafana_logs_infinite_scrolling', {\n        direction: 'top',\n        sort_order: sortOrder,\n      });\n    }\n\n    function scrollBottom() {\n      const newRange = canScrollBottom(getVisibleRange(rows), range, timeZone, sortOrder);\n      if (!newRange) {\n        setLowerOutOfRange(true);\n        return;\n      }\n      setLowerOutOfRange(false);\n      loadMoreLogs?.(newRange);\n      setLowerLoading(true);\n      reportInteraction('grafana_logs_infinite_scrolling', {\n        direction: 'bottom',\n        sort_order: sortOrder,\n      });\n    }\n\n    scrollElement.addEventListener('scroll', handleScroll);\n    scrollElement.addEventListener('wheel', handleScroll);\n\n    return () => {\n      scrollElement.removeEventListener('scroll', handleScroll);\n      scrollElement.removeEventListener('wheel', handleScroll);\n    };\n  }, [loadMoreLogs, loading, range, rows, scrollElement, sortOrder, timeZone, topScrollEnabled]);\n\n  // We allow \"now\" to move when using relative time, so we hide the message so it doesn't flash.\n  const hideTopMessage = sortOrder === LogsSortOrder.Descending && isRelativeTime(range.raw.to);\n  const hideBottomMessage = sortOrder === LogsSortOrder.Ascending && isRelativeTime(range.raw.to);\n\n  const loadOlderLogs = useCallback(() => {\n    //If we are not on the last page, use next page's range\n    reportInteraction('grafana_explore_logs_infinite_pagination_clicked', {\n      pageType: 'olderLogsButton',\n    });\n    const newRange = canScrollTop(getVisibleRange(rows), range, timeZone, sortOrder);\n    if (!newRange) {\n      setUpperOutOfRange(true);\n      return;\n    }\n    setUpperOutOfRange(false);\n    loadMoreLogs?.(newRange);\n    setUpperLoading(true);\n    scrollElement?.scroll({\n      behavior: 'auto',\n      top: 0,\n    });\n  }, [loadMoreLogs, range, rows, scrollElement, sortOrder, timeZone]);\n\n  return (\n    <>\n      {upperLoading && <LoadingIndicator adjective={sortOrder === LogsSortOrder.Descending ? 'newer' : 'older'} />}\n      {!hideTopMessage && upperOutOfRange && outOfRangeMessage}\n      {sortOrder === LogsSortOrder.Ascending && app === CoreApp.Explore && loadMoreLogs && (\n        <Button className={styles.navButton} variant=\"secondary\" onClick={loadOlderLogs} disabled={loading}>\n          <div className={styles.navButtonContent}>\n            <Icon name=\"angle-up\" size=\"lg\" />\n            <Trans i18nKey=\"logs.infinite-scroll.older-logs\">Older logs</Trans>\n          </div>\n        </Button>\n      )}\n      {children}\n      {!hideBottomMessage && lowerOutOfRange && outOfRangeMessage}\n      {lowerLoading && <LoadingIndicator adjective={sortOrder === LogsSortOrder.Descending ? 'older' : 'newer'} />}\n    </>\n  );\n};\n\nconst styles = {\n  messageContainer: css({\n    textAlign: 'center',\n    padding: 0.25,\n  }),\n  navButton: css({\n    width: '58px',\n    height: '68px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    lineHeight: '1',\n    position: 'absolute',\n    top: 0,\n    right: -3,\n    zIndex: 1,\n  }),\n  navButtonContent: css({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    whiteSpace: 'normal',\n  }),\n};\n\nconst outOfRangeMessage = (\n  <div className={styles.messageContainer} data-testid=\"end-of-range\">\n    End of the selected time range.\n  </div>\n);\n\nexport enum ScrollDirection {\n  Top = -1,\n  Bottom = 1,\n  NoScroll = 0,\n}\nexport function shouldLoadMore(\n  event: Event | WheelEvent,\n  lastEvent: Event | WheelEvent | null,\n  countRef: MutableRefObject<number>,\n  element: HTMLDivElement,\n  lastScroll: number\n): ScrollDirection {\n  // Disable behavior if there is no scroll\n  if (element.scrollHeight <= element.clientHeight) {\n    return ScrollDirection.NoScroll;\n  }\n  const delta = event instanceof WheelEvent ? event.deltaY : element.scrollTop - lastScroll;\n  if (delta === 0) {\n    return ScrollDirection.NoScroll;\n  }\n\n  const scrollDirection = delta < 0 ? ScrollDirection.Top : ScrollDirection.Bottom;\n  const diff =\n    scrollDirection === ScrollDirection.Top\n      ? element.scrollTop\n      : element.scrollHeight - element.scrollTop - element.clientHeight;\n\n  if (diff > 1) {\n    return ScrollDirection.NoScroll;\n  }\n\n  if (lastEvent && shouldIgnoreChainOfEvents(event, lastEvent, countRef)) {\n    return ScrollDirection.NoScroll;\n  }\n\n  return scrollDirection;\n}\n\nfunction shouldIgnoreChainOfEvents(\n  event: Event | WheelEvent,\n  lastEvent: Event | WheelEvent,\n  countRef: MutableRefObject<number>\n) {\n  const deltaTime = event.timeStamp - lastEvent.timeStamp;\n  // Not a chain of events\n  if (deltaTime > 500) {\n    countRef.current = 0;\n    return false;\n  }\n  countRef.current++;\n  // Likely trackpad\n  if (deltaTime < 100) {\n    // User likely to want more results\n    if (countRef.current >= 180) {\n      countRef.current = 0;\n      return false;\n    }\n    return true;\n  }\n  // Likely mouse wheel\n  if (deltaTime < 400) {\n    // User likely to want more results\n    if (countRef.current >= 25) {\n      countRef.current = 0;\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getVisibleRange(rows: LogRowModel[]) {\n  const firstTimeStamp = rows[0].timeEpochMs;\n  const lastTimeStamp = rows[rows.length - 1].timeEpochMs;\n\n  const visibleRange =\n    lastTimeStamp < firstTimeStamp\n      ? { from: lastTimeStamp, to: firstTimeStamp }\n      : { from: firstTimeStamp, to: lastTimeStamp };\n\n  return visibleRange;\n}\n\nfunction getPrevRange(visibleRange: AbsoluteTimeRange, currentRange: TimeRange) {\n  return { from: currentRange.from.valueOf(), to: visibleRange.from };\n}\n\nfunction getNextRange(visibleRange: AbsoluteTimeRange, currentRange: TimeRange, timeZone: TimeZone) {\n  // When requesting new logs, update the current range if using relative time ranges.\n  currentRange = updateCurrentRange(currentRange, timeZone);\n  return { from: visibleRange.to, to: currentRange.to.valueOf() };\n}\n\nexport const SCROLLING_THRESHOLD = 1e3;\n\n// To get more logs, the difference between the visible range and the current range should be 1 second or more.\nfunction canScrollTop(\n  visibleRange: AbsoluteTimeRange,\n  currentRange: TimeRange,\n  timeZone: TimeZone,\n  sortOrder: LogsSortOrder\n): AbsoluteTimeRange | undefined {\n  if (sortOrder === LogsSortOrder.Descending) {\n    // When requesting new logs, update the current range if using relative time ranges.\n    currentRange = updateCurrentRange(currentRange, timeZone);\n    const canScroll = currentRange.to.valueOf() - visibleRange.to > SCROLLING_THRESHOLD;\n    return canScroll ? getNextRange(visibleRange, currentRange, timeZone) : undefined;\n  }\n\n  const canScroll = Math.abs(currentRange.from.valueOf() - visibleRange.from) > SCROLLING_THRESHOLD;\n  return canScroll ? getPrevRange(visibleRange, currentRange) : undefined;\n}\n\nexport function canScrollBottom(\n  visibleRange: AbsoluteTimeRange,\n  currentRange: TimeRange,\n  timeZone: TimeZone,\n  sortOrder: LogsSortOrder\n): AbsoluteTimeRange | undefined {\n  if (sortOrder === LogsSortOrder.Descending) {\n    const canScroll = Math.abs(currentRange.from.valueOf() - visibleRange.from) > SCROLLING_THRESHOLD;\n    return canScroll ? getPrevRange(visibleRange, currentRange) : undefined;\n  }\n  // When requesting new logs, update the current range if using relative time ranges.\n  currentRange = updateCurrentRange(currentRange, timeZone);\n  const canScroll = currentRange.to.valueOf() - visibleRange.to > SCROLLING_THRESHOLD;\n  return canScroll ? getNextRange(visibleRange, currentRange, timeZone) : undefined;\n}\n\n// Given a TimeRange, returns a new instance if using relative time, or else the same.\nfunction updateCurrentRange(timeRange: TimeRange, timeZone: TimeZone) {\n  return isRelativeTimeRange(timeRange.raw) ? convertRawToRange(timeRange.raw, timeZone) : timeRange;\n}\n","import { css } from '@emotion/css';\n\nimport { Spinner } from '@grafana/ui';\n\n// ideally we'd use `@grafana/ui/LoadingPlaceholder`, but that\n// one has a large margin-bottom.\ntype Props = {\n  adjective?: string;\n};\n\nexport const LoadingIndicator = ({ adjective = 'newer' }: Props) => {\n  const text = `Loading ${adjective} logs...`;\n  return (\n    <div className={loadingIndicatorStyles}>\n      <div>\n        {text} <Spinner inline />\n      </div>\n    </div>\n  );\n};\n\nconst loadingIndicatorStyles = css({\n  display: 'flex',\n  justifyContent: 'center',\n});\n","import { css } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\n\nimport { CoreApp, GrafanaTheme2, LogRowModel } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { IconButton, Themeable2 } from '@grafana/ui';\n\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport interface Props extends Themeable2 {\n  app?: CoreApp;\n  disableActions: boolean;\n  displayedFields?: string[];\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  row: LogRowModel;\n  theme: GrafanaTheme2;\n}\n\nconst getStyles = memoizeOne((theme: GrafanaTheme2) => {\n  return {\n    buttonRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(0.5),\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n});\n\nexport const LOG_LINE_BODY_FIELD_NAME = '___LOG_LINE_BODY___';\n\nexport const LogDetailsBody = (props: Props) => {\n  const showField = () => {\n    const { onClickShowField, row } = props;\n    if (onClickShowField) {\n      onClickShowField(LOG_LINE_BODY_FIELD_NAME);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_show_body_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'enable',\n      app: props.app,\n    });\n  };\n\n  const hideField = () => {\n    const { onClickHideField, row } = props;\n    if (onClickHideField) {\n      onClickHideField(LOG_LINE_BODY_FIELD_NAME);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_show_body_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'disable',\n      app: props.app,\n    });\n  };\n\n  const { theme, displayedFields, disableActions, row } = props;\n  const styles = getStyles(theme);\n  const rowStyles = getLogRowStyles(theme);\n\n  const toggleFieldButton =\n    displayedFields != null && displayedFields.includes(LOG_LINE_BODY_FIELD_NAME) ? (\n      <IconButton variant=\"primary\" tooltip=\"Hide log line\" name=\"eye\" onClick={hideField} />\n    ) : (\n      <IconButton tooltip=\"Show log line\" name=\"eye\" onClick={showField} />\n    );\n\n  return (\n    <tr className={rowStyles.logDetailsValue}>\n      <td className={rowStyles.logsDetailsIcon}>\n        <div className={styles.buttonRow}>{!disableActions && displayedFields && toggleFieldButton}</div>\n      </td>\n\n      <td className={rowStyles.logDetailsLabel} colSpan={100}>\n        {row.entry}\n      </td>\n    </tr>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { memo, forwardRef, useMemo } from 'react';\n\nimport { GrafanaTheme2, Labels } from '@grafana/data';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { LOG_LINE_BODY_FIELD_NAME } from './LogDetailsBody';\n\n// Levels are already encoded in color, filename is a Loki-ism\nconst HIDDEN_LABELS = ['detected_level', 'level', 'lvl', 'filename'];\n\ninterface Props {\n  labels: Labels;\n  emptyMessage?: string;\n  addTooltip?: boolean;\n}\n\nexport const LogLabels = memo(({ labels, emptyMessage, addTooltip = true }: Props) => {\n  const styles = useStyles2(getStyles);\n  const displayLabels = useMemo(\n    () =>\n      Object.keys(labels)\n        .filter((label) => !label.startsWith('_') && !HIDDEN_LABELS.includes(label) && labels[label])\n        .map((label) => `${label}=${labels[label]}`),\n    [labels]\n  );\n\n  if (displayLabels.length === 0 && emptyMessage) {\n    return (\n      <span className={cx([styles.logsLabels])}>\n        <span className={cx([styles.logsLabel])}>{emptyMessage}</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={cx([styles.logsLabels])}>\n      {displayLabels.map((labelValue) => {\n        return addTooltip ? (\n          <Tooltip content={labelValue} key={labelValue} placement=\"top\">\n            <LogLabel styles={styles}>{labelValue}</LogLabel>\n          </Tooltip>\n        ) : (\n          <LogLabel styles={styles} tooltip={labelValue} key={labelValue}>\n            {labelValue}\n          </LogLabel>\n        );\n      })}\n    </span>\n  );\n});\nLogLabels.displayName = 'LogLabels';\n\ninterface LogLabelsArrayProps {\n  labels: string[];\n}\n\nexport const LogLabelsList = memo(({ labels }: LogLabelsArrayProps) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <span className={cx([styles.logsLabels])}>\n      {labels.map((label) => (\n        <LogLabel key={label} styles={styles} tooltip={label}>\n          {label === LOG_LINE_BODY_FIELD_NAME ? 'log line' : label}\n        </LogLabel>\n      ))}\n    </span>\n  );\n});\nLogLabelsList.displayName = 'LogLabelsList';\n\ninterface LogLabelProps {\n  styles: Record<string, string>;\n  tooltip?: string;\n  children: JSX.Element | string;\n}\n\nconst LogLabel = forwardRef<HTMLSpanElement, LogLabelProps>(({ styles, tooltip, children }: LogLabelProps, ref) => {\n  return (\n    <span className={cx([styles.logsLabel])} ref={ref}>\n      <span className={cx([styles.logsLabelValue])} title={tooltip}>\n        {children}\n      </span>\n    </span>\n  );\n});\nLogLabel.displayName = 'LogLabel';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsLabels: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      fontSize: theme.typography.size.xs,\n    }),\n    logsLabel: css({\n      label: 'logs-label',\n      display: 'flex',\n      padding: theme.spacing(0, 0.25),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      margin: theme.spacing(0.125, 0.5, 0, 0),\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n    }),\n    logsLabelValue: css({\n      label: 'logs-label__value',\n      display: 'inline-block',\n      maxWidth: theme.spacing(25),\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    }),\n  };\n};\n","import ansicolor from 'ansicolor';\nimport { PureComponent } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { findHighlightChunksInText, GrafanaTheme2 } from '@grafana/data';\nimport { withTheme2, Themeable2 } from '@grafana/ui';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(theme: GrafanaTheme2, css: string): Style {\n  return css.split(/;\\s*/).reduce<Style>((accumulated, line) => {\n    // The ansicolor package returns this color if the chunk has the ANSI dim\n    // style (`\\e[2m`), but it is nearly unreadable in the dark theme, so we use\n    // GrafanaTheme2 instead to style it in a way that works across all themes.\n    if (line === 'color:rgba(0,0,0,0.5)') {\n      return { color: theme.colors.text.secondary };\n    }\n\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-([a-z])/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props extends Themeable2 {\n  value: string;\n  highlight?: {\n    searchWords: string[];\n    highlightClassName: string;\n  };\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class UnThemedLogMessageAnsi extends PureComponent<Props, State> {\n  state: State = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map((span) => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(props.theme, span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) => {\n      const chunkText = this.props.highlight?.searchWords ? (\n        <Highlighter\n          key={index}\n          textToHighlight={chunk.text}\n          searchWords={this.props.highlight.searchWords}\n          findChunks={findHighlightChunksInText}\n          highlightClassName={this.props.highlight.highlightClassName}\n        />\n      ) : (\n        chunk.text\n      );\n      return chunk.style ? (\n        <span key={index} style={chunk.style} data-testid=\"ansiLogLine\">\n          {chunkText}\n        </span>\n      ) : (\n        chunkText\n      );\n    });\n  }\n}\n\nexport const LogMessageAnsi = withTheme2(UnThemedLogMessageAnsi);\nLogMessageAnsi.displayName = 'LogMessageAnsi';\n","import {\n  memo,\n  FocusEvent,\n  SyntheticEvent,\n  useCallback,\n  ReactNode,\n  useMemo,\n  cloneElement,\n  isValidElement,\n  MouseEvent,\n} from 'react';\n\nimport { LogRowContextOptions, LogRowModel, getDefaultTimeRange, locationUtil, urlUtil } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { ClipboardButton, IconButton, PopoverContent } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\n\nimport { LogRowStyles } from './getLogRowStyles';\n\ninterface Props {\n  logText: string;\n  row: LogRowModel;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  styles: LogRowStyles;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n  onPinToContentOutlineClick?: (row: LogRowModel, onOpenContext: (row: LogRowModel) => void) => void;\n  addonBefore?: ReactNode[];\n  addonAfter?: ReactNode[];\n}\n\nexport const LogRowMenuCell = memo(\n  ({\n    logText,\n    onOpenContext,\n    onPermalinkClick,\n    onPinLine,\n    onUnpinLine,\n    pinLineButtonTooltipTitle,\n    pinned,\n    row,\n    showContextToggle,\n    styles,\n    mouseIsOver,\n    onBlur,\n    getRowContextQuery,\n    addonBefore,\n    addonAfter,\n  }: Props) => {\n    const shouldShowContextToggle = useMemo(\n      () => (showContextToggle ? showContextToggle(row) : false),\n      [row, showContextToggle]\n    );\n    const onLogRowClick = useCallback((e: SyntheticEvent) => {\n      e.stopPropagation();\n    }, []);\n    const onShowContextClick = useCallback(\n      async (event: MouseEvent<HTMLButtonElement>) => {\n        event.stopPropagation();\n        // if ctrl or meta key is pressed, open query in new Explore tab\n        if (\n          getRowContextQuery &&\n          (event.nativeEvent.ctrlKey || event.nativeEvent.metaKey || event.nativeEvent.shiftKey)\n        ) {\n          const win = window.open('about:blank');\n          // for this request we don't want to use the cached filters from a context provider, but always want to refetch and clear\n          const query = await getRowContextQuery(row, undefined, false);\n          if (query && win) {\n            const url = urlUtil.renderUrl(locationUtil.assureBaseUrl(`${getConfig().appSubUrl}explore`), {\n              left: JSON.stringify({\n                datasource: query.datasource,\n                queries: [query],\n                range: getDefaultTimeRange(),\n              }),\n            });\n            win.location = url;\n\n            return;\n          }\n          win?.close();\n        }\n        onOpenContext(row);\n      },\n      [onOpenContext, getRowContextQuery, row]\n    );\n    /**\n     * For better accessibility support, we listen to the onBlur event here (to hide this component), and\n     * to onFocus in LogRow (to show this component).\n     */\n    const handleBlur = useCallback(\n      (e: FocusEvent) => {\n        if (!e.currentTarget.contains(e.relatedTarget) && onBlur) {\n          onBlur();\n        }\n      },\n      [onBlur]\n    );\n    const getLogText = useCallback(() => logText, [logText]);\n\n    const beforeContent = useMemo(() => {\n      if (!addonBefore) {\n        return null;\n      }\n      return addClickListenersToNode(addonBefore, row);\n    }, [addonBefore, row]);\n\n    const afterContent = useMemo(() => {\n      if (!addonAfter) {\n        return null;\n      }\n      return addClickListenersToNode(addonAfter, row);\n    }, [addonAfter, row]);\n\n    return (\n      // We keep this click listener here to prevent the row from being selected when clicking on the menu.\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n      <span className={`log-row-menu ${styles.rowMenu}`} onClick={onLogRowClick} onBlur={handleBlur}>\n        {pinned && !mouseIsOver && (\n          <IconButton\n            className={styles.unPinButton}\n            size=\"md\"\n            name=\"gf-pin\"\n            onClick={() => onUnpinLine && onUnpinLine(row)}\n            tooltip=\"Unpin line\"\n            tooltipPlacement=\"top\"\n            aria-label=\"Unpin line\"\n            tabIndex={0}\n          />\n        )}\n        {mouseIsOver && (\n          <>\n            {beforeContent}\n            {shouldShowContextToggle && (\n              <IconButton\n                size=\"md\"\n                name=\"gf-show-context\"\n                onClick={onShowContextClick}\n                tooltip=\"Show context\"\n                tooltipPlacement=\"top\"\n                aria-label=\"Show context\"\n                tabIndex={0}\n              />\n            )}\n            <ClipboardButton\n              className={styles.copyLogButton}\n              icon=\"copy\"\n              variant=\"secondary\"\n              fill=\"text\"\n              size=\"md\"\n              getText={getLogText}\n              tooltip=\"Copy to clipboard\"\n              tooltipPlacement=\"top\"\n              tabIndex={0}\n            />\n            {pinned && onUnpinLine && (\n              <IconButton\n                className={styles.unPinButton}\n                size=\"md\"\n                name=\"gf-pin\"\n                onClick={() => onUnpinLine && onUnpinLine(row)}\n                tooltip=\"Unpin line\"\n                tooltipPlacement=\"top\"\n                aria-label=\"Unpin line\"\n                tabIndex={0}\n              />\n            )}\n            {!pinned && onPinLine && (\n              <IconButton\n                className={styles.unPinButton}\n                size=\"md\"\n                name=\"gf-pin\"\n                onClick={() => onPinLine && onPinLine(row)}\n                tooltip={pinLineButtonTooltipTitle ?? 'Pin line'}\n                tooltipPlacement=\"top\"\n                aria-label=\"Pin line\"\n                tabIndex={0}\n              />\n            )}\n            {onPermalinkClick && row.rowId !== undefined && row.uid && (\n              <IconButton\n                tooltip=\"Copy shortlink\"\n                aria-label=\"Copy shortlink\"\n                tooltipPlacement=\"top\"\n                size=\"md\"\n                name=\"share-alt\"\n                onClick={() => onPermalinkClick(row)}\n                tabIndex={0}\n              />\n            )}\n            {afterContent}\n          </>\n        )}\n      </span>\n    );\n  }\n);\n\ntype AddonOnClickListener = (event: MouseEvent, row: LogRowModel) => void | undefined;\nfunction addClickListenersToNode(nodes: ReactNode[], row: LogRowModel) {\n  return nodes.map((node, index) => {\n    if (isValidElement(node)) {\n      const onClick: AddonOnClickListener = node.props.onClick;\n      if (!onClick) {\n        return node;\n      }\n      return cloneElement(node, {\n        // @ts-expect-error\n        onClick: (event: MouseEvent<HTMLElement>) => {\n          onClick(event, row);\n        },\n        key: index,\n      });\n    }\n    return node;\n  });\n}\n\nLogRowMenuCell.displayName = 'LogRowMenuCell';\n","import { css } from '@emotion/css';\nimport { memo, ReactNode, SyntheticEvent, useMemo, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { CoreApp, findHighlightChunksInText, GrafanaTheme2, LogRowContextOptions, LogRowModel } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { PopoverContent, useTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { LogRowMenuCell } from './LogRowMenuCell';\nimport { LogRowStyles } from './getLogRowStyles';\n\nexport const MAX_CHARACTERS = 100000;\n\ninterface Props {\n  row: LogRowModel;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  app?: CoreApp;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  styles: LogRowStyles;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n  expanded?: boolean;\n  logRowMenuIconsBefore?: ReactNode[];\n  logRowMenuIconsAfter?: ReactNode[];\n}\n\ninterface LogMessageProps {\n  hasAnsi: boolean;\n  entry: string;\n  highlights: string[] | undefined;\n  styles: LogRowStyles;\n}\n\nconst LogMessage = ({ hasAnsi, entry, highlights, styles }: LogMessageProps) => {\n  const excessCharacters = useMemo(() => entry.length - MAX_CHARACTERS, [entry]);\n  const needsHighlighter =\n    highlights && highlights.length > 0 && highlights[0] && highlights[0].length > 0 && excessCharacters <= 0;\n  const searchWords = highlights ?? [];\n  const [showFull, setShowFull] = useState(excessCharacters < 0);\n  const truncatedEntry = useMemo(() => (showFull ? entry : entry.substring(0, MAX_CHARACTERS)), [entry, showFull]);\n\n  if (hasAnsi) {\n    const highlight = needsHighlighter ? { searchWords, highlightClassName: styles.logsRowMatchHighLight } : undefined;\n    return <LogMessageAnsi value={truncatedEntry} highlight={highlight} />;\n  } else if (needsHighlighter) {\n    return (\n      <Highlighter\n        textToHighlight={truncatedEntry}\n        searchWords={searchWords}\n        findChunks={findHighlightChunksInText}\n        highlightClassName={styles.logsRowMatchHighLight}\n      />\n    );\n  }\n  return (\n    <>\n      {truncatedEntry}\n      {!showFull && <Ellipsis showFull={showFull} toggle={setShowFull} diff={excessCharacters} />}\n    </>\n  );\n};\n\ninterface EllipsisProps {\n  showFull: boolean;\n  toggle(state: boolean): void;\n  diff: number;\n}\nconst Ellipsis = ({ toggle, diff }: EllipsisProps) => {\n  const styles = getEllipsisStyles(useTheme2());\n  const handleClick = (e: SyntheticEvent) => {\n    e.stopPropagation();\n    toggle(true);\n  };\n  return (\n    <>\n      <Trans i18nKey=\"logs.log-row-message.ellipsis\">… </Trans>\n      <span className={styles.showMore} onClick={handleClick}>\n        {diff} <Trans i18nKey=\"logs.log-row-message.more\">more</Trans>\n      </span>\n    </>\n  );\n};\n\nconst getEllipsisStyles = (theme: GrafanaTheme2) => ({\n  showMore: css({\n    display: 'inline-flex',\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.size.sm,\n    fontFamily: theme.typography.fontFamily,\n    height: theme.spacing(3),\n    padding: theme.spacing(0.25, 1),\n    color: theme.colors.secondary.text,\n    border: `1px solid ${theme.colors.border.strong}`,\n    '&:hover': {\n      background: theme.colors.secondary.transparent,\n      borderColor: theme.colors.emphasize(theme.colors.border.strong, 0.25),\n      color: theme.colors.secondary.text,\n    },\n  }),\n});\n\nconst restructureLog = (\n  line: string,\n  prettifyLogMessage: boolean,\n  wrapLogMessage: boolean,\n  expanded: boolean\n): string => {\n  if (prettifyLogMessage) {\n    try {\n      return JSON.stringify(JSON.parse(line), undefined, 2);\n    } catch (error) {}\n  }\n  // With wrapping disabled, we want to turn it into a single-line log entry unless the line is expanded\n  if (!wrapLogMessage && !expanded) {\n    line = line.replace(/(\\r\\n|\\n|\\r)/g, '');\n  }\n  return line;\n};\n\nexport const LogRowMessage = memo((props: Props) => {\n  const {\n    row,\n    wrapLogMessage,\n    prettifyLogMessage,\n    showContextToggle,\n    styles,\n    onOpenContext,\n    onPermalinkClick,\n    onUnpinLine,\n    onPinLine,\n    pinLineButtonTooltipTitle,\n    pinned,\n    mouseIsOver,\n    onBlur,\n    getRowContextQuery,\n    expanded,\n    logRowMenuIconsBefore,\n    logRowMenuIconsAfter,\n  } = props;\n  const { hasAnsi, raw } = row;\n  const restructuredEntry = useMemo(\n    () => restructureLog(raw, prettifyLogMessage, wrapLogMessage, Boolean(expanded)),\n    [raw, prettifyLogMessage, wrapLogMessage, expanded]\n  );\n  const shouldShowMenu = mouseIsOver || pinned;\n\n  return (\n    <>\n      {\n        // When context is open, the position has to be NOT relative. // Setting the postion as inline-style to\n        // overwrite the more sepecific style definition from `styles.logsRowMessage`.\n      }\n      <td className={styles.logsRowMessage}>\n        <div className={wrapLogMessage ? styles.positionRelative : styles.horizontalScroll}>\n          <div className={`${styles.logLine} ${styles.positionRelative}`}>\n            <LogMessage hasAnsi={hasAnsi} entry={restructuredEntry} highlights={row.searchWords} styles={styles} />\n          </div>\n        </div>\n      </td>\n      <td className={`log-row-menu-cell ${styles.logRowMenuCell}`}>\n        {shouldShowMenu && (\n          <LogRowMenuCell\n            logText={restructuredEntry}\n            row={row}\n            showContextToggle={showContextToggle}\n            getRowContextQuery={getRowContextQuery}\n            onOpenContext={onOpenContext}\n            onPermalinkClick={onPermalinkClick}\n            onPinLine={onPinLine}\n            onUnpinLine={onUnpinLine}\n            pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n            pinned={pinned}\n            styles={styles}\n            mouseIsOver={mouseIsOver}\n            onBlur={onBlur}\n            addonBefore={logRowMenuIconsBefore}\n            addonAfter={logRowMenuIconsAfter}\n          />\n        )}\n      </td>\n    </>\n  );\n});\n\nLogRowMessage.displayName = 'LogRowMessage';\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2, LogRowModel } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Menu, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { copyText } from '../../logs/utils';\n\ninterface PopoverMenuProps {\n  selection: string;\n  x: number;\n  y: number;\n  onClickFilterString?: (value: string, refId?: string) => void;\n  onClickFilterOutString?: (value: string, refId?: string) => void;\n  onDisable: () => void;\n  row: LogRowModel;\n  close: () => void;\n}\n\nexport const PopoverMenu = ({\n  x,\n  y,\n  onClickFilterString,\n  onClickFilterOutString,\n  selection,\n  row,\n  close,\n  ...props\n}: PopoverMenuProps) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    function handleEscape(e: KeyboardEvent) {\n      if (e.key === 'Escape') {\n        close();\n      }\n    }\n    document.addEventListener('keyup', handleEscape);\n\n    return () => {\n      document.removeEventListener('keyup', handleEscape);\n    };\n  }, [close]);\n\n  const onDisable = useCallback(() => {\n    track('popover_menu_disabled', selection.length, row.datasourceType);\n    props.onDisable();\n  }, [props, row.datasourceType, selection.length]);\n\n  const supported = onClickFilterString || onClickFilterOutString;\n\n  if (!supported) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className={styles.menu} style={{ top: y, left: x }}>\n        <Menu ref={containerRef}>\n          <Menu.Item\n            label={t('logs.popover-menu.copy', 'Copy selection')}\n            onClick={() => {\n              copyText(selection, containerRef);\n              close();\n              track('copy', selection.length, row.datasourceType);\n            }}\n          />\n          {onClickFilterString && (\n            <Menu.Item\n              label={t('logs.popover-menu.line-contains', 'Add as line contains filter')}\n              onClick={() => {\n                onClickFilterString(selection, row.dataFrame.refId);\n                close();\n                track('line_contains', selection.length, row.datasourceType);\n              }}\n            />\n          )}\n          {onClickFilterOutString && (\n            <Menu.Item\n              label={t('logs.popover-menu.line-contains-not', 'Add as line does not contain filter')}\n              onClick={() => {\n                onClickFilterOutString(selection, row.dataFrame.refId);\n                close();\n                track('line_does_not_contain', selection.length, row.datasourceType);\n              }}\n            />\n          )}\n          <Menu.Divider />\n          <Menu.Item label={t('logs.popover-menu.disable-menu', 'Disable menu')} onClick={onDisable} />\n        </Menu>\n      </div>\n    </>\n  );\n};\n\nfunction track(action: string, selectionLength: number, dataSourceType: string | undefined) {\n  reportInteraction(`grafana_explore_logs_popover_menu`, {\n    action,\n    selectionLength: selectionLength,\n    datasourceType: dataSourceType || 'unknown',\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  menu: css({\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n  }),\n});\n","// this class generates react-keys that are guaranteed to be unique.\n// it will try to use the provided `maybeId`, but if that's a duplicate,\n// it will use an index-based key.\n// NOTE: it will always add a prefix to the string, this is necessary\n// to avoid the problem if your proposed key would conflict with\n// the index-based names\nexport class UniqueKeyMaker {\n  seen: Set<string>;\n  count: number;\n  constructor() {\n    this.seen = new Set();\n    this.count = 0;\n  }\n\n  getKey(proposedKey: string) {\n    this.count += 1;\n    const maybeKey = `k_${proposedKey}`;\n    if (this.seen.has(maybeKey)) {\n      return `i_${this.count}`;\n    } else {\n      this.seen.add(maybeKey);\n      return maybeKey;\n    }\n  }\n}\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsStatsRow: css({\n    label: 'logs-stats-row',\n    margin: `${parseInt(theme.spacing(2), 10) / 1.75}px 0`,\n  }),\n  logsStatsRowActive: css({\n    label: 'logs-stats-row--active',\n    color: theme.colors.primary.text,\n    position: 'relative',\n  }),\n  logsStatsRowLabel: css({\n    label: 'logs-stats-row__label',\n    display: 'flex',\n    marginBottom: '1px',\n  }),\n  logsStatsRowValue: css({\n    label: 'logs-stats-row__value',\n    flex: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  logsStatsRowCount: css({\n    label: 'logs-stats-row__count',\n    textAlign: 'right',\n    marginLeft: theme.spacing(0.75),\n  }),\n  logsStatsRowPercent: css({\n    label: 'logs-stats-row__percent',\n    textAlign: 'right',\n    marginLeft: theme.spacing(0.75),\n    width: theme.spacing(4.5),\n  }),\n  logsStatsRowBar: css({\n    label: 'logs-stats-row__bar',\n    height: theme.spacing(0.5),\n    overflow: 'hidden',\n    background: theme.colors.text.disabled,\n  }),\n  logsStatsRowInnerBar: css({\n    label: 'logs-stats-row__innerbar',\n    height: theme.spacing(0.5),\n    overflow: 'hidden',\n    background: theme.colors.primary.main,\n  }),\n});\n\nexport interface Props {\n  active?: boolean;\n  count: number;\n  proportion: number;\n  value?: string;\n}\n\nexport const LogLabelStatsRow = ({ active, count, proportion, value }: Props) => {\n  const style = useStyles2(getStyles);\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = active ? cx([style.logsStatsRow, style.logsStatsRowActive]) : cx([style.logsStatsRow]);\n\n  return (\n    <div className={className}>\n      <div className={cx([style.logsStatsRowLabel])}>\n        <div className={cx([style.logsStatsRowValue])} title={value}>\n          {value}\n        </div>\n        <div className={cx([style.logsStatsRowCount])}>{count}</div>\n        <div className={cx([style.logsStatsRowPercent])}>{percent}</div>\n      </div>\n      <div className={cx([style.logsStatsRowBar])}>\n        <div className={cx([style.logsStatsRowInnerBar])} style={barStyle} />\n      </div>\n    </div>\n  );\n};\n\nLogLabelStatsRow.displayName = 'LogLabelStatsRow';\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { LogLabelStatsModel, GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory, withTheme2, Themeable2 } from '@grafana/ui';\n\n//Components\nimport { LogLabelStatsRow } from './LogLabelStatsRow';\n\nconst STATS_ROW_LIMIT = 5;\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    logsStats: css({\n      label: 'logs-stats',\n      background: 'inherit',\n      color: theme.colors.text.primary,\n      wordBreak: 'break-all',\n      width: 'fit-content',\n      maxWidth: '100%',\n    }),\n    logsStatsHeader: css({\n      label: 'logs-stats__header',\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      display: 'flex',\n    }),\n    logsStatsTitle: css({\n      label: 'logs-stats__title',\n      fontWeight: theme.typography.fontWeightMedium,\n      paddingRight: theme.spacing(2),\n      display: 'inline-block',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      flexGrow: 1,\n    }),\n    logsStatsClose: css({\n      label: 'logs-stats__close',\n      cursor: 'pointer',\n    }),\n    logsStatsBody: css({\n      label: 'logs-stats__body',\n      padding: '5px 0px',\n    }),\n  };\n});\n\ninterface Props extends Themeable2 {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  isLabel?: boolean;\n}\n\nclass UnThemedLogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, theme, isLabel } = this.props;\n    const style = getStyles(theme);\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find((row) => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find((row) => row.value === value);\n      otherRows = otherRows.filter((row) => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className={style.logsStats} data-testid=\"logLabelStats\">\n        <div className={style.logsStatsHeader}>\n          <div className={style.logsStatsTitle}>\n            {label}: {total} of {rowCount} rows have that {isLabel ? 'label' : 'field'}\n          </div>\n        </div>\n        <div className={style.logsStatsBody}>\n          {topRows.map((stat) => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LogLabelStats = withTheme2(UnThemedLogLabelStats);\nLogLabelStats.displayName = 'LogLabelStats';\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport { PureComponent, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  CoreApp,\n  DataFrame,\n  Field,\n  GrafanaTheme2,\n  IconName,\n  LinkModel,\n  LogLabelStatsModel,\n  LogRowModel,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  ClipboardButton,\n  DataLinkButton,\n  IconButton,\n  PopoverContent,\n  Themeable2,\n  Tooltip,\n  withTheme2,\n} from '@grafana/ui';\n\nimport { logRowToSingleRowDataFrame } from '../logsModel';\nimport { getLabelTypeFromRow } from '../utils';\n\nimport { LogLabelStats } from './LogLabelStats';\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport interface Props extends Themeable2 {\n  parsedValues: string[];\n  parsedKeys: string[];\n  disableActions: boolean;\n  wrapLogMessage?: boolean;\n  isLabel?: boolean;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  links?: Array<LinkModel<Field>>;\n  getStats: () => LogLabelStatsModel[] | null;\n  displayedFields?: string[];\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  row: LogRowModel;\n  app?: CoreApp;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n}\n\ninterface State {\n  showFieldsStats: boolean;\n  fieldCount: number;\n  fieldStats: LogLabelStatsModel[] | null;\n}\n\nconst getStyles = memoizeOne((theme: GrafanaTheme2) => {\n  return {\n    labelType: css({\n      border: `solid 1px ${theme.colors.text.secondary}`,\n      color: theme.colors.text.secondary,\n      borderRadius: theme.shape.radius.circle,\n      fontSize: theme.spacing(1),\n      lineHeight: theme.spacing(1.25),\n      height: theme.spacing(1.5),\n      width: theme.spacing(1.5),\n      display: 'flex',\n      justifyContent: 'center',\n      verticalAlign: 'middle',\n      marginLeft: theme.spacing(1),\n    }),\n    wordBreakAll: css({\n      label: 'wordBreakAll',\n      wordBreak: 'break-all',\n    }),\n    copyButton: css({\n      '& > button': {\n        color: theme.colors.text.secondary,\n        padding: 0,\n        justifyContent: 'center',\n        borderRadius: theme.shape.radius.circle,\n        height: theme.spacing(theme.components.height.sm),\n        width: theme.spacing(theme.components.height.sm),\n        svg: {\n          margin: 0,\n        },\n\n        'span > div': {\n          top: '-5px',\n          '& button': {\n            color: theme.colors.success.main,\n          },\n        },\n      },\n    }),\n    adjoiningLinkButton: css({\n      marginLeft: theme.spacing(1),\n    }),\n    wrapLine: css({\n      label: 'wrapLine',\n      whiteSpace: 'pre-wrap',\n    }),\n    logDetailsStats: css({\n      padding: `0 ${theme.spacing(1)}`,\n    }),\n    logDetailsValue: css({\n      display: 'flex',\n      alignItems: 'center',\n      lineHeight: '22px',\n\n      '.log-details-value-copy': {\n        visibility: 'hidden',\n      },\n      '&:hover': {\n        '.log-details-value-copy': {\n          visibility: 'visible',\n        },\n      },\n    }),\n    buttonRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(0.5),\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n});\n\nclass UnThemedLogDetailsRow extends PureComponent<Props, State> {\n  state: State = {\n    showFieldsStats: false,\n    fieldCount: 0,\n    fieldStats: null,\n  };\n\n  componentDidUpdate() {\n    if (this.state.showFieldsStats) {\n      this.updateStats();\n    }\n  }\n\n  showField = () => {\n    const { onClickShowField: onClickShowDetectedField, parsedKeys, row } = this.props;\n    if (onClickShowDetectedField) {\n      onClickShowDetectedField(parsedKeys[0]);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_replace_line_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'enable',\n    });\n  };\n\n  hideField = () => {\n    const { onClickHideField: onClickHideDetectedField, parsedKeys, row } = this.props;\n    if (onClickHideDetectedField) {\n      onClickHideDetectedField(parsedKeys[0]);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_replace_line_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'disable',\n    });\n  };\n\n  isFilterLabelActive = async () => {\n    const { isFilterLabelActive, parsedKeys, parsedValues, row } = this.props;\n    if (isFilterLabelActive) {\n      return await isFilterLabelActive(parsedKeys[0], parsedValues[0], row.dataFrame?.refId);\n    }\n    return false;\n  };\n\n  filterLabel = () => {\n    const { onClickFilterLabel, parsedKeys, parsedValues, row } = this.props;\n    if (onClickFilterLabel) {\n      onClickFilterLabel(parsedKeys[0], parsedValues[0], logRowToSingleRowDataFrame(row) || undefined);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_filter_clicked', {\n      datasourceType: row.datasourceType,\n      filterType: 'include',\n      logRowUid: row.uid,\n    });\n  };\n\n  filterOutLabel = () => {\n    const { onClickFilterOutLabel, parsedKeys, parsedValues, row } = this.props;\n    if (onClickFilterOutLabel) {\n      onClickFilterOutLabel(parsedKeys[0], parsedValues[0], logRowToSingleRowDataFrame(row) || undefined);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_filter_clicked', {\n      datasourceType: row.datasourceType,\n      filterType: 'exclude',\n      logRowUid: row.uid,\n    });\n  };\n\n  updateStats = () => {\n    const { getStats } = this.props;\n    const fieldStats = getStats();\n    const fieldCount = fieldStats ? fieldStats.reduce((sum, stat) => sum + stat.count, 0) : 0;\n    if (!isEqual(this.state.fieldStats, fieldStats) || fieldCount !== this.state.fieldCount) {\n      this.setState({ fieldStats, fieldCount });\n    }\n  };\n\n  showStats = () => {\n    const { isLabel, row, app } = this.props;\n    const { showFieldsStats } = this.state;\n    if (!showFieldsStats) {\n      this.updateStats();\n    }\n    this.toggleFieldsStats();\n\n    reportInteraction('grafana_explore_logs_log_details_stats_clicked', {\n      dataSourceType: row.datasourceType,\n      fieldType: isLabel ? 'label' : 'detectedField',\n      type: showFieldsStats ? 'close' : 'open',\n      logRowUid: row.uid,\n      app,\n    });\n  };\n\n  toggleFieldsStats() {\n    this.setState((state) => {\n      return {\n        showFieldsStats: !state.showFieldsStats,\n      };\n    });\n  }\n\n  generateClipboardButton(val: string) {\n    const { theme } = this.props;\n    const styles = getStyles(theme);\n\n    return (\n      <div className={`log-details-value-copy ${styles.copyButton}`}>\n        <ClipboardButton\n          getText={() => val}\n          title=\"Copy value to clipboard\"\n          fill=\"text\"\n          variant=\"secondary\"\n          icon=\"copy\"\n          size=\"md\"\n        />\n      </div>\n    );\n  }\n\n  generateMultiVal(value: string[], showCopy?: boolean) {\n    return (\n      <table>\n        <tbody>\n          {value?.map((val, i) => {\n            return (\n              <tr key={`${val}-${i}`}>\n                <td>\n                  {val}\n                  {showCopy && val !== '' && this.generateClipboardButton(val)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    const {\n      theme,\n      parsedKeys,\n      parsedValues,\n      isLabel,\n      links,\n      displayedFields,\n      wrapLogMessage,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      disableActions,\n      row,\n      app,\n      onPinLine,\n      pinLineButtonTooltipTitle,\n    } = this.props;\n    const { showFieldsStats, fieldStats, fieldCount } = this.state;\n    const styles = getStyles(theme);\n    const rowStyles = getLogRowStyles(theme);\n    const singleKey = parsedKeys == null ? false : parsedKeys.length === 1;\n    const singleVal = parsedValues == null ? false : parsedValues.length === 1;\n    const hasFilteringFunctionality = !disableActions && onClickFilterLabel && onClickFilterOutLabel;\n    const refIdTooltip = app === CoreApp.Explore && row.dataFrame?.refId ? ` in query ${row.dataFrame?.refId}` : '';\n    const labelType = singleKey ? getLabelTypeFromRow(parsedKeys[0], row) : null;\n\n    const isMultiParsedValueWithNoContent =\n      !singleVal && parsedValues != null && !parsedValues.every((val) => val === '');\n\n    const toggleFieldButton =\n      displayedFields && parsedKeys != null && displayedFields.includes(parsedKeys[0]) ? (\n        <IconButton variant=\"primary\" tooltip=\"Hide this field\" name=\"eye\" onClick={this.hideField} />\n      ) : (\n        <IconButton tooltip=\"Show this field instead of the message\" name=\"eye\" onClick={this.showField} />\n      );\n\n    return (\n      <>\n        <tr className={rowStyles.logDetailsValue}>\n          <td className={rowStyles.logsDetailsIcon}>\n            <div className={styles.buttonRow}>\n              {hasFilteringFunctionality && (\n                <>\n                  <AsyncIconButton\n                    name=\"search-plus\"\n                    onClick={this.filterLabel}\n                    // We purposely want to pass a new function on every render to allow the active state to be updated when log details remains open between updates.\n                    isActive={() => this.isFilterLabelActive()}\n                    tooltipSuffix={refIdTooltip}\n                  />\n                  <IconButton\n                    name=\"search-minus\"\n                    tooltip={`Filter out value${refIdTooltip}`}\n                    onClick={this.filterOutLabel}\n                  />\n                </>\n              )}\n              {!disableActions && displayedFields && toggleFieldButton}\n              {!disableActions && (\n                <IconButton\n                  variant={showFieldsStats ? 'primary' : 'secondary'}\n                  name=\"signal\"\n                  tooltip=\"Ad-hoc statistics\"\n                  className=\"stats-button\"\n                  disabled={!singleKey}\n                  onClick={this.showStats}\n                />\n              )}\n            </div>\n          </td>\n\n          <td>{labelType && <LabelTypeBadge type={labelType} styles={styles} />}</td>\n          {/* Key - value columns */}\n          <td className={rowStyles.logDetailsLabel}>{singleKey ? parsedKeys[0] : this.generateMultiVal(parsedKeys)}</td>\n          <td className={cx(styles.wordBreakAll, wrapLogMessage && styles.wrapLine)}>\n            <div className={styles.logDetailsValue}>\n              {singleVal ? parsedValues[0] : this.generateMultiVal(parsedValues, true)}\n              {singleVal && this.generateClipboardButton(parsedValues[0])}\n              <div className={cx((singleVal || isMultiParsedValueWithNoContent) && styles.adjoiningLinkButton)}>\n                {links?.map((link, i) => {\n                  if (link.onClick && onPinLine) {\n                    const originalOnClick = link.onClick;\n                    link.onClick = (e, origin) => {\n                      // Pin the line\n                      onPinLine(row, false);\n\n                      // Execute the link onClick function\n                      originalOnClick(e, origin);\n                    };\n                  }\n                  return (\n                    <span key={`${link.title}-${i}`}>\n                      <DataLinkButton\n                        buttonProps={{\n                          // Show tooltip message if max number of pinned lines has been reached\n                          tooltip:\n                            typeof pinLineButtonTooltipTitle === 'object' && link.onClick\n                              ? pinLineButtonTooltipTitle\n                              : undefined,\n                        }}\n                        link={link}\n                      />\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </td>\n        </tr>\n        {showFieldsStats && singleKey && singleVal && (\n          <tr>\n            <td colSpan={2}>\n              <IconButton\n                variant={showFieldsStats ? 'primary' : 'secondary'}\n                name=\"signal\"\n                tooltip=\"Hide ad-hoc statistics\"\n                onClick={this.showStats}\n              />\n            </td>\n            <td colSpan={2}>\n              <div className={styles.logDetailsStats}>\n                <LogLabelStats\n                  stats={fieldStats!}\n                  label={parsedKeys[0]}\n                  value={parsedValues[0]}\n                  rowCount={fieldCount}\n                  isLabel={isLabel}\n                />\n              </div>\n            </td>\n          </tr>\n        )}\n      </>\n    );\n  }\n}\n\nfunction LabelTypeBadge({ type, styles }: { type: string; styles: ReturnType<typeof getStyles> }) {\n  return (\n    <Tooltip content={type}>\n      <div className={styles.labelType}>\n        <span>{type.substring(0, 1)}</span>\n      </div>\n    </Tooltip>\n  );\n}\n\ninterface AsyncIconButtonProps extends Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> {\n  name: IconName;\n  isActive(): Promise<boolean>;\n  tooltipSuffix: string;\n}\n\nconst AsyncIconButton = ({ isActive, tooltipSuffix, ...rest }: AsyncIconButtonProps) => {\n  const [active, setActive] = useState(false);\n  const tooltip = active ? 'Remove filter' : 'Filter for value';\n\n  useEffect(() => {\n    isActive().then(setActive);\n  }, [isActive]);\n\n  return <IconButton {...rest} variant={active ? 'primary' : undefined} tooltip={tooltip + tooltipSuffix} />;\n};\n\nexport const LogDetailsRow = withTheme2(UnThemedLogDetailsRow);\nLogDetailsRow.displayName = 'LogDetailsRow';\n","import { cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { CoreApp, DataFrame, DataFrameType, Field, LinkModel, LogRowModel } from '@grafana/data';\nimport { PopoverContent, Themeable2, withTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { calculateLogsLabelStats, calculateStats } from '../utils';\n\nimport { LogDetailsBody } from './LogDetailsBody';\nimport { LogDetailsRow } from './LogDetailsRow';\nimport { getLogLevelStyles, LogRowStyles } from './getLogRowStyles';\nimport { getAllFields, createLogLineLinks } from './logParser';\n\nexport interface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  getRows: () => LogRowModel[];\n  wrapLogMessage: boolean;\n  className?: string;\n  hasError?: boolean;\n  app?: CoreApp;\n  styles: LogRowStyles;\n\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  displayedFields?: string[];\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n\n  onPinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n}\n\nclass UnThemedLogDetails extends PureComponent<Props> {\n  render() {\n    const {\n      app,\n      row,\n      theme,\n      hasError,\n      onClickFilterOutLabel,\n      onClickFilterLabel,\n      getRows,\n      showDuplicates,\n      className,\n      onClickShowField,\n      onClickHideField,\n      displayedFields,\n      getFieldLinks,\n      wrapLogMessage,\n      onPinLine,\n      styles,\n      pinLineButtonTooltipTitle,\n    } = this.props;\n    const levelStyles = getLogLevelStyles(theme, row.logLevel);\n    const labels = row.labels ? row.labels : {};\n    const labelsAvailable = Object.keys(labels).length > 0;\n    const fieldsAndLinks = getAllFields(row, getFieldLinks);\n    let fieldsWithLinks = fieldsAndLinks.filter((f) => f.links?.length);\n    const displayedFieldsWithLinks = fieldsWithLinks.filter((f) => f.fieldIndex !== row.entryFieldIndex).sort();\n    const hiddenFieldsWithLinks = fieldsWithLinks.filter((f) => f.fieldIndex === row.entryFieldIndex).sort();\n    const fieldsWithLinksFromVariableMap = createLogLineLinks(hiddenFieldsWithLinks);\n    const fieldsWithLinksAvailable =\n      (displayedFieldsWithLinks && displayedFieldsWithLinks.length > 0) ||\n      (fieldsWithLinksFromVariableMap && fieldsWithLinksFromVariableMap.length > 0);\n\n    const fields =\n      row.dataFrame.meta?.type === DataFrameType.LogLines\n        ? // for LogLines frames (dataplane) we don't want to show any additional fields besides already extracted labels and links\n          []\n        : // for other frames, do not show the log message unless there is a link attached\n          fieldsAndLinks.filter((f) => f.links?.length === 0 && f.fieldIndex !== row.entryFieldIndex).sort();\n    const fieldsAvailable = fields && fields.length > 0;\n\n    // If logs with error, we are not showing the level color\n    const levelClassName = hasError\n      ? ''\n      : `${levelStyles.logsRowLevelColor} ${styles.logsRowLevel} ${styles.logsRowLevelDetails}`;\n\n    return (\n      <tr className={cx(className, styles.logDetails)}>\n        {showDuplicates && <td />}\n        <td className={levelClassName} aria-label=\"Log level\" />\n        <td colSpan={4}>\n          <div className={styles.logDetailsContainer}>\n            <table className={styles.logDetailsTable}>\n              <tbody>\n                {displayedFields && displayedFields.length > 0 && (\n                  <>\n                    <tr>\n                      <td colSpan={100} className={styles.logDetailsHeading} aria-label=\"Fields\">\n                        <Trans i18nKey=\"logs.log-details.log-line\">Log line</Trans>\n                      </td>\n                    </tr>\n                    <LogDetailsBody\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      row={row}\n                      app={app}\n                      displayedFields={displayedFields}\n                      disableActions={false}\n                      theme={theme}\n                    />\n                  </>\n                )}\n                {(labelsAvailable || fieldsAvailable) && (\n                  <tr>\n                    <td colSpan={100} className={styles.logDetailsHeading} aria-label=\"Fields\">\n                      <Trans i18nKey=\"logs.log-details.fields\">Fields</Trans>\n                    </td>\n                  </tr>\n                )}\n                {Object.keys(labels)\n                  .sort()\n                  .map((key, i) => {\n                    const value = labels[key];\n                    return (\n                      <LogDetailsRow\n                        key={`${key}=${value}-${i}`}\n                        parsedKeys={[key]}\n                        parsedValues={[value]}\n                        isLabel={true}\n                        getStats={() => calculateLogsLabelStats(getRows(), key)}\n                        onClickFilterOutLabel={onClickFilterOutLabel}\n                        onClickFilterLabel={onClickFilterLabel}\n                        onClickShowField={onClickShowField}\n                        onClickHideField={onClickHideField}\n                        row={row}\n                        app={app}\n                        wrapLogMessage={wrapLogMessage}\n                        displayedFields={displayedFields}\n                        disableActions={false}\n                        isFilterLabelActive={this.props.isFilterLabelActive}\n                      />\n                    );\n                  })}\n                {fields.map((field, i) => {\n                  const { keys, values, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onClickFilterOutLabel={onClickFilterOutLabel}\n                      onClickFilterLabel={onClickFilterLabel}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={false}\n                      isFilterLabelActive={this.props.isFilterLabelActive}\n                    />\n                  );\n                })}\n\n                {fieldsWithLinksAvailable && (\n                  <tr>\n                    <td colSpan={100} className={styles.logDetailsHeading} aria-label=\"Data Links\">\n                      <Trans i18nKey=\"logs.log-details.links\">Links</Trans>\n                    </td>\n                  </tr>\n                )}\n                {displayedFieldsWithLinks.map((field, i) => {\n                  const { keys, values, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      links={links}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onPinLine={onPinLine}\n                      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={false}\n                    />\n                  );\n                })}\n                {fieldsWithLinksFromVariableMap?.map((field, i) => {\n                  const { keys, values, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      links={links}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onPinLine={onPinLine}\n                      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={true}\n                    />\n                  );\n                })}\n\n                {!fieldsAvailable && !labelsAvailable && !fieldsWithLinksAvailable && (\n                  <tr>\n                    <td colSpan={100} aria-label=\"No details\">\n                      <Trans i18nKey=\"logs.log-details.no-details\">No details available</Trans>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport const LogDetails = withTheme2(UnThemedLogDetails);\nLogDetails.displayName = 'LogDetails';\n","import { css } from '@emotion/css';\nimport { memo, ReactNode, useMemo } from 'react';\n\nimport { LogRowModel, Field, LinkModel, DataFrame } from '@grafana/data';\n\nimport { LOG_LINE_BODY_FIELD_NAME } from './LogDetailsBody';\nimport { LogRowMenuCell } from './LogRowMenuCell';\nimport { LogRowStyles } from './getLogRowStyles';\nimport { getAllFields } from './logParser';\n\nexport interface Props {\n  row: LogRowModel;\n  detectedFields: string[];\n  wrapLogMessage: boolean;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  styles: LogRowStyles;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinned?: boolean;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n  logRowMenuIconsBefore?: ReactNode[];\n  logRowMenuIconsAfter?: ReactNode[];\n  preview?: boolean;\n}\n\nexport const LogRowMessageDisplayedFields = memo((props: Props) => {\n  const {\n    row,\n    detectedFields,\n    getFieldLinks,\n    wrapLogMessage,\n    styles,\n    mouseIsOver,\n    pinned,\n    logRowMenuIconsBefore,\n    logRowMenuIconsAfter,\n    preview,\n    ...rest\n  } = props;\n  const wrapClassName = wrapLogMessage ? '' : displayedFieldsStyles.noWrap;\n  const fields = useMemo(() => getAllFields(row, getFieldLinks), [getFieldLinks, row]);\n  // only single key/value rows are filterable, so we only need the first field key for filtering\n  const line = useMemo(() => {\n    let line = '';\n    for (let i = 0; i < detectedFields.length; i++) {\n      const parsedKey = detectedFields[i];\n\n      if (parsedKey === LOG_LINE_BODY_FIELD_NAME) {\n        line += ` ${row.entry}`;\n      }\n\n      const field = fields.find((field) => {\n        return field.keys[0] === parsedKey;\n      });\n\n      if (field != null) {\n        line += ` ${parsedKey}=${field.values}`;\n      }\n\n      if (row.labels[parsedKey] != null && row.labels[parsedKey] != null) {\n        line += ` ${parsedKey}=${row.labels[parsedKey]}`;\n      }\n    }\n    return line.trimStart();\n  }, [detectedFields, fields, row.entry, row.labels]);\n\n  const shouldShowMenu = mouseIsOver || pinned;\n\n  if (preview) {\n    return (\n      <>\n        <td>\n          <div>{line}</div>\n        </td>\n        <td></td>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <td className={styles.logsRowMessage}>\n        <div className={wrapClassName}>{line}</div>\n      </td>\n      <td className={`log-row-menu-cell ${styles.logRowMenuCell}`}>\n        {shouldShowMenu && (\n          <LogRowMenuCell\n            logText={line}\n            row={row}\n            styles={styles}\n            pinned={pinned}\n            mouseIsOver={mouseIsOver}\n            addonBefore={logRowMenuIconsBefore}\n            addonAfter={logRowMenuIconsAfter}\n            {...rest}\n          />\n        )}\n      </td>\n    </>\n  );\n});\n\nconst displayedFieldsStyles = {\n  noWrap: css({\n    whiteSpace: 'nowrap',\n  }),\n};\n\nLogRowMessageDisplayedFields.displayName = 'LogRowMessageDisplayedFields';\n","import { debounce } from 'lodash';\nimport { MouseEvent, ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  CoreApp,\n  DataFrame,\n  dateTimeFormat,\n  Field,\n  LinkModel,\n  LogRowContextOptions,\n  LogRowModel,\n  LogsSortOrder,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Icon, PopoverContent, Tooltip, useTheme2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { checkLogsError, checkLogsSampled, escapeUnescapedString } from '../utils';\n\nimport { LogDetails } from './LogDetails';\nimport { LogLabels } from './LogLabels';\nimport { LogRowMessage } from './LogRowMessage';\nimport { LogRowMessageDisplayedFields } from './LogRowMessageDisplayedFields';\nimport { getLogLevelStyles, LogRowStyles } from './getLogRowStyles';\n\nexport interface Props {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  forceEscape?: boolean;\n  app?: CoreApp;\n  displayedFields?: string[];\n  getRows: () => LogRowModel[];\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onContextClick?: () => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  onLogRowHover?: (row?: LogRowModel) => void;\n  onOpenContext: (row: LogRowModel, onClose: () => void) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  styles: LogRowStyles;\n  permalinkedRowId?: string;\n  scrollIntoView?: (element: HTMLElement) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  handleTextSelection?: (e: MouseEvent<HTMLTableRowElement>, row: LogRowModel) => boolean;\n  logRowMenuIconsBefore?: ReactNode[];\n  logRowMenuIconsAfter?: ReactNode[];\n}\n\nexport const LogRow = ({\n  getRows,\n  onClickFilterLabel,\n  onClickFilterOutLabel,\n  onClickShowField,\n  onClickHideField,\n  enableLogDetails,\n  row,\n  showDuplicates,\n  showContextToggle,\n  showLabels,\n  showTime,\n  displayedFields,\n  wrapLogMessage,\n  prettifyLogMessage,\n  getFieldLinks,\n  forceEscape,\n  app,\n  styles,\n  getRowContextQuery,\n  pinned,\n  logRowMenuIconsBefore,\n  logRowMenuIconsAfter,\n  timeZone,\n  permalinkedRowId,\n  scrollIntoView,\n  handleTextSelection,\n  onLogRowHover,\n  ...props\n}: Props) => {\n  const [showingContext, setShowingContext] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [mouseIsOver, setMouseIsOver] = useState(false);\n  const [permalinked, setPermalinked] = useState(false);\n  const logLineRef = useRef<HTMLTableRowElement | null>(null);\n  const theme = useTheme2();\n\n  const timestamp = useMemo(\n    () =>\n      dateTimeFormat(row.timeEpochMs, {\n        timeZone: timeZone,\n        defaultWithMS: true,\n      }),\n    [row.timeEpochMs, timeZone]\n  );\n  const levelStyles = useMemo(() => getLogLevelStyles(theme, row.logLevel), [row.logLevel, theme]);\n  const processedRow = useMemo(\n    () =>\n      row.hasUnescapedContent && forceEscape\n        ? { ...row, entry: escapeUnescapedString(row.entry), raw: escapeUnescapedString(row.raw) }\n        : row,\n    [forceEscape, row]\n  );\n  const errorMessage = checkLogsError(row);\n  const hasError = errorMessage !== undefined;\n  const sampleMessage = checkLogsSampled(row);\n  const isSampled = sampleMessage !== undefined;\n\n  useEffect(() => {\n    if (permalinkedRowId !== row.uid) {\n      setPermalinked(false);\n      return;\n    }\n    if (!permalinked) {\n      setPermalinked(true);\n      return;\n    }\n\n    if (logLineRef.current && scrollIntoView) {\n      // at this point this row is the permalinked row, so we need to scroll to it and highlight it if possible.\n      scrollIntoView(logLineRef.current);\n      reportInteraction('grafana_explore_logs_permalink_opened', {\n        datasourceType: row.datasourceType ?? 'unknown',\n        logRowUid: row.uid,\n      });\n      setPermalinked(true);\n    }\n  }, [permalinked, permalinkedRowId, row.datasourceType, row.uid, scrollIntoView]);\n\n  // we are debouncing the state change by 3 seconds to highlight the logline after the context closed.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debouncedContextClose = useCallback(\n    debounce(() => {\n      setShowingContext(false);\n    }, 3000),\n    []\n  );\n\n  const onOpenContext = useCallback(\n    (row: LogRowModel) => {\n      setShowingContext(true);\n      props.onOpenContext(row, debouncedContextClose);\n    },\n    [debouncedContextClose, props]\n  );\n\n  const onRowClick = useCallback(\n    (e: MouseEvent<HTMLTableRowElement>) => {\n      if (handleTextSelection?.(e, row)) {\n        // Event handled by the parent.\n        return;\n      }\n\n      if (!enableLogDetails) {\n        return;\n      }\n\n      setShowDetails((showDetails: boolean) => !showDetails);\n    },\n    [enableLogDetails, handleTextSelection, row]\n  );\n\n  const onMouseEnter = useCallback(() => {\n    setMouseIsOver(true);\n    if (onLogRowHover) {\n      onLogRowHover(row);\n    }\n  }, [onLogRowHover, row]);\n\n  const onMouseMove = useCallback(\n    (e: MouseEvent) => {\n      // No need to worry about text selection.\n      if (!handleTextSelection) {\n        return;\n      }\n      // The user is selecting text, so hide the log row menu so it doesn't interfere.\n      if (document.getSelection()?.toString() && e.buttons > 0) {\n        setMouseIsOver(false);\n      }\n    },\n    [handleTextSelection]\n  );\n\n  const onMouseLeave = useCallback(() => {\n    setMouseIsOver(false);\n  }, []);\n\n  return (\n    <>\n      <tr\n        ref={logLineRef}\n        className={`${styles.logsRow} ${hasError ? styles.errorLogRow : ''} ${showingContext || permalinked || pinned ? styles.highlightBackground : ''}`}\n        onClick={onRowClick}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onMouseMove={onMouseMove}\n        /**\n         * For better accessibility support, we listen to the onFocus event here (to display the LogRowMenuCell), and\n         * to onBlur event in the LogRowMenuCell (to hide it). This way, the LogRowMenuCell is displayed when the user navigates\n         * using the keyboard.\n         */\n        onFocus={onMouseEnter}\n      >\n        {showDuplicates && (\n          <td className={styles.logsRowDuplicates}>\n            {processedRow.duplicates && processedRow.duplicates > 0 ? `${processedRow.duplicates + 1}x` : null}\n          </td>\n        )}\n        <td\n          className={\n            hasError || isSampled ? styles.logsRowWithError : `${levelStyles.logsRowLevelColor} ${styles.logsRowLevel}`\n          }\n        >\n          {hasError && (\n            <Tooltip content={`Error: ${errorMessage}`} placement=\"right\" theme=\"error\">\n              <Icon className={styles.logIconError} name=\"exclamation-triangle\" size=\"xs\" />\n            </Tooltip>\n          )}\n          {isSampled && (\n            <Tooltip content={`${sampleMessage}`} placement=\"right\" theme=\"info\">\n              <Icon className={styles.logIconInfo} name=\"info-circle\" size=\"xs\" />\n            </Tooltip>\n          )}\n        </td>\n        <td\n          title={enableLogDetails ? (showDetails ? 'Hide log details' : 'See log details') : ''}\n          className={enableLogDetails ? styles.logsRowToggleDetails : ''}\n        >\n          {enableLogDetails && (\n            <button\n              aria-label={t('logs.log-row-message.see-details', `See log details`)}\n              className={styles.detailsToggle}\n              aria-expanded={showDetails}\n            >\n              <Icon className={styles.topVerticalAlign} name={showDetails ? 'angle-down' : 'angle-right'} />\n            </button>\n          )}\n        </td>\n        {showTime && <td className={styles.logsRowLocalTime}>{timestamp}</td>}\n        {showLabels && processedRow.uniqueLabels && (\n          <td className={styles.logsRowLabels}>\n            <LogLabels labels={processedRow.uniqueLabels} addTooltip={false} />\n          </td>\n        )}\n        {displayedFields && displayedFields.length > 0 ? (\n          <LogRowMessageDisplayedFields\n            row={processedRow}\n            showContextToggle={showContextToggle}\n            detectedFields={displayedFields}\n            getFieldLinks={getFieldLinks}\n            wrapLogMessage={wrapLogMessage}\n            onOpenContext={onOpenContext}\n            onPermalinkClick={props.onPermalinkClick}\n            styles={styles}\n            onPinLine={props.onPinLine}\n            onUnpinLine={props.onUnpinLine}\n            pinned={pinned}\n            mouseIsOver={mouseIsOver}\n            onBlur={onMouseLeave}\n            logRowMenuIconsBefore={logRowMenuIconsBefore}\n            logRowMenuIconsAfter={logRowMenuIconsAfter}\n          />\n        ) : (\n          <LogRowMessage\n            row={processedRow}\n            showContextToggle={showContextToggle}\n            getRowContextQuery={getRowContextQuery}\n            wrapLogMessage={wrapLogMessage}\n            prettifyLogMessage={prettifyLogMessage}\n            onOpenContext={onOpenContext}\n            onPermalinkClick={props.onPermalinkClick}\n            app={app}\n            styles={styles}\n            onPinLine={props.onPinLine}\n            onUnpinLine={props.onUnpinLine}\n            pinLineButtonTooltipTitle={props.pinLineButtonTooltipTitle}\n            pinned={pinned}\n            mouseIsOver={mouseIsOver}\n            onBlur={onMouseLeave}\n            expanded={showDetails}\n            logRowMenuIconsBefore={logRowMenuIconsBefore}\n            logRowMenuIconsAfter={logRowMenuIconsAfter}\n          />\n        )}\n      </tr>\n      {showDetails && (\n        <LogDetails\n          onPinLine={props.onPinLine}\n          className={`${styles.logsRow} ${hasError ? styles.errorLogRow : ''} ${permalinked && !showDetails ? styles.highlightBackground : ''}`}\n          showDuplicates={showDuplicates}\n          getFieldLinks={getFieldLinks}\n          onClickFilterLabel={onClickFilterLabel}\n          onClickFilterOutLabel={onClickFilterOutLabel}\n          onClickShowField={onClickShowField}\n          onClickHideField={onClickHideField}\n          getRows={getRows}\n          row={processedRow}\n          wrapLogMessage={wrapLogMessage}\n          hasError={hasError}\n          displayedFields={displayedFields}\n          app={app}\n          styles={styles}\n          isFilterLabelActive={props.isFilterLabelActive}\n          pinLineButtonTooltipTitle={props.pinLineButtonTooltipTitle}\n        />\n      )}\n    </>\n  );\n};\n","import { Props } from './LogRow';\nimport { LogRowMessageDisplayedFields } from './LogRowMessageDisplayedFields';\n\nconst emptyFn = () => {};\nexport const PreviewLogRow = ({ row, showDuplicates, showLabels, showTime, displayedFields, ...rest }: Props) => {\n  return (\n    <tr>\n      {showDuplicates && <td></td>}\n      <td></td>\n      <td></td>\n      {showTime && <td>{row.timeEpochMs}</td>}\n      {showLabels && row.uniqueLabels && <td></td>}\n      {displayedFields && displayedFields.length > 0 ? (\n        <LogRowMessageDisplayedFields\n          {...rest}\n          row={row}\n          detectedFields={displayedFields}\n          mouseIsOver={false}\n          onBlur={emptyFn}\n          onOpenContext={emptyFn}\n          preview\n        />\n      ) : (\n        <td>{row.entry}</td>\n      )}\n      <td></td>\n    </tr>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { MouseEvent, ReactNode, useState, useMemo, useCallback, useRef, useEffect, memo } from 'react';\n\nimport {\n  TimeZone,\n  LogsDedupStrategy,\n  LogRowModel,\n  Field,\n  LinkModel,\n  LogsSortOrder,\n  CoreApp,\n  DataFrame,\n  LogRowContextOptions,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { ConfirmModal, Icon, PopoverContent, useTheme2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { PopoverMenu } from '../../explore/Logs/PopoverMenu';\nimport { UniqueKeyMaker } from '../UniqueKeyMaker';\nimport { disablePopoverMenu, enablePopoverMenu, isPopoverMenuDisabled, sortLogRows, targetIsElement } from '../utils';\n\n//Components\nimport { LogRow } from './LogRow';\nimport { PreviewLogRow } from './PreviewLogRow';\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport interface Props {\n  logRows?: LogRowModel[];\n  deduplicatedRows?: LogRowModel[];\n  dedupStrategy: LogsDedupStrategy;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  previewLimit?: number;\n  forceEscape?: boolean;\n  displayedFields?: string[];\n  app?: CoreApp;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  onLogRowHover?: (row?: LogRowModel) => void;\n  onOpenContext?: (row: LogRowModel, onClose: () => void) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  permalinkedRowId?: string;\n  scrollIntoView?: (element: HTMLElement) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  pinnedRowId?: string;\n  pinnedLogs?: string[];\n  /**\n   * If false or undefined, the `contain:strict` css property will be added to the wrapping `<table>` for performance reasons.\n   * Any overflowing content will be clipped at the table boundary.\n   */\n  overflowingContent?: boolean;\n  onClickFilterString?: (value: string, refId?: string) => void;\n  onClickFilterOutString?: (value: string, refId?: string) => void;\n  logRowMenuIconsBefore?: ReactNode[];\n  logRowMenuIconsAfter?: ReactNode[];\n  scrollElement: HTMLDivElement | null;\n  renderPreview?: boolean;\n}\n\ntype PopoverStateType = {\n  selection: string;\n  selectedRow: LogRowModel | null;\n  popoverMenuCoordinates: { x: number; y: number };\n};\n\nexport const LogRows = memo(\n  ({\n    deduplicatedRows,\n    logRows = [],\n    dedupStrategy,\n    logsSortOrder,\n    previewLimit,\n    pinnedLogs,\n    onOpenContext,\n    onClickFilterOutString,\n    onClickFilterString,\n    scrollElement,\n    renderPreview = false,\n    enableLogDetails,\n    permalinkedRowId,\n    ...props\n  }: Props) => {\n    const [previewSize, setPreviewSize] = useState(\n      /**\n       * If renderPreview is enabled, either half of the log rows or twice the screen size of log rows will be rendered.\n       * The biggest of those values will be used. Else, all rows are rendered.\n       */\n      renderPreview && !permalinkedRowId\n        ? Math.max(2 * Math.ceil(window.innerHeight / 20), Math.ceil(logRows.length / 3))\n        : Infinity\n    );\n    const [popoverState, setPopoverState] = useState<PopoverStateType>({\n      selection: '',\n      selectedRow: null,\n      popoverMenuCoordinates: { x: 0, y: 0 },\n    });\n    const [showDisablePopoverOptions, setShowDisablePopoverOptions] = useState(false);\n    const logRowsRef = useRef<HTMLDivElement>(null);\n    const theme = useTheme2();\n    const styles = getLogRowStyles(theme);\n    const dedupedRows = deduplicatedRows ? deduplicatedRows : logRows;\n    const dedupCount = useMemo(\n      () => dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0),\n      [dedupedRows]\n    );\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    const orderedRows = useMemo(\n      () => (logsSortOrder ? sortLogRows(dedupedRows, logsSortOrder) : dedupedRows),\n      [dedupedRows, logsSortOrder]\n    );\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = useMemo(() => () => orderedRows, [orderedRows]);\n    const handleDeselectionRef = useRef<((e: Event) => void) | null>(null);\n    const keyMaker = new UniqueKeyMaker();\n\n    useEffect(() => {\n      return () => {\n        if (handleDeselectionRef.current) {\n          document.removeEventListener('click', handleDeselectionRef.current);\n          document.removeEventListener('contextmenu', handleDeselectionRef.current);\n        }\n      };\n    }, []);\n\n    useEffect(() => {\n      if (!scrollElement) {\n        return;\n      }\n\n      function renderAll() {\n        setPreviewSize(Infinity);\n        scrollElement?.removeEventListener('scroll', renderAll);\n        scrollElement?.removeEventListener('wheel', renderAll);\n      }\n\n      scrollElement.addEventListener('scroll', renderAll);\n      scrollElement.addEventListener('wheel', renderAll);\n    }, [logRows.length, scrollElement]);\n\n    /**\n     * Toggle the `contextIsOpen` state when a context of one LogRow is opened in order to not show the menu of the other log rows.\n     */\n    const openContext = useCallback(\n      (row: LogRowModel, onClose: () => void): void => {\n        if (onOpenContext) {\n          onOpenContext(row, onClose);\n        }\n      },\n      [onOpenContext]\n    );\n\n    const popoverMenuSupported = useCallback(() => {\n      if (!config.featureToggles.logRowsPopoverMenu || isPopoverMenuDisabled()) {\n        return false;\n      }\n      return Boolean(onClickFilterOutString || onClickFilterString);\n    }, [onClickFilterOutString, onClickFilterString]);\n\n    const closePopoverMenu = useCallback(() => {\n      if (handleDeselectionRef.current) {\n        document.removeEventListener('click', handleDeselectionRef.current);\n        document.removeEventListener('contextmenu', handleDeselectionRef.current);\n        handleDeselectionRef.current = null;\n      }\n      setPopoverState({\n        selection: '',\n        popoverMenuCoordinates: { x: 0, y: 0 },\n        selectedRow: null,\n      });\n    }, []);\n\n    const handleDeselection = useCallback(\n      (e: Event) => {\n        if (targetIsElement(e.target) && !logRowsRef.current?.contains(e.target)) {\n          // The mouseup event comes from outside the log rows, close the menu.\n          closePopoverMenu();\n          return;\n        }\n        if (document.getSelection()?.toString()) {\n          return;\n        }\n        closePopoverMenu();\n      },\n      [closePopoverMenu]\n    );\n\n    const handleSelection = useCallback(\n      (e: MouseEvent<HTMLElement>, row: LogRowModel): boolean => {\n        const selection = document.getSelection()?.toString();\n        if (!selection) {\n          return false;\n        }\n        if (e.altKey) {\n          enablePopoverMenu();\n        }\n        if (popoverMenuSupported() === false) {\n          // This signals onRowClick inside LogRow to skip the event because the user is selecting text\n          return selection ? true : false;\n        }\n\n        if (!logRowsRef.current) {\n          return false;\n        }\n\n        const MENU_WIDTH = 270;\n        const MENU_HEIGHT = 105;\n        const x = e.clientX + MENU_WIDTH > window.innerWidth ? window.innerWidth - MENU_WIDTH : e.clientX;\n        const y = e.clientY + MENU_HEIGHT > window.innerHeight ? window.innerHeight - MENU_HEIGHT : e.clientY;\n\n        setPopoverState({\n          selection,\n          popoverMenuCoordinates: { x, y },\n          selectedRow: row,\n        });\n        handleDeselectionRef.current = handleDeselection;\n        document.addEventListener('click', handleDeselection);\n        document.addEventListener('contextmenu', handleDeselection);\n        return true;\n      },\n      [handleDeselection, popoverMenuSupported]\n    );\n\n    const onDisablePopoverMenu = useCallback(() => {\n      setShowDisablePopoverOptions(true);\n    }, []);\n\n    const onDisableCancel = useCallback(() => {\n      setShowDisablePopoverOptions(false);\n    }, []);\n\n    const onDisableConfirm = useCallback(() => {\n      disablePopoverMenu();\n      setShowDisablePopoverOptions(false);\n    }, []);\n\n    return (\n      <div className={styles.logRows} ref={logRowsRef}>\n        {popoverState.selection && popoverState.selectedRow && (\n          <PopoverMenu\n            close={closePopoverMenu}\n            row={popoverState.selectedRow}\n            selection={popoverState.selection}\n            {...popoverState.popoverMenuCoordinates}\n            onClickFilterString={onClickFilterString}\n            onClickFilterOutString={onClickFilterOutString}\n            onDisable={onDisablePopoverMenu}\n          />\n        )}\n        {showDisablePopoverOptions && (\n          <ConfirmModal\n            isOpen\n            title={t('logs.log-rows.disable-popover.title', 'Disable menu')}\n            body={\n              <>\n                <Trans i18nKey=\"logs.log-rows.disable-popover.message\">\n                  You are about to disable the logs filter menu. To re-enable it, select text in a log line while\n                  holding the alt key.\n                </Trans>\n                <div className={styles.shortcut}>\n                  <Icon name=\"keyboard\" />\n                  <Trans i18nKey=\"logs.log-rows.disable-popover-message.shortcut\">alt+select to enable again</Trans>\n                </div>\n              </>\n            }\n            confirmText={t('logs.log-rows.disable-popover.confirm', 'Confirm')}\n            icon=\"exclamation-triangle\"\n            onConfirm={onDisableConfirm}\n            onDismiss={onDisableCancel}\n          />\n        )}\n        <table className={cx(styles.logsRowsTable, props.overflowingContent ? '' : styles.logsRowsTableContain)}>\n          <tbody>\n            {orderedRows.map((row, index) =>\n              index < previewSize ? (\n                <LogRow\n                  key={keyMaker.getKey(row.uid)}\n                  getRows={getRows}\n                  row={row}\n                  showDuplicates={showDuplicates}\n                  logsSortOrder={logsSortOrder}\n                  onOpenContext={openContext}\n                  styles={styles}\n                  onPermalinkClick={props.onPermalinkClick}\n                  scrollIntoView={props.scrollIntoView}\n                  permalinkedRowId={permalinkedRowId}\n                  onPinLine={props.onPinLine}\n                  onUnpinLine={props.onUnpinLine}\n                  pinLineButtonTooltipTitle={props.pinLineButtonTooltipTitle}\n                  pinned={props.pinnedRowId === row.uid || pinnedLogs?.some((logId) => logId === row.rowId)}\n                  isFilterLabelActive={props.isFilterLabelActive}\n                  handleTextSelection={handleSelection}\n                  enableLogDetails={enableLogDetails}\n                  {...props}\n                />\n              ) : (\n                <PreviewLogRow\n                  key={`preview_${keyMaker.getKey(row.uid)}`}\n                  enableLogDetails={false}\n                  getRows={getRows}\n                  onOpenContext={openContext}\n                  styles={styles}\n                  showDuplicates={showDuplicates}\n                  {...props}\n                  row={row}\n                />\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n);\n","import { css } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport tinycolor from 'tinycolor2';\n\nimport { colorManipulator, GrafanaTheme2, LogLevel } from '@grafana/data';\nimport { styleMixins } from '@grafana/ui';\n\nexport const getLogLevelStyles = (theme: GrafanaTheme2, logLevel?: LogLevel) => {\n  let logColor = theme.isLight ? theme.v1.palette.gray5 : theme.v1.palette.gray2;\n  switch (logLevel) {\n    case LogLevel.crit:\n    case LogLevel.critical:\n      logColor = '#705da0';\n      break;\n    case LogLevel.error:\n    case LogLevel.err:\n      logColor = '#e24d42';\n      break;\n    case LogLevel.warning:\n    case LogLevel.warn:\n      logColor = theme.colors.warning.main;\n      break;\n    case LogLevel.info:\n      logColor = '#7eb26d';\n      break;\n    case LogLevel.debug:\n      logColor = '#1f78c1';\n      break;\n    case LogLevel.trace:\n      logColor = '#6ed0e0';\n      break;\n  }\n\n  return {\n    logsRowLevelColor: css({\n      '&::after': {\n        backgroundColor: logColor,\n      },\n    }),\n  };\n};\n\nexport const getLogRowStyles = memoizeOne((theme: GrafanaTheme2) => {\n  const hoverBgColor = styleMixins.hoverColor(theme.colors.background.secondary, theme);\n  const contextOutlineColor = tinycolor(theme.components.dashboard.background).setAlpha(0.7).toRgbString();\n  return {\n    logsRowLevel: css({\n      label: 'logs-row__level',\n      maxWidth: theme.spacing(1.25),\n      cursor: 'default',\n      '&::after': {\n        content: \"''\",\n        display: 'block',\n        position: 'absolute',\n        top: '1px',\n        bottom: '1px',\n        width: '3px',\n        left: theme.spacing(0.5),\n      },\n    }),\n    // Compared to logsRowLevel we need to make error logs wider to accommodate the icon\n    logsRowWithError: css({\n      maxWidth: `${theme.spacing(1.5)}`,\n    }),\n    logsRowMatchHighLight: css({\n      label: 'logs-row__match-highlight',\n      background: 'inherit',\n      padding: 'inherit',\n      color: theme.components.textHighlight.text,\n      backgroundColor: theme.components.textHighlight.background,\n    }),\n    logRows: css({\n      position: 'relative',\n    }),\n    shortcut: css({\n      display: 'inline-flex',\n      alignItems: 'center',\n      gap: theme.spacing(1),\n      color: theme.colors.text.secondary,\n      opacity: 0.7,\n      fontSize: theme.typography.bodySmall.fontSize,\n      marginTop: theme.spacing(1),\n    }),\n    logsRowsTable: css({\n      label: 'logs-rows',\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n      width: '100%',\n      position: 'relative',\n    }),\n    logsRowsTableContain: css({\n      contain: 'strict',\n    }),\n    highlightBackground: css({\n      backgroundColor: tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString(),\n    }),\n    logsRow: css({\n      label: 'logs-row',\n      width: '100%',\n      cursor: 'pointer',\n      verticalAlign: 'top',\n\n      '&:focus-within': {\n        outline: `2px solid ${theme.colors.primary.border}`,\n        outlineOffset: '-2px',\n      },\n\n      '&:hover': {\n        '.log-row-menu': {\n          zIndex: 1,\n        },\n\n        background: hoverBgColor,\n      },\n\n      'td:not(.log-row-menu-cell):last-child': {\n        width: '100%',\n      },\n\n      '> td:not(.log-row-menu-cell)': {\n        position: 'relative',\n        paddingRight: theme.spacing(1),\n        borderTop: '1px solid transparent',\n        borderBottom: '1px solid transparent',\n        height: '100%',\n      },\n    }),\n    logsRowDuplicates: css({\n      label: 'logs-row__duplicates',\n      textAlign: 'right',\n      width: '4em',\n      cursor: 'default',\n    }),\n    logIconError: css({\n      color: theme.colors.warning.main,\n      position: 'relative',\n      top: '-2px',\n    }),\n    logIconInfo: css({\n      color: theme.colors.info.main,\n      position: 'relative',\n      top: '-2px',\n    }),\n    logsRowToggleDetails: css({\n      label: 'logs-row-toggle-details__level',\n      fontSize: '9px',\n      maxWidth: '15px',\n    }),\n    logsRowLocalTime: css({\n      label: 'logs-row__localtime',\n      whiteSpace: 'nowrap',\n    }),\n    logsRowLabels: css({\n      label: 'logs-row__labels',\n      whiteSpace: 'nowrap',\n      maxWidth: '22em',\n\n      /* This is to make the labels vertical align */\n      '> span': {\n        marginTop: '0.75px',\n      },\n    }),\n    logsRowMessage: css({\n      label: 'logs-row__message',\n      whiteSpace: 'pre-wrap',\n      wordBreak: 'break-all',\n      overflowWrap: 'anywhere',\n      width: '100%',\n      textAlign: 'left',\n    }),\n    copyLogButton: css({\n      padding: theme.spacing(0, 0, 0, 0.5),\n      height: theme.spacing(3),\n      width: theme.spacing(3.25),\n      lineHeight: theme.spacing(2.5),\n      overflow: 'hidden',\n      '&:hover': {\n        backgroundColor: colorManipulator.alpha(theme.colors.text.primary, 0.12),\n      },\n    }),\n    //Log details specific CSS\n    logDetailsContainer: css({\n      label: 'logs-row-details-table',\n      border: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0, 1, 1),\n      borderRadius: theme.shape.radius.default,\n      margin: theme.spacing(2.5, 1, 2.5, 2),\n      cursor: 'default',\n    }),\n    logDetailsTable: css({\n      label: 'logs-row-details-table',\n      lineHeight: '18px',\n      width: '100%',\n      'td:last-child': {\n        width: '100%',\n      },\n    }),\n    logsDetailsIcon: css({\n      label: 'logs-row-details__icon',\n      position: 'relative',\n      color: theme.v1.palette.gray3,\n      paddingTop: '1px',\n      paddingBottom: '1px',\n      paddingRight: theme.spacing(0.75),\n    }),\n    logDetailsLabel: css({\n      label: 'logs-row-details__label',\n      maxWidth: '30em',\n      minMidth: '20em',\n      padding: theme.spacing(0, 1),\n      overflowWrap: 'break-word',\n    }),\n    logDetailsHeading: css({\n      label: 'logs-row-details__heading',\n      fontWeight: theme.typography.fontWeightBold,\n      padding: theme.spacing(1, 0, 0.5),\n    }),\n    logDetailsValue: css({\n      label: 'logs-row-details__row',\n      position: 'relative',\n      verticalAlign: 'middle',\n      cursor: 'default',\n\n      '&:hover': {\n        backgroundColor: hoverBgColor,\n      },\n    }),\n    detailsToggle: css({\n      appearance: 'none',\n      background: 'none',\n      border: 'none',\n      padding: 0,\n      // Don't increase the height of the row\n      maxHeight: '19px',\n\n      // Don't show default button box-shadow on focus, we apply outline to the entire row instead\n      '&:focus-visible': {\n        boxShadow: 'none',\n      },\n\n      '&:focus': {\n        outline: 0,\n      },\n      '&:after': {\n        content: '\"\"',\n        inset: 0,\n        position: 'absolute',\n      },\n    }),\n\n    // Log row\n    topVerticalAlign: css({\n      label: 'topVerticalAlign',\n      marginTop: theme.spacing(-0.9),\n      marginLeft: theme.spacing(-0.25),\n    }),\n    detailsOpen: css({\n      '&:hover': {\n        backgroundColor: styleMixins.hoverColor(theme.colors.background.primary, theme),\n      },\n    }),\n    errorLogRow: css({\n      label: 'erroredLogRow',\n      color: theme.colors.text.secondary,\n    }),\n    // Log Row Message\n    positionRelative: css({\n      label: 'positionRelative',\n      position: 'relative',\n    }),\n    rowWithContext: css({\n      label: 'rowWithContext',\n      zIndex: 1,\n      outline: `9999px solid ${contextOutlineColor}`,\n      display: 'inherit',\n    }),\n    horizontalScroll: css({\n      label: 'horizontalScroll',\n      whiteSpace: 'pre',\n    }),\n    contextNewline: css({\n      display: 'block',\n      marginLeft: '0px',\n    }),\n    rowMenu: css({\n      label: 'rowMenu',\n      display: 'flex',\n      flexWrap: 'nowrap',\n      flexDirection: 'row',\n      alignContent: 'flex-end',\n      justifyContent: 'space-evenly',\n      alignItems: 'center',\n      position: 'absolute',\n      top: 0,\n      bottom: 'auto',\n      background: theme.colors.background.primary,\n      boxShadow: theme.shadows.z3,\n      padding: theme.spacing(0.5, 1, 0.5, 1),\n      zIndex: 100,\n      gap: theme.spacing(0.5),\n\n      '& > button': {\n        margin: 0,\n      },\n    }),\n    logRowMenuCell: css({\n      position: 'sticky',\n      zIndex: theme.zIndex.dropdown,\n      marginTop: theme.spacing(-0.125),\n      right: 0,\n\n      '& > span': {\n        transform: 'translateX(-100%)',\n      },\n    }),\n    logLine: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n      letterSpacing: theme.typography.bodySmall.letterSpacing,\n      textAlign: 'left',\n      padding: 0,\n      userSelect: 'text',\n    }),\n    // Log details\n    logsRowLevelDetails: css({\n      label: 'logs-row__level_details',\n      '&::after': {\n        top: '-3px',\n      },\n    }),\n    logDetails: css({\n      label: 'logDetailsDefaultCursor',\n      cursor: 'default',\n\n      '&:hover': {\n        backgroundColor: theme.colors.background.primary,\n      },\n    }),\n    visibleRowMenu: css({\n      label: 'visibleRowMenu',\n      aspectRatio: '1/1',\n      zIndex: 90,\n    }),\n    linkButton: css({\n      label: 'linkButton',\n      '> button': {\n        paddingTop: theme.spacing(0.5),\n      },\n    }),\n    hidden: css({\n      label: 'hidden',\n      visibility: 'hidden',\n    }),\n    unPinButton: css({\n      height: theme.spacing(3),\n      lineHeight: theme.spacing(2.5),\n    }),\n  };\n});\n\nexport type LogRowStyles = ReturnType<typeof getLogRowStyles>;\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  wrapLines?: boolean;\n  onChangeWrapLines: (wrapLines: boolean) => void;\n  onScrollCenterClick: () => void;\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    buttons: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n\nexport const LogContextButtons = (props: Props) => {\n  const styles = useStyles2(getStyles);\n  const { wrapLines, onChangeWrapLines, onScrollCenterClick } = props;\n  const internalOnChangeWrapLines = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const state = event.currentTarget.checked;\n      reportInteraction('grafana_explore_logs_log_context_toggle_lines_clicked', {\n        state,\n      });\n      onChangeWrapLines(state);\n    },\n    [onChangeWrapLines]\n  );\n\n  return (\n    <div className={styles.buttons}>\n      <InlineSwitch showLabel value={wrapLines} onChange={internalOnChangeWrapLines} label=\"Wrap lines\" />\n      <Button variant=\"secondary\" onClick={onScrollCenterClick}>\n        Center matched line\n      </Button>\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { partition } from 'lodash';\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { useAsync } from 'react-use';\n\nimport {\n  DataQueryResponse,\n  DataSourceWithLogsContextSupport,\n  GrafanaTheme2,\n  LogRowContextOptions,\n  LogRowContextQueryDirection,\n  LogRowModel,\n  LogsDedupStrategy,\n  LogsSortOrder,\n  dateTime,\n  TimeRange,\n  LoadingState,\n} from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Button, Modal, useTheme2 } from '@grafana/ui';\nimport store from 'app/core/store';\nimport { SETTINGS_KEYS } from 'app/features/explore/Logs/utils/logs';\nimport { splitOpen } from 'app/features/explore/state/main';\nimport { useDispatch } from 'app/types';\n\nimport { dataFrameToLogsModel } from '../../logsModel';\nimport { sortLogRows } from '../../utils';\nimport { LoadingIndicator } from '../LoadingIndicator';\nimport { LogRows } from '../LogRows';\n\nimport { LogContextButtons } from './LogContextButtons';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css({\n      width: '85vw',\n      [theme.breakpoints.down('md')]: {\n        width: '100%',\n      },\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n    }),\n    sticky: css({\n      position: 'sticky',\n      zIndex: 1,\n      top: '-1px',\n      bottom: '-1px',\n    }),\n    entry: css({\n      '& > td': {\n        padding: theme.spacing(1, 0, 1, 0),\n      },\n      background: theme.colors.emphasize(theme.colors.background.secondary),\n\n      '& > table': {\n        marginBottom: 0,\n      },\n\n      '& .log-row-menu': {\n        marginTop: '-6px',\n      },\n    }),\n    datasourceUi: css({\n      paddingBottom: theme.spacing(1.25),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    logRowGroups: css({\n      overflow: 'auto',\n      maxHeight: '75%',\n      alignSelf: 'stretch',\n      display: 'inline-block',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.radius.default,\n      '& > table': {\n        minWidth: '100%',\n      },\n    }),\n    flexColumn: css({\n      display: 'flex',\n      flexDirection: 'column',\n      padding: theme.spacing(0, 3, 3, 3),\n    }),\n    flexRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      '& > div:last-child': {\n        marginLeft: 'auto',\n      },\n    }),\n    noMarginBottom: css({\n      '& > table': {\n        marginBottom: 0,\n      },\n    }),\n    hidden: css({\n      display: 'none',\n    }),\n    paddingTop: css({\n      paddingTop: theme.spacing(1),\n    }),\n    paddingBottom: css({\n      paddingBottom: theme.spacing(1),\n    }),\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n    loadingCell: css({\n      position: 'sticky',\n      left: '50%',\n      display: 'inline-block',\n      transform: 'translateX(-50%)',\n    }),\n  };\n};\n\ninterface LogRowContextModalProps {\n  row: LogRowModel;\n  open: boolean;\n  timeZone: TimeZone;\n  onClose: () => void;\n  getRowContext: (row: LogRowModel, options: LogRowContextOptions) => Promise<DataQueryResponse>;\n\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  logsSortOrder: LogsSortOrder;\n  runContextQuery?: () => void;\n  getLogRowContextUi?: DataSourceWithLogsContextSupport['getLogRowContextUi'];\n}\n\ntype Section = {\n  loadingState: LoadingState;\n  rows: LogRowModel[];\n};\ntype Place = 'above' | 'below';\ntype Context = Record<Place, Section>;\n\nconst makeEmptyContext = (): Context => ({\n  above: { loadingState: LoadingState.NotStarted, rows: [] },\n  below: { loadingState: LoadingState.NotStarted, rows: [] },\n});\n\nconst getLoadMoreDirection = (place: Place, sortOrder: LogsSortOrder): LogRowContextQueryDirection => {\n  if (place === 'above' && sortOrder === LogsSortOrder.Descending) {\n    return LogRowContextQueryDirection.Forward;\n  }\n  if (place === 'below' && sortOrder === LogsSortOrder.Ascending) {\n    return LogRowContextQueryDirection.Forward;\n  }\n\n  return LogRowContextQueryDirection.Backward;\n};\n\ntype LoadCounter = Record<Place, number>;\n\nconst normalizeLogRowRefId = (row: LogRowModel, counter: LoadCounter): LogRowModel => {\n  // the datasoure plugins often create the context-query based on the row's dataframe's refId,\n  // by appending something to it. for example:\n  // - let's say the row's dataframe's refId is \"query\"\n  // - the datasource plugin will take \"query\" and append \"-context\" to it, so it becomes \"query-context\".\n  // - later we want to load even more lines, so we make a context query\n  // - the datasource plugin does the same transform again, but now the source is \"query-context\",\n  //   so the new refId becomes \"query-context-context\"\n  // - next time it becomes \"query-context-context-context\", and so on.\n  // we do not want refIds to grow unbounded.\n  // to avoid this, we set the refId to a value that does not grow.\n  // on the other hand, the refId is also used in generating the row's UID, so it is useful\n  // when the refId is not always the exact same string, otherwise UID duplication can occur,\n  // which may cause problems.\n  // so we go with an approach where the refId always changes, but does not grow.\n  return {\n    ...row,\n    dataFrame: {\n      ...row.dataFrame,\n      refId: `context_${counter.above}_${counter.below}`,\n    },\n  };\n};\n\nconst containsRow = (rows: LogRowModel[], row: LogRowModel) => {\n  return rows.some((r) => r.entry === row.entry && r.timeEpochNs === row.timeEpochNs);\n};\n\nconst PAGE_SIZE = 100;\n\nexport const LogRowContextModal: React.FunctionComponent<LogRowContextModalProps> = ({\n  row,\n  open,\n  logsSortOrder,\n  timeZone,\n  getLogRowContextUi,\n  getRowContextQuery,\n  onClose,\n  getRowContext,\n}) => {\n  const scrollElement = useRef<HTMLDivElement | null>(null);\n  const entryElement = useRef<HTMLTableRowElement | null>(null);\n  // We can not use `entryElement` to scroll to the right element because it's\n  // sticky. That's why we add another row and use this ref to scroll to that\n  // first.\n  const preEntryElement = useRef<HTMLTableRowElement | null>(null);\n\n  const prevScrollHeightRef = useRef<number | null>(null);\n  const prevClientHeightRef = useRef<number | null>(null);\n\n  const aboveLoadingElement = useRef<HTMLDivElement | null>(null);\n  const belowLoadingElement = useRef<HTMLDivElement | null>(null);\n\n  const loadCountRef = useRef<LoadCounter>({ above: 0, below: 0 });\n\n  const dispatch = useDispatch();\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [sticky, setSticky] = useState(true);\n\n  // we need to keep both the \"above\" and \"below\" rows\n  // in the same react-state, to be able to atomically change both\n  // at the same time.\n  // we create the `setSection` convenience function to adjust any\n  // part of it easily.\n  const [context, setContext] = useState<Context>(makeEmptyContext());\n  const setSection = (place: Place, fun: (s: Section) => Section) => {\n    setContext((c) => {\n      const newContext = { ...c };\n      newContext[place] = fun(c[place]);\n      return newContext;\n    });\n  };\n\n  // this is used to \"cancel\" the ongoing load-more requests.\n  // whenever we want to cancel them, we increment this number.\n  // and when those requests return, we check if the number\n  // is still the same as when we started. and if it is not the same,\n  // we ignore the results.\n  //\n  // best would be to literally cancel those requests,\n  // but right now there's no way with the current logs-context API.\n  const generationRef = useRef(1);\n\n  const [contextQuery, setContextQuery] = useState<DataQuery | null>(null);\n  const [wrapLines, setWrapLines] = useState(\n    store.getBool(SETTINGS_KEYS.logContextWrapLogMessage, store.getBool(SETTINGS_KEYS.wrapLogMessage, true))\n  );\n  const getFullTimeRange = useCallback(() => {\n    const { below, above } = context;\n    const allRows = sortLogRows([...below.rows, row, ...above.rows], LogsSortOrder.Ascending);\n    const fromMs = allRows[0].timeEpochMs;\n    let toMs = allRows[allRows.length - 1].timeEpochMs;\n    // In case we have a lot of logs and from and to have same millisecond\n    // we add 1 millisecond to toMs to make sure we have a range\n    if (fromMs === toMs) {\n      toMs += 1;\n    }\n    const from = dateTime(fromMs);\n    const to = dateTime(toMs);\n\n    const range: TimeRange = {\n      from,\n      to,\n      raw: {\n        from,\n        to,\n      },\n    };\n    return range;\n  }, [context, row]);\n\n  const updateContextQuery = useCallback(async () => {\n    const contextQuery = getRowContextQuery ? await getRowContextQuery(row) : null;\n    setContextQuery(contextQuery);\n  }, [row, getRowContextQuery]);\n\n  const updateResults = async () => {\n    await updateContextQuery();\n    setContext(makeEmptyContext());\n    loadCountRef.current = { above: 0, below: 0 };\n    generationRef.current += 1; // results from currently running loadMore calls will be ignored\n  };\n\n  const loadMore = async (place: Place, allRows: LogRowModel[]): Promise<LogRowModel[]> => {\n    loadCountRef.current[place] += 1;\n    const refRow = allRows.at(place === 'above' ? 0 : -1);\n    if (refRow == null) {\n      throw new Error('should never happen. the array always contains at least 1 item (the middle row)');\n    }\n\n    reportInteraction('grafana_explore_logs_log_context_load_more_called', {\n      datasourceType: refRow.datasourceType,\n      above: loadCountRef.current.above,\n      below: loadCountRef.current.below,\n    });\n\n    const direction = getLoadMoreDirection(place, logsSortOrder);\n\n    const result = await getRowContext(normalizeLogRowRefId(refRow, loadCountRef.current), {\n      limit: PAGE_SIZE,\n      direction,\n    });\n    const newRows = dataFrameToLogsModel(result.data).rows;\n\n    if (logsSortOrder === LogsSortOrder.Ascending) {\n      newRows.reverse();\n    }\n\n    const out = newRows.filter((r) => {\n      return !containsRow(allRows, r);\n    });\n\n    return out;\n  };\n\n  useEffect(() => {\n    if (open) {\n      updateContextQuery();\n    }\n  }, [updateContextQuery, open]);\n\n  const [displayedFields, setDisplayedFields] = useState<string[]>([]);\n\n  const showField = (key: string) => {\n    const index = displayedFields.indexOf(key);\n\n    if (index === -1) {\n      setDisplayedFields([...displayedFields, key]);\n    }\n  };\n\n  const hideField = (key: string) => {\n    const index = displayedFields.indexOf(key);\n\n    if (index > -1) {\n      displayedFields.splice(index, 1);\n      setDisplayedFields([...displayedFields]);\n    }\n  };\n\n  const maybeLoadMore = async (place: Place) => {\n    const { below, above } = context;\n    const section = context[place];\n    if (section.loadingState === LoadingState.Loading) {\n      return;\n    }\n\n    setSection(place, (section) => ({\n      ...section,\n      loadingState: LoadingState.Loading,\n    }));\n\n    const currentGen = generationRef.current;\n    try {\n      // we consider all the currently existing rows, even the original row,\n      // this way this array of rows will never be empty\n      const allRows = [...above.rows, row, ...below.rows];\n\n      const newRows = (await loadMore(place, allRows)).map((r) =>\n        // apply the original row's searchWords to all the rows for highlighting\n        !r.searchWords || !r.searchWords?.length ? { ...r, searchWords: row.searchWords } : r\n      );\n      const [older, newer] = partition(newRows, (newRow) => newRow.timeEpochNs > row.timeEpochNs);\n      const newAbove = logsSortOrder === LogsSortOrder.Ascending ? newer : older;\n      const newBelow = logsSortOrder === LogsSortOrder.Ascending ? older : newer;\n\n      if (currentGen === generationRef.current) {\n        setContext((c) => {\n          // we should only modify the row-arrays if necessary\n          const sortedNewAbove =\n            newAbove.length > 0 ? sortLogRows([...newAbove, ...c.above.rows], logsSortOrder) : c.above.rows;\n          const sortedNewBelow =\n            newBelow.length > 0 ? sortLogRows([...c.below.rows, ...newBelow], logsSortOrder) : c.below.rows;\n          return {\n            above: {\n              rows: sortedNewAbove,\n              loadingState:\n                place === 'above'\n                  ? newRows.length === 0\n                    ? LoadingState.Done\n                    : LoadingState.NotStarted\n                  : c.above.loadingState,\n            },\n            below: {\n              rows: sortedNewBelow,\n              loadingState:\n                place === 'below'\n                  ? newRows.length === 0\n                    ? LoadingState.Done\n                    : LoadingState.NotStarted\n                  : c.below.loadingState,\n            },\n          };\n        });\n      }\n    } catch {\n      setSection(place, (section) => ({\n        rows: section.rows,\n        loadingState: LoadingState.Error,\n      }));\n    }\n  };\n\n  const onScrollHit = async (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n    for (const entry of entries) {\n      // If the element is not intersecting, skip to the next one\n      if (!entry.isIntersecting) {\n        continue;\n      }\n\n      const targetElement = entry.target;\n\n      if (targetElement === aboveLoadingElement.current) {\n        maybeLoadMore('above');\n      } else if (targetElement === belowLoadingElement.current) {\n        maybeLoadMore('below');\n      }\n    }\n  };\n\n  useEffect(() => {\n    const scroll = scrollElement.current;\n    const aboveElem = aboveLoadingElement.current;\n    const belowElem = belowLoadingElement.current;\n\n    if (scroll == null) {\n      // should not happen, but need to make typescript happy\n      return;\n    }\n\n    const observer = new IntersectionObserver(onScrollHit, { root: scroll });\n\n    if (aboveElem != null) {\n      observer.observe(aboveElem);\n    }\n\n    if (belowElem != null) {\n      observer.observe(belowElem);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }); // on every render, why not\n\n  const scrollToCenter = useCallback(() => {\n    preEntryElement.current?.scrollIntoView({ block: 'center' });\n    entryElement.current?.scrollIntoView({ block: 'center' });\n  }, [preEntryElement, entryElement]);\n\n  useLayoutEffect(() => {\n    const scrollE = scrollElement.current;\n    if (scrollE == null) {\n      return;\n    }\n\n    const prevClientHeight = prevClientHeightRef.current;\n    const currentClientHeight = scrollE.clientHeight;\n    prevClientHeightRef.current = currentClientHeight;\n    if (prevClientHeight !== currentClientHeight) {\n      // height has changed, we scroll to the center\n      scrollToCenter();\n      return;\n    }\n\n    // if the newly loaded content is part of the initial load of `above` and `below`,\n    // we scroll to center, to keep the chosen log-row centered\n    if (loadCountRef.current.above <= 1 && loadCountRef.current.below <= 1) {\n      scrollToCenter();\n      return;\n    }\n\n    const prevScrollHeight = prevScrollHeightRef.current;\n    const currentHeight = scrollE.scrollHeight;\n    prevScrollHeightRef.current = currentHeight;\n    if (prevScrollHeight != null) {\n      const newScrollTop = scrollE.scrollTop + (currentHeight - prevScrollHeight);\n      scrollE.scrollTop = newScrollTop;\n    }\n  }, [context.above.rows, scrollToCenter]);\n\n  useAsync(updateContextQuery, [getRowContextQuery, row]);\n\n  const loadingStateAbove = context.above.loadingState;\n  const loadingStateBelow = context.below.loadingState;\n\n  return (\n    <Modal\n      isOpen={open}\n      title=\"Log context\"\n      contentClassName={styles.flexColumn}\n      className={styles.modal}\n      onDismiss={onClose}\n    >\n      {config.featureToggles.logsContextDatasourceUi && getLogRowContextUi && (\n        <div className={styles.datasourceUi}>{getLogRowContextUi(row, updateResults)}</div>\n      )}\n      <div className={cx(styles.flexRow, styles.paddingBottom)}>\n        <div>\n          <LogContextButtons\n            wrapLines={wrapLines}\n            onChangeWrapLines={setWrapLines}\n            onScrollCenterClick={scrollToCenter}\n          />\n        </div>\n      </div>\n      <div ref={scrollElement} className={styles.logRowGroups}>\n        <table>\n          <tbody>\n            <tr>\n              <td className={styles.loadingCell}>\n                {loadingStateAbove !== LoadingState.Done && loadingStateAbove !== LoadingState.Error && (\n                  <div ref={aboveLoadingElement}>\n                    <LoadingIndicator adjective=\"newer\" />\n                  </div>\n                )}\n                {loadingStateAbove === LoadingState.Error && <div>Error loading log more logs.</div>}\n                {loadingStateAbove === LoadingState.Done && <div>No more logs available.</div>}\n              </td>\n            </tr>\n            <tr>\n              <td className={styles.noMarginBottom}>\n                <LogRows\n                  logRows={context.above.rows}\n                  dedupStrategy={LogsDedupStrategy.none}\n                  showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                  showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                  wrapLogMessage={wrapLines}\n                  prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                  enableLogDetails={true}\n                  timeZone={timeZone}\n                  displayedFields={displayedFields}\n                  onClickShowField={showField}\n                  onClickHideField={hideField}\n                  scrollElement={null}\n                />\n              </td>\n            </tr>\n            <tr ref={preEntryElement}></tr>\n            <tr ref={entryElement} className={cx(styles.entry, sticky ? styles.sticky : null)} data-testid=\"entry-row\">\n              <td className={styles.noMarginBottom}>\n                <LogRows\n                  logRows={[row]}\n                  dedupStrategy={LogsDedupStrategy.none}\n                  showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                  showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                  wrapLogMessage={wrapLines}\n                  prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                  enableLogDetails={true}\n                  timeZone={timeZone}\n                  displayedFields={displayedFields}\n                  onClickShowField={showField}\n                  onClickHideField={hideField}\n                  onUnpinLine={() => setSticky(false)}\n                  onPinLine={() => setSticky(true)}\n                  pinnedRowId={sticky ? row.uid : undefined}\n                  overflowingContent={true}\n                  scrollElement={null}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <>\n                  <LogRows\n                    logRows={context.below.rows}\n                    dedupStrategy={LogsDedupStrategy.none}\n                    showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                    showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                    wrapLogMessage={wrapLines}\n                    prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                    enableLogDetails={true}\n                    timeZone={timeZone}\n                    displayedFields={displayedFields}\n                    onClickShowField={showField}\n                    onClickHideField={hideField}\n                    scrollElement={null}\n                  />\n                </>\n              </td>\n            </tr>\n            <tr>\n              <td className={styles.loadingCell}>\n                {loadingStateBelow !== LoadingState.Done && loadingStateBelow !== LoadingState.Error && (\n                  <div ref={belowLoadingElement}>\n                    <LoadingIndicator adjective=\"older\" />\n                  </div>\n                )}\n                {loadingStateBelow === LoadingState.Error && <div>Error loading log more logs.</div>}\n                {loadingStateBelow === LoadingState.Done && <div>No more logs available.</div>}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <Modal.ButtonRow>\n        {contextQuery?.datasource?.uid && (\n          <Button\n            variant=\"secondary\"\n            onClick={async () => {\n              let rowId = row.uid;\n              if (row.dataFrame.refId) {\n                // the orignal row has the refid from the base query and not the refid from the context query, so we need to replace it.\n                rowId = row.uid.replace(row.dataFrame.refId, contextQuery.refId);\n              }\n\n              dispatch(\n                splitOpen({\n                  queries: [contextQuery],\n                  range: getFullTimeRange(),\n                  datasourceUid: contextQuery.datasource!.uid!,\n                  panelsState: {\n                    logs: {\n                      id: rowId,\n                    },\n                  },\n                })\n              );\n              onClose();\n              reportInteraction('grafana_explore_logs_log_context_open_split_view_clicked', {\n                datasourceType: row.datasourceType,\n                logRowUid: row.uid,\n              });\n            }}\n          >\n            Open in split view\n          </Button>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n"],"names":["SETTINGS_KEYS","visualisationTypeKey","canKeepDisplayedFields","logsQueries","prevLogsQueries","i","InfiniteScroll","app","children","loading","loadMoreLogs","range","rows","scrollElement","sortOrder","timeZone","topScrollEnabled","upperOutOfRange","setUpperOutOfRange","lowerOutOfRange","setLowerOutOfRange","upperLoading","setUpperLoading","lowerLoading","setLowerLoading","rowsRef","lastScroll","lastEvent","countRef","handleScroll","event","scrollDirection","shouldLoadMore","scrollTop","scrollBottom","newRange","canScrollTop","getVisibleRange","canScrollBottom","hideTopMessage","hideBottomMessage","loadOlderLogs","outOfRangeMessage","styles","ScrollDirection","element","delta","shouldIgnoreChainOfEvents","deltaTime","firstTimeStamp","lastTimeStamp","getPrevRange","visibleRange","currentRange","getNextRange","updateCurrentRange","SCROLLING_THRESHOLD","timeRange","LoadingIndicator","adjective","text","loadingIndicatorStyles","getStyles","theme","LOG_LINE_BODY_FIELD_NAME","LogDetailsBody","props","showField","onClickShowField","row","hideField","onClickHideField","displayedFields","disableActions","rowStyles","toggleFieldButton","HIDDEN_LABELS","LogLabels","labels","emptyMessage","addTooltip","displayLabels","label","labelValue","LogLabel","LogLabelsList","tooltip","ref","convertCSSToStyle","css","accumulated","line","match","key","_","character","UnThemedLogMessageAnsi","state","span","chunks","chunk","index","chunkText","LogMessageAnsi","LogRowMenuCell","logText","onOpenContext","onPermalinkClick","onPinLine","onUnpinLine","pinLineButtonTooltipTitle","pinned","showContextToggle","mouseIsOver","onBlur","getRowContextQuery","addonBefore","addonAfter","shouldShowContextToggle","onLogRowClick","e","onShowContextClick","win","query","url","handleBlur","getLogText","beforeContent","addClickListenersToNode","afterContent","nodes","node","onClick","MAX_CHARACTERS","LogMessage","hasAnsi","entry","highlights","excessCharacters","needsHighlighter","searchWords","showFull","setShowFull","truncatedEntry","highlight","Ellipsis","toggle","diff","getEllipsisStyles","handleClick","restructureLog","prettifyLogMessage","wrapLogMessage","expanded","LogRowMessage","logRowMenuIconsBefore","logRowMenuIconsAfter","raw","restructuredEntry","shouldShowMenu","PopoverMenu","x","y","onClickFilterString","onClickFilterOutString","selection","close","containerRef","handleEscape","onDisable","track","Menu","action","selectionLength","dataSourceType","UniqueKeyMaker","proposedKey","maybeKey","LogLabelStatsRow","active","count","proportion","value","style","percent","barStyle","className","STATS_ROW_LIMIT","stylesFactory","UnThemedLogLabelStats","rowCount","stats","isLabel","topRows","activeRow","otherRows","insertActiveRow","otherCount","sum","total","otherProportion","stat","LogLabelStats","UnThemedLogDetailsRow","onClickShowDetectedField","parsedKeys","onClickHideDetectedField","isFilterLabelActive","parsedValues","onClickFilterLabel","onClickFilterOutLabel","getStats","fieldStats","fieldCount","showFieldsStats","val","ClipboardButton","showCopy","links","getLogRowStyles","singleKey","singleVal","hasFilteringFunctionality","refIdTooltip","labelType","isMultiParsedValueWithNoContent","IconButton","AsyncIconButton","LabelTypeBadge","link","originalOnClick","origin","DataLinkButton","type","Tooltip","isActive","tooltipSuffix","rest","setActive","LogDetailsRow","UnThemedLogDetails","hasError","getRows","showDuplicates","getFieldLinks","levelStyles","labelsAvailable","fieldsAndLinks","fieldsWithLinks","f","displayedFieldsWithLinks","hiddenFieldsWithLinks","fieldsWithLinksFromVariableMap","fieldsWithLinksAvailable","fields","fieldsAvailable","levelClassName","field","keys","values","fieldIndex","LogDetails","LogRowMessageDisplayedFields","detectedFields","preview","wrapClassName","displayedFieldsStyles","parsedKey","LogRow","enableLogDetails","showLabels","showTime","forceEscape","permalinkedRowId","scrollIntoView","handleTextSelection","onLogRowHover","showingContext","setShowingContext","showDetails","setShowDetails","setMouseIsOver","permalinked","setPermalinked","logLineRef","timestamp","processedRow","errorMessage","sampleMessage","isSampled","debouncedContextClose","onRowClick","onMouseEnter","onMouseMove","onMouseLeave","Icon","emptyFn","PreviewLogRow","LogRows","deduplicatedRows","logRows","dedupStrategy","logsSortOrder","previewLimit","pinnedLogs","renderPreview","previewSize","setPreviewSize","popoverState","setPopoverState","showDisablePopoverOptions","setShowDisablePopoverOptions","logRowsRef","dedupedRows","dedupCount","orderedRows","handleDeselectionRef","keyMaker","renderAll","openContext","onClose","popoverMenuSupported","config","closePopoverMenu","handleDeselection","handleSelection","MENU_WIDTH","MENU_HEIGHT","onDisablePopoverMenu","onDisableCancel","onDisableConfirm","ConfirmModal","logId","getLogLevelStyles","logLevel","logColor","hoverBgColor","contextOutlineColor","LogContextButtons","wrapLines","onChangeWrapLines","onScrollCenterClick","internalOnChangeWrapLines","Button","makeEmptyContext","getLoadMoreDirection","place","normalizeLogRowRefId","counter","containsRow","r","PAGE_SIZE","LogRowContextModal","open","getLogRowContextUi","getRowContext","entryElement","preEntryElement","prevScrollHeightRef","prevClientHeightRef","aboveLoadingElement","belowLoadingElement","loadCountRef","dispatch","sticky","setSticky","context","setContext","setSection","fun","c","newContext","generationRef","contextQuery","setContextQuery","setWrapLines","store","getFullTimeRange","below","above","allRows","fromMs","toMs","from","to","updateContextQuery","updateResults","loadMore","refRow","direction","result","newRows","setDisplayedFields","maybeLoadMore","section","currentGen","older","newer","newRow","newAbove","newBelow","sortedNewAbove","sortedNewBelow","onScrollHit","entries","observer","targetElement","scroll","aboveElem","belowElem","scrollToCenter","scrollE","prevClientHeight","currentClientHeight","prevScrollHeight","currentHeight","newScrollTop","useAsync","loadingStateAbove","loadingStateBelow","Modal","rowId"],"sourceRoot":""}