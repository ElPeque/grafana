name: Test Backend

on:
  push:
    branches:
      - main
    paths:
      - 'Makefile'
      - 'pkg/**'
      - 'packaging/**'
      - '.github/workflows/**'
      - 'conf/**'
      - 'go.sum'
      - 'go.mod'
      - 'public/app/plugins/**/plugin.json'
      - 'docs/sources/setup-grafana/configure-grafana/feature-toggles/**'
      - 'devenv/**'
      - 'apps/**'
  pull_request:
    paths:
      - 'Makefile'
      - 'pkg/**'
      - 'packaging/**'
      - '.github/workflows/**'
      - 'conf/**'
      - 'go.sum'
      - 'go.mod'
      - 'public/app/plugins/**/plugin.json'
      - 'docs/sources/setup-grafana/configure-grafana/feature-toggles/**'
      - 'devenv/**'
      - 'apps/**'

env:
  EDITION: 'oss'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential shared-mime-info make

      - name: Get runner name
        run: echo ${{ runner.name }}

      - name: Setup Enterprise (PR only)
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_REPO_FORK=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} --jq .head.repo.fork)
          if [ "$PR_REPO_FORK" != "false" ]; then
            echo "Skipping enterprise setup for fork"
            exit 0
          fi
          git clone https://$GH_TOKEN@github.com/grafana/grafana-enterprise.git ../grafana-enterprise
          cd ../grafana-enterprise
          if git checkout ${GITHUB_HEAD_REF}; then
            echo "checked out ${GITHUB_HEAD_REF}"
          elif git checkout ${GITHUB_BASE_REF}; then
            echo "checked out ${GITHUB_BASE_REF}"
          else
            git checkout main
          fi
          cd ../grafana
          ln -s . grafana
          cd ../grafana-enterprise
          ./build.sh

      - name: Verify CUE generation
        run: CODEGEN_VERIFY=1 make gen-cue

      - name: Verify Jsonnet generation
        run: CODEGEN_VERIFY=1 make gen-jsonnet

      - name: Wire install
        run: |
          apk add --update make
          make gen-go

      - name: Run backend tests
        run: |
          go list -f '{{.Dir}}/...' -m  | xargs go test -short -covermode=atomic -timeout=5m

      - name: Run backend integration tests
        run: |
          go test -count=1 -covermode=atomic -timeout=5m -run '^TestIntegration' $(find ./pkg -type f -name '*_test.go' -exec grep -l '^func TestIntegration' '{}' '+' | grep -o '\(.*\)/' | sort -u)
