package common

import (
	"context"

	"github.com/grafana/grafana-app-sdk/resource"
	"github.com/grafana/grafana/pkg/plugins"
	"github.com/grafana/grafana/pkg/plugins/repo"
	"github.com/grafana/grafana/pkg/services/datasources"
	"github.com/grafana/grafana/pkg/services/pluginsintegration/plugincontext"
	"github.com/grafana/grafana/pkg/services/pluginsintegration/pluginstore"
)

type AdvisorConfig struct {
	DatasourceSvc         datasources.DataSourceService
	PluginStore           pluginstore.Store
	PluginRepo            repo.Service
	PluginContextProvider *plugincontext.Provider
	PluginClient          plugins.Client
}

type CheckRegisterer interface {
	New(cfg *AdvisorConfig) Check
	Kind() resource.Kind
}

// These are type aliases to the autogenerated types in the API
// which are always equal but with different types)
type CheckData struct {
	// Generic data input that a check can receive
	Data map[string]string `json:"data,omitempty"`
}

type ReportErrorType string

const (
	ReportErrorTypeInvestigation ReportErrorType = "investigation"
	ReportErrorTypeAction        ReportErrorType = "action"
)

type ReportError struct {
	// Investigation or Action recommended
	Type ReportErrorType `json:"type"`
	// Reason for the error
	Reason string `json:"reason"`
	// Action to take
	Action string `json:"action"`
}

type CheckReport struct {
	// Number of elements analyzed
	Count int64 `json:"count"`
	// List of errors
	Errors []ReportError `json:"errors"`
}

type Check interface {
	Run(ctx context.Context, obj *CheckData) (*CheckReport, error)
}

var RegisterChecks = []CheckRegisterer{}

func RegisterCheck(check CheckRegisterer) {
	RegisterChecks = append(RegisterChecks, check)
}
