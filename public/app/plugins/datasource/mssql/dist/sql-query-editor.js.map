{"version":3,"file":"sql-query-editor.js","mappings":"kTAYO,SAASA,GAAa,OAAEC,EAAM,SAAEC,EAAQ,UAAEC,EAAS,OAAEC,IAC1D,MAAMC,GAAYC,EAAAA,EAAAA,QAA0B,MACtCC,GAASC,EAAAA,EAAAA,YAAWC,GAU1B,OAPAC,EAAAA,EAAAA,YAAU,K,IAGNL,EADEJ,IACe,QAAjBI,EAAAA,EAAUM,eAAVN,IAAAA,GAAAA,EAAmBO,QACrB,GACC,CAACX,KAGF,UAACY,EAAAA,MAAKA,CACJC,OACE,UAACC,MAAAA,CAAIC,UAAWT,EAAOU,iB,WACrB,SAACC,EAAAA,KAAIA,CAACC,KAAK,uBAAuBC,KAAK,QACvC,SAACC,OAAAA,CAAKL,UAAWT,EAAOe,U,SAAW,eAGvCC,UAAWrB,EACXD,OAAQA,E,WAER,SAACuB,IAAAA,C,SAAE,mIAIH,SAACA,IAAAA,C,SAAE,qDACH,UAACX,EAAAA,MAAMY,UAAS,C,WACd,SAACC,EAAAA,OAAMA,CAACC,KAAK,SAASC,QAAQ,YAAYC,QAAS3B,EAAU4B,KAAK,U,SAAU,YAG5E,SAACJ,EAAAA,OAAMA,CAACE,QAAQ,cAAcD,KAAK,SAASE,QAAS1B,EAAW4B,IAAK1B,E,SAAW,6BAGhF,SAACqB,EAAAA,OAAMA,CAACE,QAAQ,UAAUC,QAASzB,E,SAAQ,8BAMnD,CAEA,MAAMK,EAAauB,IAA0B,CAC3CV,WAAWW,EAAAA,EAAAA,KAAI,CACbC,YAAaF,EAAMG,QAAQ,KAE7BlB,kBAAkBgB,EAAAA,EAAAA,KAAI,CACpBG,SAAUJ,EAAMK,WAAWjB,KAAKkB,GAChCC,MAAO,OACPC,WAAYR,EAAMG,QAAQ,GAC1BM,OAAQT,EAAMG,QAAQ,EAAG,O,0UC5CtB,MAAMO,EAAkB,EAC7BC,UACAC,KACAC,UACAC,WACAC,UACAC,2BAUA,MAAMC,IAA0BD,GAAoC,aAAZH,EAElDK,GAAQC,EAAAA,EAAAA,GAAQA,GAAC,YACrB,OAAIC,EAAAA,EAAAA,MAEEH,GAEFH,GAASO,EAAAA,EAAAA,IAASL,IACX,EAACK,EAAAA,EAAAA,IAASL,MAKjBL,GACFG,GAASO,EAAAA,EAAAA,IAASV,WAIGC,EAAGU,YACVC,IAAIF,EAAAA,IACtB,IAAG,IAoBH,OAlBA3C,EAAAA,EAAAA,YAAU,MACH0C,EAAAA,EAAAA,OAEET,EAKCO,EAAMM,YAA0DC,IAAjDP,EAAMM,MAAME,MAAMC,GAAMA,EAAEH,QAAUb,KAEjDO,EAAMM,MAAMI,OAAS,GACvBd,EAASI,EAAMM,MAAM,IAPrBN,EAAMM,OAASN,EAAMM,MAAM,IAC7BV,EAASI,EAAMM,MAAM,IAU3B,GACC,CAACN,EAAMM,MAAOV,EAAUH,KAGzB,SAACkB,EAAAA,OAAMA,CACLC,aAAW,mBACXf,QAASA,EACTS,MAAOb,EACPoB,QAASb,EAAMM,MACfV,SAAUA,EACVkB,SAAUd,EAAMe,QAChBC,UAAWhB,EAAMe,QACjBE,kBAAkB,G,4UCpEjB,MAAMC,EAAgB,EAAGxB,KAAID,UAAS0B,QAAOrD,YAAW8B,WAAUC,cACvE,MAAMG,GAAQC,EAAAA,EAAAA,GAAQA,GAAC,YAErB,OAAKR,SAIgBC,EAAG0B,OAAO3B,IACjBY,IAAIF,EAAAA,UAJT,EAKX,IAAG,CAACV,IAEJ,OACE,SAACkB,EAAAA,OAAMA,CACL7C,UAAWA,EACXgD,SAAUd,EAAMe,QAChBH,aAAW,iBACXf,QAASA,EACTwB,cAAaC,EAAAA,GAAUC,WAAWC,eAAeC,oBACjDnB,MAAOa,EACPN,QAASb,EAAMM,MACfV,SAAUA,EACVoB,UAAWhB,EAAMe,QACjBE,kBAAkB,EAClBS,YAAa1B,EAAMe,QAAU,iBAAmB,gB,izBCVtD,MAAMY,EAAc,CAClB,CAAEC,MAAO,UAAWtB,MAAOuB,EAAAA,GAAWC,SACtC,CAAEF,MAAO,OAAQtB,MAAOuB,EAAAA,GAAWE,OAG9B,SAASC,GAAY,GAC1BtC,EAAE,QACFC,EAAO,gBACPsC,EAAe,SACfrC,EAAQ,iBACRsC,EAAgB,WAChBC,EAAU,qBACVrC,EAAoB,MACpBsC,EAAK,eACLC,IAEA,MAAM,WAAEC,GAAeF,GAChBG,EAAGC,IAAmBC,EAAAA,EAAAA,MACtBC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GACzCC,EAAWnD,EAAGmD,SAEdC,GAASC,EAAAA,EAAAA,SAETC,GAAqBC,EAAAA,EAAAA,cACxBC,I,IAGiBd,EAFZc,IAAkBrB,EAAAA,GAAWE,OAC/BoB,EAAAA,EAAAA,mBAAkB,kCAAmC,CACnDC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B4E,mBAAoBxB,EAAAA,GAAWE,OAI/BO,IAAeT,EAAAA,GAAWE,KAI9BnC,EAAS,OAAKwC,GAAAA,CAAOE,WAAYY,KAH/BP,GAAe,E,GAKnB,CAACL,EAAY1C,EAAUwC,IAyDzB,OACE,sB,WACE,UAACkB,EAAAA,EAAYA,C,WACX,SAACC,EAAAA,EAAYA,CACX3B,MAAM,SACNtB,MAAO8B,EAAMoB,OACb9B,YAAY,gBACZT,kBAAgB,EAChBrB,SA9DgB6D,I,IAIRrB,EAHd,MAAMsB,EAAO,OAAKtB,GAAAA,CAAOoB,YAAoBjD,IAAZkD,EAAEnD,MAAsBmD,EAAEnD,MAAQqD,EAAAA,GAAYC,SAE/ET,EAAAA,EAAAA,mBAAkB,6BAA8B,CAC9CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9BoF,eAAgBH,EAAKF,SAEvB5D,EAAS8D,EAAK,EAwDR7C,QAASiD,EAAAA,KAGVxB,IAAeT,EAAAA,GAAWC,UACzB,sB,WACE,SAACiC,EAAAA,aAAYA,CACXC,GAAI,cAAclB,IAClBlB,MAAM,SACNP,cAAaC,EAAAA,GAAUC,WAAWC,eAAeyC,mBACjDC,aAAa,EACbC,WAAW,EACX7D,MAAO+B,EAAe+B,OACtBxE,SAAWyE,I,IAMKjC,EALRiC,EAAGC,kBAAkBC,oBAI3BpB,EAAAA,EAAAA,mBAAkB,6BAA8B,CAC9CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B+F,UAAWH,EAAGC,OAAOG,UAGvBvC,EAAiB,OAAKG,GAAAA,CAAgB+B,OAAQC,EAAGC,OAAOG,W,KAI5D,SAACV,EAAAA,aAAYA,CACXC,GAAI,aAAalB,IACjBlB,MAAM,QACNP,cAAaC,EAAAA,GAAUC,WAAWC,eAAekD,kBACjDR,aAAa,EACbC,WAAW,EACX7D,MAAO+B,EAAesC,MACtB/E,SAAWyE,I,IAMKjC,EALRiC,EAAGC,kBAAkBC,oBAI3BpB,EAAAA,EAAAA,mBAAkB,4BAA6B,CAC7CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B+F,UAAWH,EAAGC,OAAOG,UAGvBvC,EAAiB,OAAKG,GAAAA,CAAgBsC,MAAON,EAAGC,OAAOG,W,KAI3D,SAACV,EAAAA,aAAYA,CACXC,GAAI,aAAalB,IACjBlB,MAAM,QACNP,cAAaC,EAAAA,GAAUC,WAAWC,eAAeoD,kBACjDV,aAAa,EACbC,WAAW,EACX7D,MAAO+B,EAAewC,MACtBjF,SAAWyE,I,IAMKjC,EALRiC,EAAGC,kBAAkBC,oBAI3BpB,EAAAA,EAAAA,mBAAkB,4BAA6B,CAC7CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B+F,UAAWH,EAAGC,OAAOG,UAGvBvC,EAAiB,OAAKG,GAAAA,CAAgBwC,MAAOR,EAAGC,OAAOG,W,KAI3D,SAACV,EAAAA,aAAYA,CACXC,GAAI,eAAelB,IACnBlB,MAAM,UACNP,cAAaC,EAAAA,GAAUC,WAAWC,eAAesD,oBACjDZ,aAAa,EACbC,WAAW,EACX7D,MAAO+B,EAAe0C,QACtBnF,SAAWyE,I,IAMKjC,EALRiC,EAAGC,kBAAkBC,oBAI3BpB,EAAAA,EAAAA,mBAAkB,8BAA+B,CAC/CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B+F,UAAWH,EAAGC,OAAOG,UAGvBvC,EAAiB,OAAKG,GAAAA,CAAgB0C,QAASV,EAAGC,OAAOG,W,QAMjE,SAACO,EAAAA,EAAQA,CAACC,KAAM,IAEfhD,GACC,SAACzD,EAAAA,OAAMA,CAAC0G,KAAK,OAAOxG,QAAQ,UAAUR,KAAK,KAAKS,QAAS,IAAMwD,I,SAAc,eAI7E,SAACgD,EAAAA,QAAOA,CACNrG,MAAM,QACNsG,SACE,sB,UAAE,oDACgD,SAACC,KAAAA,CAAAA,GAAK,4CAI1DC,UAAU,M,UAEV,SAAC9G,EAAAA,OAAMA,CAAC0G,KAAK,uBAAuBxG,QAAQ,YAAYR,KAAK,KAAKS,QAAS,IAAMwD,I,SAAc,iBAMnG,SAACoD,EAAAA,iBAAgBA,CAAC1E,QAASc,EAAazD,KAAK,KAAKoC,MAAOgC,EAAY1C,SAAUoD,KAE/E,SAAClG,EAAYA,CACXC,OAAQ2F,EACRxF,OAAQ,K,IAEQkF,GADde,EAAAA,EAAAA,mBAAkB,kCAAmC,CACnDC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B4E,mBAAoBxB,EAAAA,GAAWC,QAC/BrD,KAAM,SAGRkE,GAAe,GACfH,EAAgBJ,EAAMoD,QACtB5F,EAAS,OACJwC,GAAAA,CACHoD,OAAQ3C,EAAST,GACjBE,WAAYT,EAAAA,GAAWC,U,EAG3B7E,UAAW,K,IAEKmF,GADde,EAAAA,EAAAA,mBAAkB,kCAAmC,CACnDC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B4E,mBAAoBxB,EAAAA,GAAWC,QAC/BrD,KAAM,YAGRkE,GAAe,GACf/C,EAAS,OACJwC,GAAAA,CACHoD,OAAQ3C,EAAST,GACjBE,WAAYT,EAAAA,GAAWC,U,EAG3B9E,SAAU,K,IAEMoF,GADde,EAAAA,EAAAA,mBAAkB,kCAAmC,CACnDC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B4E,mBAAoBxB,EAAAA,GAAWC,QAC/BrD,KAAM,WAGRkE,GAAe,EAAM,OAK1BL,IAAeT,EAAAA,GAAWC,UACzB,sB,WACE,SAAC2D,EAAAA,MAAKA,CAAChF,EAAG,MACV,UAACiF,EAAAA,EAASA,C,UAvLA,WAAZ/F,OAKCO,EAAAA,EAAAA,MAAoE,aAAZP,KAoLnD,SAACgG,EAAAA,EAAWA,CAAC/D,MAAM,UAAUgE,MAAO,G,UAClC,SAACpG,EAAeA,CACdE,GAAIA,EACJG,QAAS,eAAeiD,IACxBrD,QAAS2C,EAAM3C,QACfE,QAASA,EACTG,qBAAsBA,EACtBF,SAhOS6D,IACvB,GAAIA,EAAEnD,QAAU8B,EAAM3C,QACpB,OAGF,MAAMiE,EAAO,OACRtB,GAAAA,CACH3C,QAASgE,EAAEnD,MACXa,WAAOZ,EACPsF,SAAKtF,EACLiF,OAAQ,KAGV5F,EAAS8D,EAAK,OAuNN,SAACiC,EAAAA,EAAWA,CAAC/D,MAAM,QAAQgE,MAAO,G,UAChC,SAAC1E,EAAaA,CACZxB,GAAIA,EACJG,QAAS,mBAAmBiD,IAC5BrD,QAAS2C,EAAM3C,SAAWK,EAC1BqB,MAAOiB,EAAMjB,MACbvB,SA1NS6D,IACrB,GAAIA,EAAEnD,QAAU8B,EAAMjB,MACpB,OAGF,MAAMuC,EAAiB,OAClBtB,GAAAA,CACHjB,MAAOsC,EAAEnD,MACTuF,SAAKtF,EACLiF,OAAQ,KAGV5F,EAAS8D,EAAK,cAsNlB,C,0JClTO,SAASoC,GAAe,SAAEC,EAAQ,SAAEnG,EAAQ,MAAEwC,EAAK,MAAEwD,EAAK,OAAEI,EAAM,yBAAEC,IAEzE,MAAMC,GAAW9I,EAAAA,EAAAA,QAAiBgF,IAClC5E,EAAAA,EAAAA,YAAU,KACR0I,EAASzI,QAAU2E,CAAK,GACvB,CAACA,IAEJ,MAAM+D,GAAmBlD,EAAAA,EAAAA,cACvB,CAACuC,EAAgBY,KACf,MAAMC,G,wUAAW,IACZH,EAASzI,S,WAAO,CACnB6I,UAAU,EACVd,W,uVAEF5F,EAASyG,EAAUD,EAAa,GAElC,CAACxG,IAGH,OACE,SAAC2G,EAAAA,EAASA,CACRX,MAAOA,EACPI,OAAQA,EACR5D,MAAOA,EAAMoD,OACb5F,SAAUuG,EACVK,SAAUP,E,SAETF,GAGP,C,mVC7BO,SAASU,GAAe,GAAE/G,EAAE,MAAE0C,EAAK,WAAEsE,EAAU,MAAEC,I,IA0DxC3G,EAzDd,MAAO4G,EAAkBC,IAAuBjE,EAAAA,EAAAA,YAC1C9D,GAAQgI,EAAAA,EAAAA,aACRC,GAAiBC,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,gBAAe,UAAU,IAExD5J,GAAS2J,EAAAA,EAAAA,UAAQ,KACd,CACLE,OAAOnI,EAAAA,EAAAA,KAAI,CACToI,MAAOrI,EAAMsI,OAAOF,MAAMG,KAC1BnI,SAAUJ,EAAMK,WAAWmI,UAAUpI,SACrCqI,WAAYzI,EAAMK,WAAWqI,sBAE/BC,OAAO1I,EAAAA,EAAAA,KAAI,CACToI,MAAOrI,EAAMsI,OAAOM,QAAQL,OAE9BM,MAAM5I,EAAAA,EAAAA,KAAI,CACRoI,MAAOrI,EAAMsI,OAAOC,KAAKO,eAG5B,CAAC9I,KAEGkB,EAAO6H,IAAiBC,EAAAA,EAAAA,GAAUA,W,MACvC,aAAOC,G,IACDA,EAAJ,MAAyB,MAAb,QAARA,EAAAA,EAAEvC,cAAFuC,IAAAA,OAAAA,EAAAA,EAAUC,QACL,WAGItI,EAAGmI,cAAcE,EAAGpB,EACnC,I,gBANOoB,G,gCADgCD,GAQvC,CAACpI,QAGSuI,EAAAA,EAAAA,GAAWA,GACrB,YACE,MAAMC,QAAeL,EAAczF,GAKnC,OAJI8F,GACFrB,EAAoBqB,GAGf,IACT,IACA,IACA,CAAC9F,EAAOyF,IAYV,IATArK,EAAAA,EAAAA,YAAU,MACJoJ,aAAAA,EAAAA,EAAkBuB,UACpBzB,GAAW,IAETE,aAAAA,EAAAA,EAAkBwB,UACpB1B,GAAW,EACb,GACC,CAACE,EAAkBF,KAEjB1G,EAAMM,QAAUN,EAAMe,QACzB,OAAO,KAGT,MAAMmG,GAAmB,QAAXlH,EAAAA,EAAMM,aAANN,IAAAA,OAAAA,EAAAA,EAAakH,OA4B7B,SAA6BA,GAC3B,MAAMmB,EAAQnB,EAAMoB,MAAM,KAC1B,OAAID,EAAM3H,OAAS,EACV2H,EAAME,MAAM,GAAGC,KAAK,KAEtBtB,CACT,CAlCqCuB,CAAoBzI,EAAMM,MAAM4G,OAAS,GAE5E,OACE,sB,UACGlH,EAAMe,UACL,UAAClD,MAAAA,CAAIC,UAAWT,EAAOsK,K,WACrB,SAACe,EAAAA,QAAOA,CAACC,QAAQ,EAAMzK,KAAK,OAAO,2BAGrC8B,EAAMe,SAAWf,EAAMM,QACvB,sB,WACE,qB,SACGN,EAAMM,MAAM8H,SAAWpI,EAAMM,MAAMsI,aAClC,UAAC/K,MAAAA,CAAIC,UAAWT,EAAOoK,M,WACrB,SAACzJ,EAAAA,KAAIA,CAACC,KAAK,UAAU,2BAAyB,KAC9C,SAAC4K,SAAAA,C,UAAQC,EAAAA,EAAAA,wBAAuB/B,EAAe/G,EAAMM,MAAMsI,WAAWG,wBAAgC,IAAI,kBAMhH,qB,SAAG/I,EAAMM,MAAM6H,UAAW,SAACtK,MAAAA,CAAIC,UAAWT,EAAO6J,M,SAAQA,WAKnE,C,gcCrFO,SAAS8B,EAAa,G,IAAA,UAAEC,EAAS,aAAEC,EAAY,SAAEC,EAAQ,WAAEC,GAArC,EAAoDC,E,kXAAAA,CAApD,GAAEJ,YAAWC,eAAcC,WAAUC,eAChE,MAAMtK,GAAQgI,EAAAA,EAAAA,cACPF,EAAkBC,IAAuBjE,EAAAA,EAAAA,YAE1CvF,GAAS2J,EAAAA,EAAAA,UAAQ,KACd,CACLsC,WAAWvK,EAAAA,EAAAA,KAAI,CACbwK,OAAQ,aAAazK,EAAMsI,OAAOmC,OAAOC,SACzCC,UAAW,OACXC,QAAS5K,EAAMG,QAAQ,GAAK,GAAK,GAAK,IACtC0K,QAAS,OACTC,SAAU,EACVC,eAAgB,gBAChB3K,SAAUJ,EAAMK,WAAWmI,UAAUpI,WAEvCgI,OAAOnI,EAAAA,EAAAA,KAAI,CACToI,MAAOrI,EAAMsI,OAAOF,MAAMG,KAC1BnI,SAAUJ,EAAMK,WAAWmI,UAAUpI,SACrCqI,WAAYzI,EAAMK,WAAWqI,sBAE/BC,OAAO1I,EAAAA,EAAAA,KAAI,CACToI,MAAOrI,EAAMsI,OAAOM,QAAQL,OAE9BM,MAAM5I,EAAAA,EAAAA,KAAI,CACRoI,MAAOrI,EAAMsI,OAAOC,KAAKO,YAE3BkC,MAAM/K,EAAAA,EAAAA,KAAI,CACRoI,MAAOrI,EAAMsI,OAAOC,KAAKvG,SACzBiJ,WAAY,SACZC,OAAQ,YAGX,CAAClL,IAEJ,IAAImL,EAAQ,CAAC,EAMb,OAJKhB,QAAkC1I,IAArBqG,IAChBqD,EAAQ,CAAEjE,OAAQ,EAAG0D,QAAS,EAAGQ,WAAY,YAI7C,UAACrM,MAAAA,CAAIC,UAAWT,EAAOiM,UAAWW,MAAOA,E,WACvC,SAACpM,MAAAA,C,SACEwL,EAAe3C,aACd,SAACD,G,EAAcA,EAAAA,CAAAA,EACT4C,G,EAAAA,CACJ3C,WAAawB,IACXrB,EAAoBqB,GACpBmB,EAAe3C,WAAYwB,EAAO,G,4VAKzCe,IACC,SAACpL,MAAAA,C,UACC,UAACsM,EAAAA,gBAAeA,CAAClL,QAAQ,K,UACtBiK,IACC,SAACkB,EAAAA,WAAUA,CACTzL,QAAS,K,IAEO0K,GADdlG,EAAAA,EAAAA,mBAAkB,8BAA+B,CAC/CC,WAA2C,QAA/BiG,EAAAA,EAAejH,MAAMgB,kBAArBiG,IAAAA,OAAAA,EAAAA,EAAiC5K,OAE/CyK,GAAc,EAEhBjL,KAAK,iBACLC,KAAK,KACLmM,QAAQ,iBAGXlB,IACC,SAACiB,EAAAA,WAAUA,CACTzL,QAAS,K,IAEO0K,GADdlG,EAAAA,EAAAA,mBAAkB,4BAA6B,CAC7CC,WAA2C,QAA/BiG,EAAAA,EAAejH,MAAMgB,kBAArBiG,IAAAA,OAAAA,EAAAA,EAAiC5K,KAC7C6L,UAAWlB,IAGbD,GAAUC,EAAW,EAEvBnL,KAAMmL,EAAa,WAAa,aAChClL,KAAK,KACLmM,QAASjB,EAAa,kBAAoB,mBAG9C,SAACjE,EAAAA,QAAOA,CAACC,QAAQ,mC,UACf,SAACpH,EAAAA,KAAIA,CAACF,UAAWT,EAAOyM,KAAM7L,KAAK,uB,OAOjD,CCvFO,SAASsM,GAAU,GAAE7K,EAAE,MAAE0C,EAAK,SAAExC,EAAQ,WAAEuC,EAAU,WAAEuE,EAAU,gBAAE8D,EAAe,MAAE7D,IACxF,MAAM7H,GAAQgI,EAAAA,EAAAA,aACRzJ,GAASC,EAAAA,EAAAA,YAAWC,IACnB6L,EAAYqB,IAAiB7H,EAAAA,EAAAA,WAAS,IACtC8H,EAAYC,IAAkBC,EAAAA,EAAAA,MAC9BC,EAAWC,IAAiBF,EAAAA,EAAAA,KAE7B3E,GAA2Be,EAAAA,EAAAA,UAAQ,IAAMtH,EAAGqL,+BAA+B,CAACrL,IAE5EsL,EAAoB,CAACpF,EAAgBI,KAEvC,SAACF,EAAcA,CACbG,yBAA0BA,EAC1B7D,MAAOA,EACPwD,MAAOA,EACPI,OAAQA,EAASA,EAAS2E,EAAe3E,YAASzF,EAClDX,SAAUA,E,SAET,EAAGqL,kBAEA,SAACpN,MAAAA,CAAIgB,IAAK6L,E,UACR,SAAC1B,EAAYA,CACXtJ,GAAIA,EACJ0C,MAAOoI,EACP9D,WAAYA,EACZwC,aAAc+B,EACdhC,WAAS,EACTtC,MAAOA,EACPwC,SAAUsB,EACVrB,WAAYA,QASpB8B,EAAe,CAACC,GAAa,IAC1BA,GACL,SAACC,EAAAA,GAASA,C,SACP,EAAGxF,QAAOI,YACFgF,EAAkBpF,EAAOI,MAIpC,SAACnI,MAAAA,CAAIgB,IAAKgM,E,SAAYG,MAqB1B,OACE,sB,UACG5B,GAjBD,SAACvL,MAAAA,CACCoM,MAAO,CACLrE,MAAOkF,EAAclF,MACrBI,OAAQ8E,EAAc9E,OACtBqF,WAAYvM,EAAMsI,OAAOiE,WAAWC,QACpC3B,QAAS,OACT4B,WAAY,SACZ1B,eAAgB,U,SAEnB,oCAQmCqB,IACnC9B,IACC,SAACzL,EAAAA,MAAKA,CACJC,MAAO,SAASwE,EAAMoJ,QACtBC,sBAAsB,EACtBC,eAAe,EACf5N,UAAWT,EAAOsO,MAClBC,iBAAkBvO,EAAOwO,aACzB9O,OAAQqM,EACR/K,UAAW,K,IAEK+D,GADde,EAAAA,EAAAA,mBAAkB,4BAA6B,CAC7CC,WAA4B,QAAhBhB,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,KAC9B6L,UAAU,IAEZG,GAAc,EAAM,E,SAGrBS,GAAa,OAKxB,CAEA,SAAS3N,EAAUuB,GACjB,MAAO,CACL6M,OAAO5M,EAAAA,EAAAA,KAAI,CACT6G,MAAO,OACPI,OAAQ,SAEV6F,cAAc9M,EAAAA,EAAAA,KAAI,CAChBiH,OAAQ,OACR1G,WAAY,IAGlB,C,wBC/GO,SAASwM,GAAQ,OAAEtG,EAAM,eAAEuG,IAEhC,MAAOxJ,EAAGC,IAAmBC,EAAAA,EAAAA,KACvBpF,GAASC,EAAAA,EAAAA,YAAWC,GASpByO,GACJ,UAACnO,MAAAA,CAAIC,UAAWT,EAAO4O,a,WACrB,SAAC9N,OAAAA,CAAKL,UAAWT,EAAOuE,M,SAAO,aAC/B,SAACwI,EAAAA,WAAUA,CAACC,QAAQ,oBAAoB1L,QAAS,IAVjC,CAAC6G,IACnBhD,EAAgBgD,IAChBrC,EAAAA,EAAAA,mBAAkB,6BAA8B,CAC9CC,WAAY2I,GACZ,EAMuDG,CAAY1G,GAASvH,KAAK,YAIrF,OACE,SAACkO,EAAAA,MAAKA,CAACvK,MAAOoK,EAAclO,UAAWT,EAAO4H,K,UAC5C,SAACmH,EAAAA,WAAUA,CACT5F,SAAS,MACTR,OAAQ,GACR1F,OAAO+L,EAAAA,EAAAA,GAAU7G,GACjB8G,cAAe,CAAEC,UAAW,CAAEC,SAAU,UAAYC,sBAAsB,GAC1EC,UAAU,EACVC,aAAa,KAIrB,CAEA,SAASpP,EAAUuB,GACjB,MAAO,CACLmG,MAAMlG,EAAAA,EAAAA,KAAI,CAAE6K,SAAU,IACtBhI,OAAO7C,EAAAA,EAAAA,KAAI,CAAEG,SAAU,GAAI0N,WAAY9N,EAAMK,WAAW0N,mBACxDZ,cAAclN,EAAAA,EAAAA,KAAI,CAAE4K,QAAS,OAAQE,eAAgB,gBAAiBiD,cAAehO,EAAMG,QAAQ,MAEvG,C,yHC3CO,SAAS8N,IAAa,MAAE3K,EAAK,cAAE4K,EAAa,GAAEtN,IACnD,MAAMuN,GAAchK,EAAAA,EAAAA,cACjB4C,IACC,MACML,GAAS3C,EADEnD,EAAGmD,UACI,CAAEgD,MAAKpG,QAAS2C,EAAM3C,QAAS0B,MAAOiB,EAAMjB,MAAOqK,MAAOpJ,EAAMoJ,QAClFnF,G,yUAAqB,IAAKjE,G,WAAAA,CAAOyD,MAAKL,W,uVAC5CwH,EAAc3G,EAAS,GAEzB,CAAC3G,EAAIsN,EAAe5K,IAGtB,MAAO,CAAE6K,cACX,C,6JCNO,SAASC,IAAW,IAAErH,EAAG,QAAEsH,EAAO,YAAEF,IACzC,MAAMG,GAAkBnK,EAAAA,EAAAA,cACrBoK,IAEC,MAAMC,EAAUD,EAAKhN,KAAKI,I,IAAsBA,E,OAAhB8M,EAAAA,EAAAA,IAA0B,QAAV9M,EAAAA,EAAE+M,gBAAF/M,IAAAA,OAAAA,EAAAA,EAAYxC,KAAK,IAC3DwP,G,yUAAS,IAAK5H,G,WAAAA,CAAK6H,QAASJ,I,uVAClCL,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGhB,OACE,SAAC8H,GAAAA,EAAUA,CACTC,MAAO/H,EAAI6H,QACX9N,SAAUwN,EACVS,WAAYC,GAAiB,CAC3BjN,QAASsM,KAIjB,CAEA,SAASW,IAAiB,QAAEjN,IAmB1B,OAlBqB,SACnBwM,EACAU,EACAC,G,IAKaX,EAHb,OACE,UAACY,GAAAA,EAAUA,C,WACT,SAACtN,EAAAA,OAAMA,CACLL,OAAoB,QAAb+M,EAAAA,EAAKG,gBAALH,IAAAA,OAAAA,EAAAA,EAAepP,OAAOkC,EAAAA,EAAAA,UAASkN,EAAKG,SAASvP,MAAQ,KAC5D2C,aAAW,WACXC,QAASA,EACTI,kBAAgB,EAChBrB,SAAU,EAAGU,WAAYA,GAASyN,GAAaR,EAAAA,EAAAA,IAAgBjN,OAEjE,SAAC4N,GAAAA,EAAeA,CAACtQ,MAAM,yBAAyBsH,KAAK,QAAQxG,QAAQ,YAAYC,QAASqP,MAGhG,CAEF,CC3CO,SAASG,IAAc,OAAEC,EAAM,MAAEhM,EAAK,cAAE4K,EAAa,GAAEtN,IAC5D,MAAM,YAAEuN,GAAgBF,GAAa,CAAE3K,QAAO4K,gBAAetN,OAE7D,OAAO,SAACwN,GAAUA,CAACC,QAASiB,EAAQvI,IAAKzD,EAAMyD,IAAMoH,YAAaA,GACpE,C,k0BCDA,MAAMoB,GAAmB,CACvB,CAAEC,YAAa,oBAAqBhO,MAAO,MAAO4E,KAAM,kBACxD,CAAEoJ,YAAa,qBAAsBhO,MAAO,OAAQ4E,KAAM,qBAGrD,SAASqJ,IAAW,IAAE1I,EAAG,YAAEoH,EAAW,QAAEE,EAAO,WAAEqB,I,IA2CrC3I,EAUIA,EApDrB,MAAM4I,GAAoBxL,EAAAA,EAAAA,cACvBoK,IACC,MAAMI,EAAwB,SAAK5H,GAAAA,CAAK6I,iBAAkBrB,IAC1DJ,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGV8I,GAAgB1L,EAAAA,EAAAA,cACnB2L,IACC,MAAMnB,EAAwB,SAAK5H,GAAAA,CAAKgJ,MAAOC,OAAOC,SAASH,EAAMI,cAAc1O,MAAO,MAC1F2M,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGVoJ,GAAiBhM,EAAAA,EAAAA,cACpB2L,IACC,MAAMnB,EAAwB,SAAK5H,GAAAA,CAAKqJ,OAAQJ,OAAOC,SAASH,EAAMI,cAAc1O,MAAO,MAC3F2M,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGVsJ,GAAkBlM,EAAAA,EAAAA,cACrBoK,IACC,MAAMI,EAAwB,SAAK5H,GAAAA,CAAKuJ,SAASC,EAAAA,EAAAA,IAAiBhC,aAAAA,EAAAA,EAAM/M,SAC3D,OAAT+M,IACFI,EAAOiB,sBAAmBnO,GAE5B0M,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGhB,OACE,sB,WACE,SAACF,EAAAA,EAAWA,CAAC/D,MAAM,WAAWgE,MAAO,G,UACnC,UAACqI,GAAAA,EAAUA,C,WACT,SAACtN,EAAAA,OAAMA,CACLC,aAAW,WACXC,QAASsM,EACT7M,OAAkB,QAAXuF,EAAAA,EAAIuJ,eAAJvJ,IAAAA,OAAAA,EAAAA,EAAa2H,SAASvP,OAAOkC,EAAAA,EAAAA,UAAS0F,EAAIuJ,QAAQ5B,SAASvP,MAAQ,KAC1EqR,aAAW,EACXrO,kBAAgB,EAChBrB,SAAUuP,KAGZ,SAAC1J,EAAAA,MAAKA,CAAC8J,EAAG,OAEV,SAAChK,EAAAA,iBAAgBA,CACf1E,QAASwN,GACTvN,WAAW+E,SAAY,QAAZA,EAAAA,EAAKuJ,eAALvJ,IAAAA,OAAAA,EAAAA,EAAc2H,SAASvP,MAClCqC,MAAOuF,EAAI6I,iBACX9O,SAAU6O,UAIhB,SAAC9I,EAAAA,EAAWA,CAAC/D,MAAM,QAAQ4N,UAAQ,EAAC5J,MAAO,G,UACzC,SAAC6J,EAAAA,MAAKA,CAAChR,KAAK,SAASiR,IAAK,EAAG1L,IAAI2L,EAAAA,GAAAA,UAAS,UAAWrP,MAAOuF,EAAIgJ,OAAS,GAAIjP,SAAU+O,MAExFH,IACC,SAAC7I,EAAAA,EAAWA,CAAC/D,MAAM,SAAS4N,UAAQ,EAAC5J,MAAO,G,UAC1C,SAAC6J,EAAAA,MAAKA,CAAChR,KAAK,SAASuF,IAAI2L,EAAAA,GAAAA,UAAS,WAAYrP,MAAOuF,EAAIqJ,QAAU,GAAItP,SAAUqP,QAK3F,CC7EO,SAASW,IAAc,OAAExB,EAAM,MAAEhM,EAAK,cAAE4K,EAAa,GAAEtN,IAC5D,MAAM,YAAEuN,GAAgBF,GAAa,CAAE3K,QAAO4K,gBAAetN,OAC7D,IAAImQ,EAAwC,G,IAG1BzN,EAAAA,EADdgM,IAQFyB,EAAqB,CACnB,CACEvP,MAAO,GACPsB,MAAO,mBACPf,QAXqB,QAATuB,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,K,IACND,EAAsCA,EAA1E,MAAMxP,EAAQwP,EAAE7R,KAAO,GAAG6R,EAAE7R,QAAoB,QAAZ6R,EAAAA,EAAEE,kBAAFF,IAAAA,OAAAA,EAAAA,EAAczP,KAAK/B,GAAMA,EAAEL,UAAuB,QAAZ6R,EAAAA,EAAEE,kBAAFF,IAAAA,OAAAA,EAAAA,EAAczP,KAAK/B,GAAMA,EAAEL,OACrG,MAAO,CACLqC,QACAsB,MAAO,GAAGmO,EAAI,OAAOzP,IACtB,IAOCgK,UAAU,MAET8D,IAIP,OAAO,SAACG,GAAUA,CAAC1I,IAAKzD,EAAMyD,IAAMoH,YAAaA,EAAaE,QAAS0C,GACzE,C,giCCnBA,MAKaI,GAA0B,CACrCjM,GAAIkM,GAAAA,GAAMC,OACV1R,KAAM,SAGF2R,GAAc,aACdC,GAAS,CAACD,IAIHE,GAAmB,SAC3BC,GAAAA,GAAYD,SAAO,CACtBjJ,KAAM,SACDkJ,GAAAA,GAAYD,QAAQjJ,MAAI,CAC3BmJ,QAAS,SAAmBC,GAC1B,OACE,SAAChB,EAAAA,MAAKA,CACJnP,OAAOmQ,aAAAA,EAAAA,EAAOnQ,QAAS,GACvBoB,YAAa+O,aAAAA,EAAAA,EAAO/O,YACpB9B,SAAW6D,GAAMgN,aAAAA,EAAAA,EAAOC,SAASjN,EAAEuL,cAAc1O,QAGvD,IAEFqQ,OAAQ,SACHJ,GAAAA,GAAYD,QAAQK,QAAM,CAC7BH,QAAS,SAAqBC,GAC5B,OACE,SAAChB,EAAAA,MAAKA,CACJnP,MAAOmQ,aAAAA,EAAAA,EAAOnQ,MACdoB,YAAa+O,aAAAA,EAAAA,EAAO/O,YACpBjD,KAAK,SACLmB,SAAW6D,GAAMgN,aAAAA,EAAAA,EAAOC,SAAS5B,OAAOC,SAAStL,EAAEuL,cAAc1O,MAAO,MAG9E,IAEFsQ,SAAU,SACLL,GAAAA,GAAYD,QAAQM,UAAQ,CAC/BJ,QAAS,SAAuBC,GAC9B,GAAmB,YAAfA,aAAAA,EAAAA,EAAOI,UACT,OACE,SAAClQ,EAAAA,OAAMA,CACLqD,GAAIyM,EAAMzM,GACVpD,aAAW,wBACXK,kBAAgB,EAChBJ,QAASwP,GAAOhQ,IAAIF,EAAAA,UACpBG,MAAOmQ,aAAAA,EAAAA,EAAOnQ,MACdV,SAAWkR,GAAQL,EAAMC,SAASI,EAAIxQ,SAI5C,MAAMyQ,GAAYC,EAAAA,EAAAA,UAASP,aAAAA,EAAAA,EAAOnQ,OAAO8H,WAAY4I,EAAAA,EAAAA,UAASP,aAAAA,EAAAA,EAAOnQ,OAAO2Q,WAAQ1Q,EACpF,OACE,SAAC2Q,EAAAA,eAAcA,CACbtR,SAAW6D,IACTgN,SAAAA,EAAOC,SAASjN,aAAAA,EAAAA,EAAGD,OAAO+M,GAAAA,GAAYD,QAAQM,SAASO,aAAa,EAEtEC,KAAML,GAGZ,EAEAM,eAAgB,CAACP,EAAKQ,EAAOC,EAAQV,EAAUW,EAAoBC,KACjE,GAAiB,WAAbZ,EACF,OAAIR,GAAOqB,SAASZ,GACXA,OAET,EAIF,GACyD,iBAAhDP,GAAAA,GAAYD,QAAQM,SAASS,gBACmB,iBAAhDd,GAAAA,GAAYD,QAAQM,SAASS,eAEpC,OAEF,MAAMM,EAAOpB,GAAAA,GAAYD,QAAQM,SAASS,eAE1C,OAAOM,aAAAA,EAAAA,EAAMC,KAAKrB,GAAAA,GAAYsB,IAAKf,EAAKQ,EAAOC,EAAQV,EAAUW,EAAoBC,KAAkB,EAAE,MAOlGK,GAAqB,SAC7BvB,GAAAA,GAAYuB,UAAQ,CACvBC,YAAY,EACZC,WAAY,EACZC,YAAY,EACZC,SAAS,EACTC,aAjGK,MAkGLC,YAjGQ,SAmGRC,YAAa,SAAsBC,GACjC,OACE,SAAC3R,EAAAA,OAAMA,CACLqD,GAAIsO,aAAAA,EAAAA,EAAWtO,GACfpD,aAAW,cACXS,cAAaC,EAAAA,GAAUC,WAAWC,eAAe+Q,kBACjDtR,kBAAgB,EAChBJ,SAASyR,aAAAA,EAAAA,EAAWE,oBAAqBC,OAAOC,KAAKJ,aAAAA,EAAAA,EAAWE,oBAAoBnS,IAAIF,EAAAA,eAAYI,EACpGD,MAAOgS,aAAAA,EAAAA,EAAWK,oBAClB/S,SAAWkR,GAAQwB,aAAAA,EAAAA,EAAWM,eAAe9B,EAAIxQ,QAGvD,EAEAuS,YAAa,SAAeC,G,IACXA,EAAf,MAAM1E,GAAS0E,SAAkB,QAAlBA,EAAAA,EAAYC,cAAZD,IAAAA,OAAAA,EAAAA,EAAoB1E,SAAU,CAAC,EAC9C,OACE,SAACzN,EAAAA,OAAMA,CACLqD,GAAI8O,aAAAA,EAAAA,EAAY9O,GAChB4B,MAAO,GACPhF,aAAW,QACXS,cAAaC,EAAAA,GAAUC,WAAWC,eAAewR,YACjD/R,kBAAgB,EAChBJ,QAASiS,aAAAA,EAAAA,EAAYlF,MAAMvN,KAAK4S,I,IAEjB7E,EAAAA,EAAb,MAAMlJ,EAAoC,QAA7BkJ,EAAAA,EAAO6E,EAAEC,KAAKC,uBAAd/E,IAAAA,GAA0C,QAA1CA,EAAAA,EAA+BgF,mBAA/BhF,IAAAA,OAAAA,EAAAA,EAA4ClJ,KACzD,MAAO,CACLtD,MAAOqR,EAAErR,MACTtB,MAAO2S,EAAEC,IACThO,OACD,IAEH5E,MAAOwS,aAAAA,EAAAA,EAAYO,YACnBzT,SAAWkR,IACTgC,SAAAA,EAAYQ,SAASxC,EAAIlP,MAAK,GAItC,EAEA2R,aAAc,SAAoBC,GAChC,OACE,SAAChV,EAAAA,OAAMA,CACLC,KAAK,SACLb,MAAO,GAAG4V,aAAAA,EAAAA,EAAa5R,eACvBjD,QAAS6U,aAAAA,EAAAA,EAAa7U,QACtBD,QAAQ,YACRR,KAAK,KACLgH,KApJD,SAoJOsO,aAAAA,EAAAA,EAAa5R,OAA6B,OAAS,SAG/D,EAEA6R,eAAgB,SAAkBC,GAChC,OACE,SAAC/S,EAAAA,OAAMA,CACLE,QAAS6S,aAAAA,EAAAA,EAAe9F,MAAMvN,KAAKsT,IAAQ,CAAE/R,MAAO+R,EAAG/R,MAAOtB,MAAOqT,EAAGT,QACxEtS,aAAW,WACXS,cAAaC,EAAAA,GAAUC,WAAWC,eAAeoS,eACjD3S,kBAAgB,EAChBX,MAAOoT,aAAAA,EAAAA,EAAeL,YACtBzT,SAAWkR,IACT4C,SAAAA,EAAeJ,SAASxC,EAAIxQ,OAAS,GAAG,GAIhD,IASIuT,GAgDN,SAA4Bd,GAC1B,MAAQ,Q,6EAAA,CAA0BA,EAAOe,YAoFzC,OArBwB,SACnBC,GAAAA,CACH,cAAS,SACJA,EAAkB,eAAO,CAC5BC,YAxDyB,CAC3B1C,EACAqC,EACArT,EACA2T,EACAC,EACAC,EACAC,EACAC,IAhB0B,MAC1B,MAAML,EAAcD,EAAkB,cAAQC,YAC9C,OAAIM,GAAcN,GACTA,EAEFO,EAAI,EAaJC,GACLlD,EACAqC,EACAc,GAAcnU,GACd2T,EACAC,EACAC,EACAC,EACAC,KAwCF,kBAAa,SACRN,EAAkB,mBAAW,CAChCC,YA9B4B,CAC9B1C,EACAqC,EACArT,EACA2T,EACAC,EACAC,EACAC,EACAC,IAhB6B,MAC7B,MAAML,EAAcD,EAAkB,kBAAYC,YAClD,OAAIM,GAAcN,GACTA,EAEFO,EAAI,EAaJG,GACLpD,EACAqC,EACAc,GAAcnU,GACd2T,EACAC,EACAC,EACAC,EACAC,KAcF,OAAa,CACXzS,MAAO,SACPoS,YAAa,CAAC1C,EAAeqD,EAAmBrU,IAC1CA,IAAU8P,GACL,iBAAiBkB,KAEnBhR,IAMf,CAtIwBsU,CAAmBrE,GAAAA,IACrCsE,GAAatE,GAAAA,GAAYuE,MAAMzN,KAAKiJ,QAAQjJ,KAC5C0N,GAAQ,IAAKF,GAAWf,WAAa,G,qCACrCkB,GAAmB,SACpBH,IAAAA,CACHf,UAAWiB,KAGPE,GAAc,SACf1E,GAAAA,GAAYuE,OAAK,CACpBzN,KAAM,SACDkJ,GAAAA,GAAYuE,MAAMzN,MAAI,CACzBiJ,QAAS,SACJC,GAAAA,GAAYuE,MAAMzN,KAAKiJ,SAAO,CACjCjJ,KAAM2N,OAGVpE,SAAU,SACLL,GAAAA,GAAYuE,MAAMlE,UAAQ,CAC7BN,QAAS,SACJC,GAAAA,GAAYuE,MAAMlE,SAASN,SAAO,CACrCM,SAAU,SACLL,GAAAA,GAAYuE,MAAMlE,SAASN,QAAQM,UAAQ,CAC9CkD,UAAW,C,YAAgBvD,GAAAA,GAAYuE,MAAMlE,SAASN,QAAQM,SAASkD,WAAa,YAS/EoB,GAAqB,SAC7B3E,GAAAA,IAAWA,CACdD,WACAwB,YACAgC,UAAWD,GACXiB,MAAOG,KAKHV,GAAO,IAAM,GAEbD,GAAiB3C,GACE,mBAATA,EA4FhB,SAAS8C,GAAcnU,GACrB,OAAI6U,EAAAA,GAAAA,UAAS7U,GACJA,EAAMgI,MAAM,KAEdhI,CACT,C,mzBCpUO,SAAS8U,IAAS,IAAEvP,EAAG,OAAEkN,EAAM,YAAE9F,IACtC,MAAOoI,EAAMC,IAAW1S,EAAAA,EAAAA,YAClB2S,GAAqBvO,EAAAA,EAAAA,UAAQ,IAAO,MAAKkO,GAAenC,IAAW,CAACA,KAE1EvV,EAAAA,EAAAA,YAAU,KAER,IAAK6X,EAAM,C,IACuCxP,EAAhD,MAAM2P,EAAWtF,GAAAA,GAAMuF,UAAUvF,GAAAA,GAAMwF,SAA0B,QAAjB7P,EAAAA,EAAI8P,qBAAJ9P,IAAAA,EAAAA,EAAqBoK,IAAgBsF,GACrFD,EAAQE,EACV,IACC,CAACD,EAAoB1P,EAAI8P,cAAeN,KAE3C7X,EAAAA,EAAAA,YAAU,KACHqI,EAAI8P,eACPL,EAAQpF,GAAAA,GAAMuF,UAAUvF,GAAAA,GAAMwF,SAASzF,IAAgBsF,GACzD,GACC,CAACA,EAAoB1P,EAAI8P,gBAE5B,MAAMC,GAAe3S,EAAAA,EAAAA,cACnB,CAAC4S,EAA4B9C,KAC3BuC,EAAQO,GACR,MAAMpI,EAAS,SACV5H,GAAAA,CACH8P,cAAezF,GAAAA,GAAM4F,QAAQD,GAC7BE,YAAa7F,GAAAA,GAAM8F,UAAUH,EAAa9C,KAG5C9F,EAAYQ,EAAO,GAErB,CAACR,EAAapH,IAGhB,OAAKwP,GAKH,SAACY,GAAAA,GAAKA,GAAAA,GAAAA,CAAAA,EACAV,GAAAA,CACJjV,MAAO+U,EACPzV,SAAUgW,EACVM,cAAgBzF,IAAU,SAAC3O,GAAAA,GAAOA,GAAAA,CAAAA,EAAK2O,OARlC,IAWX,CAEA,SAAS0F,GAAKC,GACZ,MAAO,4DAGaA,IACtB,C,gUC9CO,SAASC,IAAY,MAAEjU,EAAK,OAAEgM,EAAM,cAAEpB,EAAa,GAAEtN,IAC1D,MAAMM,GAAQC,EAAAA,GAAAA,GAAQA,IAAC,YACrB,OAuBJ,SAA0BkN,GACxB,MAAMiB,EAA2B,CAAC,EAClC,IAAK,MAAMkI,KAAOnJ,EAChBiB,EAAOkI,EAAIhW,OAAS,CAClB7B,KAAM6X,EAAIC,eAAiB,OAC3BC,aAAc,CAAC,SACfrD,gBAAiB,CAAEC,YAAa,CAAElO,KAAMoR,EAAIpR,QAGhD,OAAOkJ,CACT,CAjCWqI,CAAiBrI,EAC1B,IAAG,CAACA,KAEE,YAAEnB,GAAgBF,GAAa,CAAE3K,QAAO4K,gBAAetN,OAE7D,OACE,SAAC0V,GAAQA,CAGPrC,OAAQ,CAAE3E,OAAQpO,EAAMM,OAAS,CAAC,GAClCuF,IAAKzD,EAAMyD,IACXoH,YAAc6D,KAwBb,SAAuCA,EAAoB4F,G,IAO5C5F,EACAA,EAFhB4F,EAAaC,MAAMC,GALY,CAACA,I,IAGjC9F,EAA+CA,E,MAFhD,UAAW8F,GACXA,EAAGC,SACa,QAAf/F,EAAAA,EAAIiF,mBAAJjF,IAAAA,OAAAA,EAAAA,EAAiBY,SAAS,MAAMkF,EAAG3Y,YAA2B,QAAf6S,EAAAA,EAAIiF,mBAAJjF,IAAAA,OAAAA,EAAAA,EAAiBY,SAAS,IAAIkF,EAAG3Y,SAAM,EAE3D6Y,CAA2BF,OACvD9F,EAAIiF,YAA6B,QAAfjF,EAAAA,EAAIiF,mBAAJjF,IAAAA,OAAAA,EAAAA,EAAiBiG,WAAW,KAAM,KACpDjG,EAAIiF,YAA6B,QAAfjF,EAAAA,EAAIiF,mBAAJjF,IAAAA,OAAAA,EAAAA,EAAiBiG,WAAW,KAAM,KAExD,CA/BQC,CAA8BlG,GAFTmG,EAAAA,EAAAA,kBAAiBC,gBAItCjK,EAAY6D,EAAI,GARbqG,KAAKC,UAAUpX,EAAMM,OAYhC,CD2BA+W,EAAAA,YAAY;;MAENlB,GAAK;;;;MAILA,GAAK;;;;;;;MAOLA,GAAK;;;;MAILA,GAAK;;;;;;iBExEJ,SAASmB,IAAa,QAAEnK,EAAO,kBAAEoK,EAAiB,MAAEjX,IACzD,MAAMkX,GAAgBzU,EAAAA,EAAAA,SAEtB,OACE,SAAC4C,EAAAA,EAAWA,CAAC/D,MAAM,SAASgE,MAAO,G,UACjC,SAACjF,EAAAA,OAAMA,CACLL,MAAOA,EACPe,cAAaC,EAAAA,GAAUC,WAAWC,eAAeiW,aACjD5X,QAAS2X,EACTvW,kBAAgB,EAChBJ,QAAS,CAAC,CAAEe,MAAO,IAAKtB,MAAO,QAAU6M,GACzCuK,kBAAgB,EAChB9X,SAAW+X,GAAMJ,EAAkBI,EAAErX,UAI7C,C,mzBCRO,SAASsX,IAA+B,QAC7CzK,EAAO,MACP/K,EAAK,YACL6K,EAAW,kBACXsK,EAAiB,mBACjBM,I,IAGwBzV,EAAAA,EAmFI0V,EApF5B,MAAMza,GAASC,EAAAA,EAAAA,YAAWC,IACpBua,EAA2B,QAAT1V,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAqByV,GAEvCE,GAAe9U,EAAAA,EAAAA,cAClB+U,I,IACc5V,EAAAA,EAWFA,EAAAA,EAXX,MAAMiL,EAAgB,QAATjL,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAqB4V,GAClC,IAAK3K,EACH,OAGFA,EAAK2C,WAAa3C,EAAK2C,WACnB,IAAI3C,EAAK2C,WAAY,CAAEvR,KAAMwZ,GAAAA,EAA0BC,kBAAmBja,KAAM,KAChF,GAEJ,MAAMwP,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAkB,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,IAAOA,IAAMiI,EAAQ3K,EAAOyC,MAGnE7C,EAAYQ,EAAO,GAErB,CAACR,EAAa7K,EAAMyD,MAGhBsS,GAAkBlV,EAAAA,EAAAA,cACtB,CAACmV,EAAqBJ,K,IACP5V,EAAAA,EAIKiL,EAIPjL,EAAAA,EARX,MAAMiL,EAAgB,QAATjL,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAqBgW,GAClC,KAAK/K,aAAAA,EAAAA,EAAM2C,YACT,OAEF3C,EAAK2C,WAA4B,QAAf3C,EAAAA,EAAK2C,kBAAL3C,IAAAA,OAAAA,EAAAA,EAAiBjJ,QAAO,CAAC7B,EAAGwN,IAAMA,IAAMiI,IAE1D,MAAMvK,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAkB,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,IAAOA,IAAMqI,EAAc/K,EAAOyC,MAGzE7C,EAAYQ,EAAO,GAErB,CAACR,EAAa7K,EAAMyD,MAuCtB,OACE,sB,WACE,SAACwS,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,OACtC,SAAC0V,GAAYA,CACXnK,QAASA,EACToK,kBAAoBI,GAAMJ,EAAkB,EAAlBA,CAAqBI,GAC/CrX,OAAOgY,EAAAA,EAAAA,IAAeR,SAA2B,QAA3BA,EAAAA,EAAiB9H,kBAAjB8H,IAAAA,OAAAA,EAAAA,EAA8B,OA1ChCM,EA4CJP,IA3CfC,aAAAA,EAAAA,EAAiB9H,aAAc8H,EAAgB9H,WAAWtP,QAAU,EAChE,KAGeoX,EAAgB9H,WAAW3P,KAAI,CAACkY,EAAOP,IAE/C,IAAVA,EACK,MAIP,UAACQ,EAAAA,MAAKA,CAAaC,IAAK,E,WACtB,SAACJ,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,OACtC,SAAC6N,EAAAA,MAAKA,CACJ7P,SAAW6D,GAAM8T,EAAkBS,EAAlBT,CAAyB9T,EAAEuL,cAAc1O,OAC1DA,MAAOiY,EAAMta,KACb2C,aAAY,aAAaoX,gBAAoBI,IAC7C/W,cAAaC,EAAAA,GAAUC,WAAWC,eAAekX,qBACjDC,YACE,SAACna,EAAAA,OAAMA,CACLZ,MAAM,mBACNa,KAAK,SACLyG,KAAK,QACLxG,QAAQ,YACRR,KAAK,KACLS,QAAS,IAAMwZ,EAAgBC,EAAaJ,SAdxCA,OAiCd,SAACxZ,EAAAA,OAAMA,CACLC,KAAK,SACLE,QAAS,IAAMoZ,EAAaF,GAC5BnZ,QAAQ,YACRR,KAAK,KACLgH,KAAK,OACLtH,MAAM,mBAER,SAACya,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,SArD1C,IAA0BwW,CAwD5B,CAEA,MAAM7a,GAAY,KACT,CACLqE,OAAO7C,EAAAA,EAAAA,KAAI,CACT2K,QAAS,EACTnK,OAAQ,EACRqG,MAAO,Y,66BC9GN,SAASgT,IAAyB,MAAExW,EAAK,YAAE6K,EAAW,mBAAE4K,EAAkB,GAAEnY,EAAE,QAAEyN,I,IAE7D/K,EAAAA,EADxB,MAAMoV,GAAgBzU,EAAAA,EAAAA,SAChB+U,EAA2B,QAAT1V,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAqByV,GACvCxa,GAASC,EAAAA,EAAAA,YAAWC,IACpBoU,EAAOjS,EAAGmZ,YAAYrY,MAAMyS,GAAMA,EAAEhV,QAAS6Z,aAAAA,EAAAA,EAAiB7Z,SAE7D6a,EAAoBC,IAAyBnW,EAAAA,EAAAA,UAAgD,KAEpGpF,EAAAA,EAAAA,YAAU,KACR,MAAMwb,EAAAA,W,WAAwB,YAC5B,IAAKrH,EACH,OAEF,MAAM9Q,EAAiD,G,IACnC8Q,EAApB,IAAK,MAAM4G,KAAwB,QAAf5G,EAAAA,EAAK3B,kBAAL2B,IAAAA,EAAAA,EAAmB,GACjC4G,EAAM1X,QACRA,EAAQoY,WAAWV,EAAM1X,QAAQuB,IAEjCvB,EAAQoY,KAAK,IAGjBF,EAAsBlY,EACxB,E,mOAbMmY,GAcNA,GAAuB,GAKtB,CAAClB,aAAAA,EAAAA,EAAiB7Z,OAErB,MAAMsZ,GAAoBtU,EAAAA,EAAAA,cACxB,CAAC+U,EAAekB,IAAyBvB,I,IAC1BvV,EAAAA,EAwBFA,EAAAA,EAxBX,MAAMiL,EAAgB,QAATjL,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAqByV,GAClC,IAAKxK,EACH,OAKF,GAHKA,EAAK2C,aACR3C,EAAK2C,WAAa,SAEWzP,IAA3B8M,EAAK2C,WAAWgI,GAClB3K,EAAK2C,WAAWgI,GAAS,CAAEvZ,KAAMwZ,GAAAA,EAA0BC,kBAAmBja,KAAM0Z,QAC/E,GAAS,MAALA,GAAauB,EAAW,C,IAI7B7L,EAFJA,EAAK2C,WAAa3C,EAAK2C,WAAW3P,KAAI,CAAC/B,EAAGyR,IAAOA,IAAMiI,EAAQ,SAAK1Z,GAAAA,CAAGL,KAAM,KAAOK,IAE1B,MAAX,QAA3C+O,EAAAA,EAAK2C,WAAW3C,EAAK2C,WAAWtP,OAAS,UAAzC2M,IAAAA,OAAAA,EAAAA,EAA6CpP,QAC/CoP,EAAK2C,WAAa3C,EAAK2C,WAAW5L,QAAQ9F,GAAiB,KAAXA,EAAEL,OAEtD,MACEoP,EAAK2C,WADS,MAAL2H,EACStK,EAAK2C,WAAW5L,QAAO,CAAC7B,EAAGwN,IAAMA,IAAMiI,IAEvC3K,EAAK2C,WAAW3P,KAAI,CAAC/B,EAAGyR,IAAOA,IAAMiI,EAAQ,SAAK1Z,GAAAA,CAAGL,KAAM0Z,IAAMrZ,IAGrF,MAAMmP,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAkB,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,IAAOA,IAAM8H,EAAqBxK,EAAOyC,MAGhF7C,EAAYQ,EAAO,GAErB,CAACoK,EAAoB5K,EAAa7K,EAAMyD,M,IA6CdiS,EAL5B,YAA8BvX,KAA1BuX,aAAAA,EAAAA,EAAiB7Z,OAEjB,SAACqZ,GAAYA,CACXnK,QAASA,EACToK,kBAAoBI,GAAMJ,EAAkB,EAAlBA,CAAqBI,GAC/CrX,OAAOgY,EAAAA,EAAAA,IAAeR,SAA2B,QAA3BA,EAAAA,EAAiB9H,kBAAjB8H,IAAAA,OAAAA,EAAAA,EAA8B,MAOrDnG,GAcH,sB,WACE,SAAC0G,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,OA/DnC+P,aAAAA,EAAAA,EAAM3B,YAIJ2B,aAAAA,EAAAA,EAAM3B,WAAW3P,KAAI,CAAC8Y,EAAWnB,K,IAmBnBF,EAlBnB,OACE,UAACU,EAAAA,MAAKA,CAAajN,WAAW,WAAWkN,IAAK,E,WAC5C,SAAC9S,EAAAA,EAAWA,CAAC/D,MAAOuX,EAAUlb,KAAM2H,MAAO,GAAI4J,UAAW2J,EAAUC,S,UAClE,qB,SACGD,EAAUtY,SACT,SAACF,EAAAA,OAAMA,CACLL,OAAOgY,EAAAA,EAAAA,IAAeR,aAAAA,EAAAA,EAAiB9H,WAAYgI,IACnDnX,QAASiY,aAAAA,EAAAA,EAAqBd,GAC9B3W,cAAaC,EAAAA,GAAUC,WAAWC,eAAe6X,wBAAwBF,EAAUlb,MACnF4B,QAAS2X,EACTvW,kBAAgB,EAChByW,kBAAgB,EAChBpI,aAAW,EACX1P,SAAW+X,GAAMJ,EAAkBS,GAAO,EAAzBT,CAA+BI,aAAAA,EAAAA,EAAGrX,UAGrD,SAACmP,EAAAA,MAAKA,CACJ7P,SAAW6D,GAAM8T,EAAkBS,GAAO,EAAzBT,CAA+B9T,EAAEuL,cAAc1O,OAChEA,MAAOwX,SAAmC,QAAnCA,EAAAA,EAAiB9H,WAAYgI,UAA7BF,IAAAA,OAAAA,EAAAA,EAAqC7Z,KAC5CoD,cAAaC,EAAAA,GAAUC,WAAWC,eAAekX,2BAKxD/G,EAAK3B,WAAYtP,SAAWsX,EAAQ,IAAK,SAACK,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,QAvBtEoW,EAAAA,IALP,MAgEP,SAACK,EAAAA,YAAWA,CAACva,UAAWT,EAAOuE,M,SAAO,UAftC,SAACgW,GAA8BA,CAC7BxV,MAAOA,EACP6K,YAAaA,EACb4K,mBAAoBA,EACpB1K,QAASA,EACToK,kBAAmBA,GAa3B,CAEA,MAAMha,GAAY,KACT,CACLqE,OAAO7C,EAAAA,EAAAA,KAAI,CACT2K,QAAS,EACTnK,OAAQ,EACRqG,MAAO,Y,mzBC5IN,SAAS0T,IAAU,MAAElX,EAAK,cAAE4K,EAAa,GAAEtN,EAAE,QAAEyN,I,IAuF/C/K,EAAAA,EAtFL,MAAM/E,GAASC,EAAAA,EAAAA,YAAWC,KACpB,YAAE0P,GAAgBF,GAAa,CAAE3K,QAAO4K,gBAAetN,OACvD6Z,EAAsD,GAIxDnX,EAAMoB,SAAWG,EAAAA,GAAY6V,aAC/BD,EAAoBN,KAAK,CAAErX,MAAO,OAAQtB,MAAO,SACjDiZ,EAAoBN,KAAK,CAAErX,MAAO,QAAStB,MAAO,WAGpD,MAAMmZ,GAAsBxW,EAAAA,EAAAA,cAC1B,CAACoK,EAAqC2K,IAAmB0B,I,IAKiBrM,EAAAA,EAK7DjL,EAAAA,EATX,MAAMuX,EAAU,SACXtM,GAAAA,CACHpP,KAAMyb,aAAAA,EAAAA,EAAapZ,MACnB0P,WAAY,CACV,CAAEvR,KAAMwZ,GAAAA,EAA0BC,kBAA4Bja,MAAqB,QAAfoP,EAAAA,EAAK2C,kBAAL3C,IAAAA,GAAoB,QAApBA,EAAAA,EAAkB,UAAlBA,IAAAA,OAAAA,EAAAA,EAAsBpP,OAAQ,OAGhGwP,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAkB,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,IAAOA,IAAMiI,EAAQ2B,EAAU7J,MAGtE7C,EAAYQ,EAAO,GAErB,CAACR,EAAa7K,EAAMyD,MAGhB+T,GAAgB3W,EAAAA,EAAAA,cACpB,CAACoK,EAAqC2K,IAAmB6B,I,IAW5CzX,EAAAA,EAVX,IAAIuX,EAAU,MAAKtM,G,IAGewM,EADpB,OAAVA,EACFF,EAAU,SAAKtM,GAAAA,CAAMwM,MAAO,IAAIA,SAAY,QAAZA,EAAAA,EAAOvZ,aAAPuZ,IAAAA,OAAAA,EAAAA,EAAc7R,mBAEvC2R,EAAQE,MAGjB,MAAMpM,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAkB,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACyP,EAAGC,IAAOA,IAAMiI,EAAQ2B,EAAU7J,MAGtE7C,EAAYQ,EAAO,GAErB,CAACR,EAAa7K,EAAMyD,MAGhBiU,GAAe7W,EAAAA,EAAAA,cAClB+U,GAAkB,K,IACE5V,EAAnB,MAAM2X,EAAQ,KAAc,QAAT3X,EAAAA,EAAMyD,WAANzD,IAAAA,OAAAA,EAAAA,EAAW+K,UAAW,IACzC4M,EAAMC,OAAOhC,EAAO,GACpB,MAAMvK,EAAwB,SACzBrL,EAAMyD,KAAG,CACZsH,QAAS4M,IAEX9M,EAAYQ,EAAO,GAErB,CAACR,EAAa7K,EAAMyD,MAGhBoU,GAAYhX,EAAAA,EAAAA,cAAY,K,IACgCb,EAA5D,MAAMqL,EAAwB,SAAKrL,EAAMyD,KAAG,CAAEsH,QAAS,KAAc,QAAT/K,EAAAA,EAAMyD,WAANzD,IAAAA,OAAAA,EAAAA,EAAW+K,UAAW,IAAK+M,EAAAA,EAAAA,SACvFjN,EAAYQ,EAAO,GAClB,CAACR,EAAa7K,EAAMyD,MAEjBsU,EAAmB,KACvB,MAAMtZ,EAA0C,CAC9C,CAAEe,MAAO,eAAgBf,QAAS,IAClC,CAAEe,MAAO,SAAUf,QAAS,KAE9B,IAAK,MAAM8Q,KAAQjS,EAAGmZ,YAEhBlH,EAAK1T,KAAKmc,WAAW,OACvBvZ,EAAQ,GAAGA,QAAQoY,KAAK,CAAErX,MAAO+P,EAAK1T,KAAMqC,MAAOqR,EAAK1T,OAExD4C,EAAQ,GAAGA,QAAQoY,KAAK,CAAErX,MAAO+P,EAAK1T,KAAMqC,MAAOqR,EAAK1T,OAG5D,OAAO4C,CAAO,EAGhB,OACE,UAAC2X,EAAAA,MAAKA,CAACC,IAAK,EAAG4B,KAAK,OAAOjE,UAAU,S,UACzB,QAAThU,EAAAA,EAAMyD,WAANzD,IAAAA,GAAkB,QAAlBA,EAAAA,EAAW+K,eAAX/K,IAAAA,OAAAA,EAAAA,EAAoB/B,KAAI,CAACgN,EAAM2K,KAC9B,SAACna,MAAAA,C,UACC,UAAC2a,EAAAA,MAAKA,CAACC,IAAK,EAAGlN,WAAW,M,WACxB,SAAC5F,EAAAA,EAAWA,CAAC/D,MAAM,kBAAkB4N,UAAQ,EAAC5J,MAAO,G,UACnD,SAACjF,EAAAA,OAAMA,CACLL,MAAO+M,EAAKpP,MAAOkC,EAAAA,EAAAA,UAASkN,EAAKpP,MAAQ,KACzC4B,QAAS,sBAAsBmY,MAASrI,EAAAA,GAAAA,cACxCtO,cAAaC,EAAAA,GAAUC,WAAWC,eAAe8Y,kBACjDhL,aAAW,EACXrO,kBAAgB,EAChByW,kBAAgB,EAChB7W,QAASsZ,IACTva,SAAU6Z,EAAoBpM,EAAM2K,QAIxC,SAACY,GAAwBA,CACvBf,mBAAoBG,EACpB7K,QAASA,EACTF,YAAaA,EACb7K,MAAOA,EACP1C,GAAIA,KAGN,SAACiG,EAAAA,EAAWA,CAAC/D,MAAM,QAAQ4N,UAAQ,EAAC5J,MAAO,G,UACzC,SAACjF,EAAAA,OAAMA,CACLL,MAAO+M,EAAKwM,OAAQ1Z,EAAAA,EAAAA,UAASkN,EAAKwM,OAAS,KAC3Cha,QAAS,gBAAgBmY,MAASrI,EAAAA,GAAAA,cAClCtO,cAAaC,EAAAA,GAAUC,WAAWC,eAAe+Y,YACjD1Z,QAAS0Y,EACT3Z,SAAUga,EAAcvM,EAAM2K,GAC9B1I,aAAW,EACXrO,kBAAgB,EAChByW,kBAAgB,OAGpB,SAAClZ,EAAAA,OAAMA,CACLZ,MAAM,gBACNa,KAAK,SACLyG,KAAK,YACLxG,QAAQ,YACRR,KAAK,KACLS,QAASmb,EAAa9B,SAzClBA,MA8CZ,SAACxZ,EAAAA,OAAMA,CACLC,KAAK,SACLE,QAASsb,EACTvb,QAAQ,YACRd,MAAM,aACNM,KAAK,KACLgH,KAAK,OACLpH,UAAWT,EAAOmd,cAI1B,CAEA,MAAMjd,GAAY,KACT,CACLid,WAAWzb,EAAAA,EAAAA,KAAI,CAAE0b,UAAW,eAC5B7Y,OAAO7C,EAAAA,EAAAA,KAAI,CACT2K,QAAS,EACTnK,OAAQ,EACRqG,MAAO,Y,gUC7JN,MAAM8U,GAAe,EAAGtY,QAAO1C,KAAI2C,iBAAgBzC,WAAU8G,aAAYC,Y,IAiCrBvE,EAhCzD,MAAMpC,GAAQC,EAAAA,EAAAA,GAAQA,IAAC,YAErB,aADqBP,EAAG0O,OAAOhM,EAEjC,IAAG,CAAC1C,EAAI0C,EAAM3C,QAAS2C,EAAMjB,QAE7B,OACE,sB,WACE,UAACwZ,EAAAA,EAAUA,C,WACT,SAACjV,EAAAA,EAASA,C,UACR,SAAC4T,GAASA,CAACnM,QAASnN,EAAMM,OAAS,GAAI8B,MAAOA,EAAO4K,cAAepN,EAAUF,GAAIA,MAEnF2C,EAAe+B,SACd,SAACsB,EAAAA,EAASA,C,UACR,SAACC,EAAAA,EAAWA,CAAC/D,MAAM,yBAAyB4N,UAAQ,E,UAClD,SAAC6G,GAAWA,CAACjI,OAAQpO,EAAMM,OAAS,GAAI8B,MAAOA,EAAO4K,cAAepN,EAAUF,GAAIA,QAIxF2C,EAAesC,QACd,SAACe,EAAAA,EAASA,C,UACR,SAACC,EAAAA,EAAWA,CAAC/D,MAAM,kB,UACjB,SAACuM,GAAaA,CAACC,OAAQpO,EAAMM,OAAS,GAAI8B,MAAOA,EAAO4K,cAAepN,EAAUF,GAAIA,QAI1F2C,EAAewC,QACd,SAACa,EAAAA,EAASA,C,UACR,SAACkK,GAAaA,CAACxB,OAAQpO,EAAMM,OAAS,GAAI8B,MAAOA,EAAO4K,cAAepN,EAAUF,GAAIA,MAGxF2C,EAAe0C,SAAW3C,EAAMoD,SAC/B,SAACE,EAAAA,EAASA,C,UACR,SAACoG,EAAOA,CAACtG,OAAQpD,EAAMoD,OAAQuG,eAAgC,QAAhB3J,EAAAA,EAAMgB,kBAANhB,IAAAA,OAAAA,EAAAA,EAAkB3D,aAIvE,SAACuK,EAAYA,CAACtJ,GAAIA,EAAI0C,MAAOA,EAAOsE,WAAYA,EAAYC,MAAOA,M,2bCpC1D,SAASiU,IAAe,WACrCxX,EAAU,MACVhB,EAAK,SACLxC,EAAQ,WACRuC,EAAU,MACVwE,EAAK,iBACLkU,I,IAiBYC,EACDA,EAAAA,EAAAA,EACAA,EAAAA,EAjBX,MAAO7Y,EAAiB8Y,IAAsBnY,EAAAA,EAAAA,WAAS,GACjDlD,EAAK0D,EAAW4X,SAEhB,sBAAEC,GAA0B7X,E,IAClByX,EAAhB,MAAMlb,EAAmC,QAAzBkb,EAAAA,aAAAA,EAAAA,EAAkBlb,eAAlBkb,IAAAA,EAAAA,EAA6B,SACvC,QAAE9Z,EAAO,MAAEmG,IAAUjH,EAAAA,EAAAA,GAAQA,IAAC,YAClC,MAAO,UACwCM,IAAzC6C,EAAW4X,MAAM5X,EAAWY,IAAIkX,MAClC9X,EAAW4X,MAAM5X,EAAWY,IAAIkX,MAClC,CAEJ,IAAG,CAAC9X,IAEE0X,GAAoBK,EAAAA,EAAAA,GAAmB/Y,IACtCC,EAAgB+Y,IAAqBxY,EAAAA,EAAAA,UAAyB,CACnEwB,UAA+B,QAArB0W,EAAAA,EAAkBjV,WAAlBiV,IAAAA,OAAAA,EAAAA,EAAuB/E,aACjCpR,SAA8B,QAArBmW,EAAAA,EAAkBjV,WAAlBiV,IAAAA,GAA8B,QAA9BA,EAAAA,EAAuBpN,eAAvBoN,IAAAA,GAAmC,QAAnCA,EAAAA,EAAiC,UAAjCA,IAAAA,OAAAA,EAAAA,EAAqCtN,SAASvP,MACvD4G,SAA8B,QAArBiW,EAAAA,EAAkBjV,WAAlBiV,IAAAA,GAA8B,QAA9BA,EAAAA,EAAuB1L,eAAvB0L,IAAAA,OAAAA,EAAAA,EAAgCtN,SAASvP,MAClD8G,SAAS,KAEJyF,EAAiB6Q,IAAsBzY,EAAAA,EAAAA,UAASkY,IAEvDtd,EAAAA,EAAAA,YAAU,IACD,UAC2C+C,IAA5C6C,EAAW4X,MAAM5X,EAAWY,IAAIsX,SAClClY,EAAW4X,MAAM5X,EAAWY,IAAIsX,SAClC,GAED,CAAClY,IAEJ,MAAMgD,GAAenD,EAAAA,EAAAA,cAClB8E,IACKwT,GAAaxT,IAAM5F,GACrBA,GACF,GAEF,CAACA,IAGG6K,EAAgB,CAACjF,EAAayT,GAAU,K,IAI5BzT,EAAmBA,E,IAHnCsT,EAAmBtT,GACnBnI,EAASmI,IAEL0T,EAAAA,EAAAA,IAAiB,QAAL1T,EAAAA,EAAElC,WAAFkC,IAAAA,OAAAA,EAAAA,EAAOoF,WAAiB,QAALpF,EAAAA,EAAElC,WAAFkC,IAAAA,OAAAA,EAAAA,EAAOoF,QAAQwJ,MAAM7G,GAAMA,EAAE7R,UAAUoE,EAAesC,OACvFyW,G,yUAAkB,IAAK/Y,G,WAAAA,CAAgBsC,OAAO,I,gVAG5C6W,GACFpV,EAAa2B,EACf,EAQF,OAAIhH,GAAWmG,EACN,MAIP,sB,WACE,SAAClF,EAAWA,CACVtC,GAAIA,EACJI,qBAAsBmb,EACtBrb,SAduBmI,IAC3BsT,EAAmBtT,GACnBnI,EAASmI,EAAE,EAaP5F,WAAYA,EACZD,iBAAkBkZ,EAClB/Y,eAAgBA,EAChBD,MAAO0Y,EACP7Y,gBAAiBA,EACjBtC,QAASA,KAGX,SAAC8F,EAAAA,MAAKA,CAAChF,EAAG,KAETqa,EAAkBxY,aAAeT,EAAAA,GAAWE,OAC3C,SAAC2Y,GAAYA,CACXhb,GAAIA,EACJ0C,MAAO0Y,EACPlb,SAAWmI,GAAgBiF,EAAcjF,GAAG,GAC5C1F,eAAgBA,EAChBqE,WAAYqU,EACZpU,MAAOA,IAIVmU,EAAkBxY,aAAeT,EAAAA,GAAWE,OAC3C,SAACwI,EAASA,CACR7K,GAAIA,EACJ0C,MAAO0Y,EACPtQ,gBAAiBA,EACjB5K,SAAUoN,EACV7K,WAAYA,EACZuE,WAAYqU,EACZpU,MAAOA,MAKjB,CAEA,MAAM4U,GAAgBxT,GACb2T,QAAQ3T,EAAEvC,O","sources":["webpack://mssql/../../../../../packages/grafana-sql/src/components/ConfirmModal.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/DatasetSelector.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/TableSelector.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/QueryHeader.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryEditorRaw.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryValidator.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryToolbox.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/RawEditor.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/Preview.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/utils/useSqlChange.ts","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/GroupByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLGroupByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/OrderByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLOrderByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/AwesomeQueryBuilder.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/WhereRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLWhereRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectColumn.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectCustomFunctionParameters.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectFunctionParameters.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/VisualEditor.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/QueryEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useRef, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\ntype ConfirmModalProps = {\n  isOpen: boolean;\n  onCancel?: () => void;\n  onDiscard?: () => void;\n  onCopy?: () => void;\n};\nexport function ConfirmModal({ isOpen, onCancel, onDiscard, onCopy }: ConfirmModalProps) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const styles = useStyles2(getStyles);\n\n  // Moved from grafana/ui\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal\n      title={\n        <div className={styles.modalHeaderTitle}>\n          <Icon name=\"exclamation-triangle\" size=\"lg\" />\n          <span className={styles.titleText}>Warning</span>\n        </div>\n      }\n      onDismiss={onCancel}\n      isOpen={isOpen}\n    >\n      <p>\n        Builder mode does not display changes made in code. The query builder will display the last changes you made in\n        builder mode.\n      </p>\n      <p>Do you want to copy your code to the clipboard?</p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" type=\"button\" onClick={onDiscard} ref={buttonRef}>\n          Discard code and switch\n        </Button>\n        <Button variant=\"primary\" onClick={onCopy}>\n          Copy code and switch\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  titleText: css({\n    paddingLeft: theme.spacing(2),\n  }),\n  modalHeaderTitle: css({\n    fontSize: theme.typography.size.lg,\n    float: 'left',\n    paddingTop: theme.spacing(1),\n    margin: theme.spacing(0, 2),\n  }),\n});\n","import { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps, SQLDialect, toOption } from '../types';\n\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\n\nexport interface DatasetSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  dataset: string | undefined;\n  preconfiguredDataset: string;\n  dialect: SQLDialect;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const DatasetSelector = ({\n  dataset,\n  db,\n  dialect,\n  onChange,\n  inputId,\n  preconfiguredDataset,\n}: DatasetSelectorProps) => {\n  /*\n    The behavior of this component - for MSSQL and MySQL datasources - is based on whether the user chose to create a datasource\n    with or without a default database (preconfiguredDataset). If the user configured a default database, this selector\n    should only allow that single preconfigured database option to be selected. If the user chose to NOT assign/configure a default database,\n    then the user should be able to use this component to choose between multiple databases available to the datasource.\n  */\n  // `hasPreconfigCondition` is true if either 1) the sql datasource has a preconfigured default database,\n  // OR if 2) the datasource is Postgres. In either case the only option available to the user is the preconfigured database.\n  const hasPreconfigCondition = !!preconfiguredDataset || dialect === 'postgres';\n\n  const state = useAsync(async () => {\n    if (isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // If a default database is already configured for a MSSQL or MySQL data source, OR the data source is Postgres, no need to fetch other databases.\n      if (hasPreconfigCondition) {\n        // Set the current database to the preconfigured database.\n        onChange(toOption(preconfiguredDataset));\n        return [toOption(preconfiguredDataset)];\n      }\n    }\n\n    // If there is no preconfigured database, but there is a selected dataset, set the current database to the selected dataset.\n    if (dataset) {\n      onChange(toOption(dataset));\n    }\n\n    // Otherwise, fetch all databases available to the datasource.\n    const datasets = await db.datasets();\n    return datasets.map(toOption);\n  }, []);\n\n  useEffect(() => {\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // Set default dataset when values are fetched\n      if (!dataset) {\n        if (state.value && state.value[0]) {\n          onChange(state.value[0]);\n        }\n      } else {\n        if (state.value && state.value.find((v) => v.value === dataset) === undefined) {\n          // if value is set and newly fetched values does not contain selected value\n          if (state.value.length > 0) {\n            onChange(state.value[0]);\n          }\n        }\n      }\n    }\n  }, [state.value, onChange, dataset]);\n\n  return (\n    <Select\n      aria-label=\"Dataset selector\"\n      inputId={inputId}\n      value={dataset}\n      options={state.value}\n      onChange={onChange}\n      disabled={state.loading}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n    />\n  );\n};\n","import { useAsync } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps } from '../types';\n\nexport interface TableSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  table: string | undefined;\n  dataset: string | undefined;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const TableSelector = ({ db, dataset, table, className, onChange, inputId }: TableSelectorProps) => {\n  const state = useAsync(async () => {\n    // No need to attempt to fetch tables for an unknown dataset.\n    if (!dataset) {\n      return [];\n    }\n\n    const tables = await db.tables(dataset);\n    return tables.map(toOption);\n  }, [dataset]);\n\n  return (\n    <Select\n      className={className}\n      disabled={state.loading}\n      aria-label=\"Table selector\"\n      inputId={inputId}\n      data-testid={selectors.components.SQLQueryEditor.headerTableSelector}\n      value={table}\n      options={state.value}\n      onChange={onChange}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n      placeholder={state.loading ? 'Loading tables' : 'Select table'}\n    />\n  );\n};\n","import { useCallback, useId, useState } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorHeader, EditorMode, EditorRow, FlexItem, InlineSelect } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, RadioButtonGroup, Tooltip, Space } from '@grafana/ui';\n\nimport { QueryWithDefaults } from '../defaults';\nimport { SQLQuery, QueryFormat, QueryRowFilter, QUERY_FORMAT_OPTIONS, DB, SQLDialect } from '../types';\n\nimport { ConfirmModal } from './ConfirmModal';\nimport { DatasetSelector } from './DatasetSelector';\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\nimport { TableSelector } from './TableSelector';\n\nexport interface QueryHeaderProps {\n  db: DB;\n  dialect: SQLDialect;\n  isQueryRunnable: boolean;\n  onChange: (query: SQLQuery) => void;\n  onQueryRowChange: (queryRowFilter: QueryRowFilter) => void;\n  onRunQuery: () => void;\n  preconfiguredDataset: string;\n  query: QueryWithDefaults;\n  queryRowFilter: QueryRowFilter;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: EditorMode.Builder },\n  { label: 'Code', value: EditorMode.Code },\n];\n\nexport function QueryHeader({\n  db,\n  dialect,\n  isQueryRunnable,\n  onChange,\n  onQueryRowChange,\n  onRunQuery,\n  preconfiguredDataset,\n  query,\n  queryRowFilter,\n}: QueryHeaderProps) {\n  const { editorMode } = query;\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const [showConfirm, setShowConfirm] = useState(false);\n  const toRawSql = db.toRawSql;\n\n  const htmlId = useId();\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: EditorMode) => {\n      if (newEditorMode === EditorMode.Code) {\n        reportInteraction('grafana_sql_editor_mode_changed', {\n          datasource: query.datasource?.type,\n          selectedEditorMode: EditorMode.Code,\n        });\n      }\n\n      if (editorMode === EditorMode.Code) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, editorMode: newEditorMode });\n    },\n    [editorMode, onChange, query]\n  );\n\n  const onFormatChange = (e: SelectableValue) => {\n    const next = { ...query, format: e.value !== undefined ? e.value : QueryFormat.Table };\n\n    reportInteraction('grafana_sql_format_changed', {\n      datasource: query.datasource?.type,\n      selectedFormat: next.format,\n    });\n    onChange(next);\n  };\n\n  const onDatasetChange = (e: SelectableValue) => {\n    if (e.value === query.dataset) {\n      return;\n    }\n\n    const next = {\n      ...query,\n      dataset: e.value,\n      table: undefined,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const onTableChange = (e: SelectableValue) => {\n    if (e.value === query.table) {\n      return;\n    }\n\n    const next: SQLQuery = {\n      ...query,\n      table: e.value,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const datasetDropdownIsAvailable = () => {\n    if (dialect === 'influx') {\n      return false;\n    }\n    // If the feature flag is DISABLED, && the datasource is Postgres (`dialect = 'postgres`),\n    // we want to hide the dropdown - as per previous behavior.\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled() && dialect === 'postgres') {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Format\"\n          value={query.format}\n          placeholder=\"Select format\"\n          menuShouldPortal\n          onChange={onFormatChange}\n          options={QUERY_FORMAT_OPTIONS}\n        />\n\n        {editorMode === EditorMode.Builder && (\n          <>\n            <InlineSwitch\n              id={`sql-filter-${htmlId}`}\n              label=\"Filter\"\n              data-testid={selectors.components.SQLQueryEditor.headerFilterSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.filter}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_filter_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, filter: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-group-${htmlId}`}\n              label=\"Group\"\n              data-testid={selectors.components.SQLQueryEditor.headerGroupSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.group}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_group_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, group: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-order-${htmlId}`}\n              label=\"Order\"\n              data-testid={selectors.components.SQLQueryEditor.headerOrderSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.order}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_order_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, order: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-preview-${htmlId}`}\n              label=\"Preview\"\n              data-testid={selectors.components.SQLQueryEditor.headerPreviewSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.preview}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_preview_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, preview: ev.target.checked });\n              }}\n            />\n          </>\n        )}\n\n        <FlexItem grow={1} />\n\n        {isQueryRunnable ? (\n          <Button icon=\"play\" variant=\"primary\" size=\"sm\" onClick={() => onRunQuery()}>\n            Run query\n          </Button>\n        ) : (\n          <Tooltip\n            theme=\"error\"\n            content={\n              <>\n                Your query is invalid. Check below for details. <br />\n                However, you can still run this query.\n              </>\n            }\n            placement=\"top\"\n          >\n            <Button icon=\"exclamation-triangle\" variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n              Run query\n            </Button>\n          </Tooltip>\n        )}\n\n        <RadioButtonGroup options={editorModes} size=\"sm\" value={editorMode} onChange={onEditorModeChange} />\n\n        <ConfirmModal\n          isOpen={showConfirm}\n          onCopy={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'copy',\n            });\n\n            setShowConfirm(false);\n            copyToClipboard(query.rawSql!);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onDiscard={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'discard',\n            });\n\n            setShowConfirm(false);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onCancel={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'cancel',\n            });\n\n            setShowConfirm(false);\n          }}\n        />\n      </EditorHeader>\n\n      {editorMode === EditorMode.Builder && (\n        <>\n          <Space v={0.5} />\n          <EditorRow>\n            {datasetDropdownIsAvailable() && (\n              <EditorField label=\"Dataset\" width={25}>\n                <DatasetSelector\n                  db={db}\n                  inputId={`sql-dataset-${htmlId}`}\n                  dataset={query.dataset}\n                  dialect={dialect}\n                  preconfiguredDataset={preconfiguredDataset}\n                  onChange={onDatasetChange}\n                />\n              </EditorField>\n            )}\n            <EditorField label=\"Table\" width={25}>\n              <TableSelector\n                db={db}\n                inputId={`sql-tableselect-${htmlId}`}\n                dataset={query.dataset || preconfiguredDataset}\n                table={query.table}\n                onChange={onTableChange}\n              />\n            </EditorField>\n          </EditorRow>\n        </>\n      )}\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport * as React from 'react';\n\nimport { LanguageDefinition, SQLEditor } from '@grafana/plugin-ui';\n\nimport { SQLQuery } from '../../types';\n\ntype Props = {\n  query: SQLQuery;\n  onChange: (value: SQLQuery, processQuery: boolean) => void;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n  editorLanguageDefinition: LanguageDefinition;\n};\n\nexport function QueryEditorRaw({ children, onChange, query, width, height, editorLanguageDefinition }: Props) {\n  // We need to pass query via ref to SQLEditor as onChange is executed via monacoEditor.onDidChangeModelContent callback, not onChange property\n  const queryRef = useRef<SQLQuery>(query);\n  useEffect(() => {\n    queryRef.current = query;\n  }, [query]);\n\n  const onRawQueryChange = useCallback(\n    (rawSql: string, processQuery: boolean) => {\n      const newQuery = {\n        ...queryRef.current,\n        rawQuery: true,\n        rawSql,\n      };\n      onChange(newQuery, processQuery);\n    },\n    [onChange]\n  );\n\n  return (\n    <SQLEditor\n      width={width}\n      height={height}\n      query={query.rawSql!}\n      onChange={onRawQueryChange}\n      language={editorLanguageDefinition}\n    >\n      {children}\n    </SQLEditor>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useState, useMemo, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport useDebounce from 'react-use/lib/useDebounce';\n\nimport { formattedValueToString, getValueFormat, TimeRange } from '@grafana/data';\nimport { Icon, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { DB, SQLQuery, ValidationResults } from '../../types';\n\nexport interface QueryValidatorProps {\n  db: DB;\n  query: SQLQuery;\n  range?: TimeRange;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport function QueryValidator({ db, query, onValidate, range }: QueryValidatorProps) {\n  const [validationResult, setValidationResult] = useState<ValidationResults | null>();\n  const theme = useTheme2();\n  const valueFormatter = useMemo(() => getValueFormat('bytes'), []);\n\n  const styles = useMemo(() => {\n    return {\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n    };\n  }, [theme]);\n\n  const [state, validateQuery] = useAsyncFn(\n    async (q: SQLQuery) => {\n      if (q.rawSql?.trim() === '') {\n        return null;\n      }\n\n      return await db.validateQuery(q, range);\n    },\n    [db]\n  );\n\n  const [,] = useDebounce(\n    async () => {\n      const result = await validateQuery(query);\n      if (result) {\n        setValidationResult(result);\n      }\n\n      return null;\n    },\n    1000,\n    [query, validateQuery]\n  );\n\n  useEffect(() => {\n    if (validationResult?.isError) {\n      onValidate(false);\n    }\n    if (validationResult?.isValid) {\n      onValidate(true);\n    }\n  }, [validationResult, onValidate]);\n\n  if (!state.value && !state.loading) {\n    return null;\n  }\n\n  const error = state.value?.error ? processErrorMessage(state.value.error) : '';\n\n  return (\n    <>\n      {state.loading && (\n        <div className={styles.info}>\n          <Spinner inline={true} size=\"xs\" /> Validating query...\n        </div>\n      )}\n      {!state.loading && state.value && (\n        <>\n          <>\n            {state.value.isValid && state.value.statistics && (\n              <div className={styles.valid}>\n                <Icon name=\"check\" /> This query will process{' '}\n                <strong>{formattedValueToString(valueFormatter(state.value.statistics.TotalBytesProcessed))}</strong>{' '}\n                when run.\n              </div>\n            )}\n          </>\n\n          <>{state.value.isError && <div className={styles.error}>{error}</div>}</>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction processErrorMessage(error: string) {\n  const splat = error.split(':');\n  if (splat.length > 2) {\n    return splat.slice(2).join(':');\n  }\n  return error;\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { HorizontalGroup, Icon, IconButton, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { QueryValidator, QueryValidatorProps } from './QueryValidator';\n\ninterface QueryToolboxProps extends Omit<QueryValidatorProps, 'onValidate'> {\n  showTools?: boolean;\n  isExpanded?: boolean;\n  onFormatCode?: () => void;\n  onExpand?: (expand: boolean) => void;\n  onValidate?: (isValid: boolean) => void;\n}\n\nexport function QueryToolbox({ showTools, onFormatCode, onExpand, isExpanded, ...validatorProps }: QueryToolboxProps) {\n  const theme = useTheme2();\n  const [validationResult, setValidationResult] = useState<boolean>();\n\n  const styles = useMemo(() => {\n    return {\n      container: css({\n        border: `1px solid ${theme.colors.border.medium}`,\n        borderTop: 'none',\n        padding: theme.spacing(0.5, 0.5, 0.5, 0.5),\n        display: 'flex',\n        flexGrow: 1,\n        justifyContent: 'space-between',\n        fontSize: theme.typography.bodySmall.fontSize,\n      }),\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n      hint: css({\n        color: theme.colors.text.disabled,\n        whiteSpace: 'nowrap',\n        cursor: 'help',\n      }),\n    };\n  }, [theme]);\n\n  let style = {};\n\n  if (!showTools && validationResult === undefined) {\n    style = { height: 0, padding: 0, visibility: 'hidden' };\n  }\n\n  return (\n    <div className={styles.container} style={style}>\n      <div>\n        {validatorProps.onValidate && (\n          <QueryValidator\n            {...validatorProps}\n            onValidate={(result: boolean) => {\n              setValidationResult(result);\n              validatorProps.onValidate!(result);\n            }}\n          />\n        )}\n      </div>\n      {showTools && (\n        <div>\n          <HorizontalGroup spacing=\"sm\">\n            {onFormatCode && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_query_formatted', {\n                    datasource: validatorProps.query.datasource?.type,\n                  });\n                  onFormatCode();\n                }}\n                name=\"brackets-curly\"\n                size=\"xs\"\n                tooltip=\"Format query\"\n              />\n            )}\n            {onExpand && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_editor_expand', {\n                    datasource: validatorProps.query.datasource?.type,\n                    expanded: !isExpanded,\n                  });\n\n                  onExpand(!isExpanded);\n                }}\n                name={isExpanded ? 'angle-up' : 'angle-down'}\n                size=\"xs\"\n                tooltip={isExpanded ? 'Collapse editor' : 'Expand editor'}\n              />\n            )}\n            <Tooltip content=\"Hit CTRL/CMD+Return to run query\">\n              <Icon className={styles.hint} name=\"keyboard\" />\n            </Tooltip>\n          </HorizontalGroup>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Modal, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SQLQuery, QueryEditorProps } from '../../types';\n\nimport { QueryEditorRaw } from './QueryEditorRaw';\nimport { QueryToolbox } from './QueryToolbox';\n\ninterface RawEditorProps extends Omit<QueryEditorProps, 'onChange'> {\n  onRunQuery: () => void;\n  onChange: (q: SQLQuery, processQuery: boolean) => void;\n  onValidate: (isValid: boolean) => void;\n  queryToValidate: SQLQuery;\n}\n\nexport function RawEditor({ db, query, onChange, onRunQuery, onValidate, queryToValidate, range }: RawEditorProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [toolboxRef, toolboxMeasure] = useMeasure<HTMLDivElement>();\n  const [editorRef, editorMeasure] = useMeasure<HTMLDivElement>();\n\n  const editorLanguageDefinition = useMemo(() => db.getEditorLanguageDefinition(), [db]);\n\n  const renderQueryEditor = (width?: number, height?: number) => {\n    return (\n      <QueryEditorRaw\n        editorLanguageDefinition={editorLanguageDefinition}\n        query={query}\n        width={width}\n        height={height ? height - toolboxMeasure.height : undefined}\n        onChange={onChange}\n      >\n        {({ formatQuery }) => {\n          return (\n            <div ref={toolboxRef}>\n              <QueryToolbox\n                db={db}\n                query={queryToValidate}\n                onValidate={onValidate}\n                onFormatCode={formatQuery}\n                showTools\n                range={range}\n                onExpand={setIsExpanded}\n                isExpanded={isExpanded}\n              />\n            </div>\n          );\n        }}\n      </QueryEditorRaw>\n    );\n  };\n\n  const renderEditor = (standalone = false) => {\n    return standalone ? (\n      <AutoSizer>\n        {({ width, height }) => {\n          return renderQueryEditor(width, height);\n        }}\n      </AutoSizer>\n    ) : (\n      <div ref={editorRef}>{renderQueryEditor()}</div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: editorMeasure.width,\n          height: editorMeasure.height,\n          background: theme.colors.background.primary,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Editing in expanded code editor\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {isExpanded ? renderPlaceholder() : renderEditor()}\n      {isExpanded && (\n        <Modal\n          title={`Query ${query.refId}`}\n          closeOnBackdropClick={false}\n          closeOnEscape={false}\n          className={styles.modal}\n          contentClassName={styles.modalContent}\n          isOpen={isExpanded}\n          onDismiss={() => {\n            reportInteraction('grafana_sql_editor_expand', {\n              datasource: query.datasource?.type,\n              expanded: false,\n            });\n            setIsExpanded(false);\n          }}\n        >\n          {renderEditor(true)}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    modal: css({\n      width: '95vw',\n      height: '95vh',\n    }),\n    modalContent: css({\n      height: '100%',\n      paddingTop: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CodeEditor, Field, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { formatSQL } from '../../utils/formatSQL';\n\ntype PreviewProps = {\n  rawSql: string;\n  datasourceType?: string;\n};\n\nexport function Preview({ rawSql, datasourceType }: PreviewProps) {\n  // TODO: use zero index to give feedback about copy success\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const styles = useStyles2(getStyles);\n\n  const copyPreview = (rawSql: string) => {\n    copyToClipboard(rawSql);\n    reportInteraction('grafana_sql_preview_copied', {\n      datasource: datasourceType,\n    });\n  };\n\n  const labelElement = (\n    <div className={styles.labelWrapper}>\n      <span className={styles.label}>Preview</span>\n      <IconButton tooltip=\"Copy to clipboard\" onClick={() => copyPreview(rawSql)} name=\"copy\" />\n    </div>\n  );\n\n  return (\n    <Field label={labelElement} className={styles.grow}>\n      <CodeEditor\n        language=\"sql\"\n        height={80}\n        value={formatSQL(rawSql)}\n        monacoOptions={{ scrollbar: { vertical: 'hidden' }, scrollBeyondLastLine: false }}\n        readOnly={true}\n        showMiniMap={false}\n      />\n    </Field>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    grow: css({ flexGrow: 1 }),\n    label: css({ fontSize: 12, fontWeight: theme.typography.fontWeightMedium }),\n    labelWrapper: css({ display: 'flex', justifyContent: 'space-between', paddingBottom: theme.spacing(0.5) }),\n  };\n}\n","import { useCallback } from 'react';\n\nimport { DB, SQLExpression, SQLQuery } from '../types';\n\ninterface UseSqlChange {\n  db: DB;\n  query: SQLQuery;\n  onQueryChange: (query: SQLQuery) => void;\n}\n\nexport function useSqlChange({ query, onQueryChange, db }: UseSqlChange) {\n  const onSqlChange = useCallback(\n    (sql: SQLExpression) => {\n      const toRawSql = db.toRawSql;\n      const rawSql = toRawSql({ sql, dataset: query.dataset, table: query.table, refId: query.refId });\n      const newQuery: SQLQuery = { ...query, sql, rawSql };\n      onQueryChange(newQuery);\n    },\n    [db, onQueryChange, query]\n  );\n\n  return { onSqlChange };\n}\n","import { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorGroupByExpression } from '../../expressions';\nimport { SQLExpression } from '../../types';\nimport { setGroupByField } from '../../utils/sql.utils';\n\ninterface GroupByRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n}\n\nexport function GroupByRow({ sql, columns, onSqlChange }: GroupByRowProps) {\n  const onGroupByChange = useCallback(\n    (item: Array<Partial<QueryEditorGroupByExpression>>) => {\n      // As new (empty object) items come in, we need to make sure they have the correct type\n      const cleaned = item.map((v) => setGroupByField(v.property?.name));\n      const newSql = { ...sql, groupBy: cleaned };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <EditorList\n      items={sql.groupBy!}\n      onChange={onGroupByChange}\n      renderItem={makeRenderColumn({\n        options: columns,\n      })}\n    />\n  );\n}\n\nfunction makeRenderColumn({ options }: { options?: Array<SelectableValue<string>> }) {\n  const renderColumn = function (\n    item: Partial<QueryEditorGroupByExpression>,\n    onChangeItem: (item: QueryEditorGroupByExpression) => void,\n    onDeleteItem: () => void\n  ) {\n    return (\n      <InputGroup>\n        <Select\n          value={item.property?.name ? toOption(item.property.name) : null}\n          aria-label=\"Group by\"\n          options={options}\n          menuShouldPortal\n          onChange={({ value }) => value && onChangeItem(setGroupByField(value))}\n        />\n        <AccessoryButton title=\"Remove group by column\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} />\n      </InputGroup>\n    );\n  };\n  return renderColumn;\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { GroupByRow } from './GroupByRow';\n\ninterface SQLGroupByRowProps {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLGroupByRow({ fields, query, onQueryChange, db }: SQLGroupByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return <GroupByRow columns={fields} sql={query.sql!} onSqlChange={onSqlChange} />;\n}\n","import { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, InputGroup } from '@grafana/plugin-ui';\nimport { Input, RadioButtonGroup, Select, Space } from '@grafana/ui';\n\nimport { SQLExpression } from '../../types';\nimport { setPropertyField } from '../../utils/sql.utils';\n\ntype OrderByRowProps = {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n  showOffset?: boolean;\n};\n\nconst sortOrderOptions = [\n  { description: 'Sort by ascending', value: 'ASC', icon: 'sort-amount-up' } as const,\n  { description: 'Sort by descending', value: 'DESC', icon: 'sort-amount-down' } as const,\n];\n\nexport function OrderByRow({ sql, onSqlChange, columns, showOffset }: OrderByRowProps) {\n  const onSortOrderChange = useCallback(\n    (item: 'ASC' | 'DESC') => {\n      const newSql: SQLExpression = { ...sql, orderByDirection: item };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onLimitChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, limit: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOffsetChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, offset: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOrderByChange = useCallback(\n    (item: SelectableValue<string>) => {\n      const newSql: SQLExpression = { ...sql, orderBy: setPropertyField(item?.value) };\n      if (item === null) {\n        newSql.orderByDirection = undefined;\n      }\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <>\n      <EditorField label=\"Order by\" width={25}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            options={columns}\n            value={sql.orderBy?.property.name ? toOption(sql.orderBy.property.name) : null}\n            isClearable\n            menuShouldPortal\n            onChange={onOrderByChange}\n          />\n\n          <Space h={1.5} />\n\n          <RadioButtonGroup\n            options={sortOrderOptions}\n            disabled={!sql?.orderBy?.property.name}\n            value={sql.orderByDirection}\n            onChange={onSortOrderChange}\n          />\n        </InputGroup>\n      </EditorField>\n      <EditorField label=\"Limit\" optional width={25}>\n        <Input type=\"number\" min={0} id={uniqueId('limit-')} value={sql.limit || ''} onChange={onLimitChange} />\n      </EditorField>\n      {showOffset && (\n        <EditorField label=\"Offset\" optional width={25}>\n          <Input type=\"number\" id={uniqueId('offset-')} value={sql.offset || ''} onChange={onOffsetChange} />\n        </EditorField>\n      )}\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { OrderByRow } from './OrderByRow';\n\ntype SQLOrderByRowProps = {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n};\n\nexport function SQLOrderByRow({ fields, query, onQueryChange, db }: SQLOrderByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  let columnsWithIndices: SelectableValue[] = [];\n\n  if (fields) {\n    const options = query.sql?.columns?.map((c, i) => {\n      const value = c.name ? `${c.name}(${c.parameters?.map((p) => p.name)})` : c.parameters?.map((p) => p.name);\n      return {\n        value,\n        label: `${i + 1} - ${value}`,\n      };\n    });\n    columnsWithIndices = [\n      {\n        value: '',\n        label: 'Selected columns',\n        options,\n        expanded: true,\n      },\n      ...fields,\n    ];\n  }\n\n  return <OrderByRow sql={query.sql!} onSqlChange={onSqlChange} columns={columnsWithIndices} />;\n}\n","import {\n  BasicConfig,\n  Config,\n  JsonTree,\n  Operator,\n  OperatorOptionsI,\n  Settings,\n  SimpleField,\n  SqlFormatOperator,\n  Utils,\n  ValueSource,\n  Widgets,\n} from '@react-awesome-query-builder/ui';\nimport { List } from 'immutable';\nimport { isString } from 'lodash';\n\nimport { dateTime, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, DateTimePicker, Input, Select } from '@grafana/ui';\n\nconst buttonLabels = {\n  add: 'Add',\n  remove: 'Remove',\n};\n\nexport const emptyInitTree: JsonTree = {\n  id: Utils.uuid(),\n  type: 'group',\n};\n\nconst TIME_FILTER = 'timeFilter';\nconst macros = [TIME_FILTER];\n\n// Widgets are the components rendered for each field type see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configwidgets\nexport const widgets: Widgets = {\n  ...BasicConfig.widgets,\n  text: {\n    ...BasicConfig.widgets.text,\n    factory: function TextInput(props) {\n      return (\n        <Input\n          value={props?.value || ''}\n          placeholder={props?.placeholder}\n          onChange={(e) => props?.setValue(e.currentTarget.value)}\n        />\n      );\n    },\n  },\n  number: {\n    ...BasicConfig.widgets.number,\n    factory: function NumberInput(props) {\n      return (\n        <Input\n          value={props?.value}\n          placeholder={props?.placeholder}\n          type=\"number\"\n          onChange={(e) => props?.setValue(Number.parseInt(e.currentTarget.value, 10))}\n        />\n      );\n    },\n  },\n  datetime: {\n    ...BasicConfig.widgets.datetime,\n    factory: function DateTimeInput(props) {\n      if (props?.operator === Op.MACROS) {\n        return (\n          <Select\n            id={props.id}\n            aria-label=\"Macros value selector\"\n            menuShouldPortal\n            options={macros.map(toOption)}\n            value={props?.value}\n            onChange={(val) => props.setValue(val.value)}\n          />\n        );\n      }\n      const dateValue = dateTime(props?.value).isValid() ? dateTime(props?.value).utc() : undefined;\n      return (\n        <DateTimePicker\n          onChange={(e) => {\n            props?.setValue(e?.format(BasicConfig.widgets.datetime.valueFormat));\n          }}\n          date={dateValue}\n        />\n      );\n    },\n    // Function for formatting widget’s value in SQL WHERE query.\n    sqlFormatValue: (val, field, widget, operator, operatorDefinition, rightFieldDef) => {\n      if (operator === Op.MACROS) {\n        if (macros.includes(val)) {\n          return val;\n        }\n        return undefined;\n      }\n\n      // This is just satisfying the type checker, this should never happen\n      if (\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'string' ||\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'object'\n      ) {\n        return undefined;\n      }\n      const func = BasicConfig.widgets.datetime.sqlFormatValue;\n      // We need to pass the ctx to this function this way so *this* is correct\n      return func?.call(BasicConfig.ctx, val, field, widget, operator, operatorDefinition, rightFieldDef) || '';\n    },\n  },\n};\n\n// Settings are the configuration options for the query builder see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configsettings\nexport const settings: Settings = {\n  ...BasicConfig.settings,\n  canRegroup: false,\n  maxNesting: 1,\n  canReorder: false,\n  showNot: false,\n  addRuleLabel: buttonLabels.add,\n  deleteLabel: buttonLabels.remove,\n  // This is the component that renders conjunctions (logical operators)\n  renderConjs: function Conjunctions(conjProps) {\n    return (\n      <Select\n        id={conjProps?.id}\n        aria-label=\"Conjunction\"\n        data-testid={selectors.components.SQLQueryEditor.filterConjunction}\n        menuShouldPortal\n        options={conjProps?.conjunctionOptions ? Object.keys(conjProps?.conjunctionOptions).map(toOption) : undefined}\n        value={conjProps?.selectedConjunction}\n        onChange={(val) => conjProps?.setConjunction(val.value!)}\n      />\n    );\n  },\n  // This is the component that renders fields\n  renderField: function Field(fieldProps) {\n    const fields = fieldProps?.config?.fields || {};\n    return (\n      <Select\n        id={fieldProps?.id}\n        width={25}\n        aria-label=\"Field\"\n        data-testid={selectors.components.SQLQueryEditor.filterField}\n        menuShouldPortal\n        options={fieldProps?.items.map((f) => {\n          // @ts-ignore\n          const icon = fields[f.key].mainWidgetProps?.customProps?.icon;\n          return {\n            label: f.label,\n            value: f.key,\n            icon,\n          };\n        })}\n        value={fieldProps?.selectedKey}\n        onChange={(val) => {\n          fieldProps?.setField(val.label!);\n        }}\n      />\n    );\n  },\n  // This is the component used for the Add/Remove buttons\n  renderButton: function RAQBButton(buttonProps) {\n    return (\n      <Button\n        type=\"button\"\n        title={`${buttonProps?.label} filter`}\n        onClick={buttonProps?.onClick}\n        variant=\"secondary\"\n        size=\"md\"\n        icon={buttonProps?.label === buttonLabels.add ? 'plus' : 'times'}\n      />\n    );\n  },\n  // This is the component used for the fields operator selector\n  renderOperator: function Operator(operatorProps) {\n    return (\n      <Select\n        options={operatorProps?.items.map((op) => ({ label: op.label, value: op.key }))}\n        aria-label=\"Operator\"\n        data-testid={selectors.components.SQLQueryEditor.filterOperator}\n        menuShouldPortal\n        value={operatorProps?.selectedKey}\n        onChange={(val) => {\n          operatorProps?.setField(val.value || '');\n        }}\n      />\n    );\n  },\n};\n\n// add IN / NOT IN operators to text to support multi-value variables\nconst enum Op {\n  IN = 'select_any_in',\n  NOT_IN = 'select_not_any_in',\n  MACROS = 'macros',\n}\nconst customOperators = getCustomOperators(BasicConfig);\nconst textWidget = BasicConfig.types.text.widgets.text;\nconst opers = [...(textWidget.operators || []), Op.IN, Op.NOT_IN];\nconst customTextWidget = {\n  ...textWidget,\n  operators: opers,\n};\n\nconst customTypes = {\n  ...BasicConfig.types,\n  text: {\n    ...BasicConfig.types.text,\n    widgets: {\n      ...BasicConfig.types.text.widgets,\n      text: customTextWidget,\n    },\n  },\n  datetime: {\n    ...BasicConfig.types.datetime,\n    widgets: {\n      ...BasicConfig.types.datetime.widgets,\n      datetime: {\n        ...BasicConfig.types.datetime.widgets.datetime,\n        operators: [Op.MACROS, ...(BasicConfig.types.datetime.widgets.datetime.operators || [])],\n      },\n    },\n  },\n};\n\n// This is the configuration for the query builder that doesn't include the fields but all the other configuration for the UI\n// Fields should be added dynamically based on returned data\n// See the doc for more info https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc\nexport const raqbConfig: Config = {\n  ...BasicConfig,\n  widgets,\n  settings,\n  operators: customOperators,\n  types: customTypes,\n};\n\nexport type { Config };\n\nconst noop = () => '';\n\nconst isSqlFormatOp = (func: unknown): func is SqlFormatOperator => {\n  return typeof func === 'function';\n};\n\nfunction getCustomOperators(config: BasicConfig) {\n  const { ...supportedOperators } = config.operators;\n\n  // IN operator expects array, override IN formatter for multi-value variables\n  const sqlFormatInOpOrNoop = () => {\n    const sqlFormatOp = supportedOperators[Op.IN].sqlFormatOp;\n    if (isSqlFormatOp(sqlFormatOp)) {\n      return sqlFormatOp;\n    }\n    return noop;\n  };\n\n  const customSqlInFormatter = (\n    field: string,\n    op: string,\n    value: string | List<string>,\n    valueSrc: ValueSource,\n    valueType: string,\n    opDef: Operator,\n    operatorOptions: OperatorOptionsI,\n    fieldDef: SimpleField\n  ) => {\n    return sqlFormatInOpOrNoop()(\n      field,\n      op,\n      splitIfString(value),\n      valueSrc,\n      valueType,\n      opDef,\n      operatorOptions,\n      fieldDef\n    );\n  };\n  // NOT IN operator expects array, override NOT IN formatter for multi-value variables\n  const sqlFormatNotInOpOrNoop = () => {\n    const sqlFormatOp = supportedOperators[Op.NOT_IN].sqlFormatOp;\n    if (isSqlFormatOp(sqlFormatOp)) {\n      return sqlFormatOp;\n    }\n    return noop;\n  };\n\n  const customSqlNotInFormatter = (\n    field: string,\n    op: string,\n    value: string | List<string>,\n    valueSrc: ValueSource,\n    valueType: string,\n    opDef: Operator,\n    operatorOptions: OperatorOptionsI,\n    fieldDef: SimpleField\n  ) => {\n    return sqlFormatNotInOpOrNoop()(\n      field,\n      op,\n      splitIfString(value),\n      valueSrc,\n      valueType,\n      opDef,\n      operatorOptions,\n      fieldDef\n    );\n  };\n\n  const customOperators = {\n    ...supportedOperators,\n    [Op.IN]: {\n      ...supportedOperators[Op.IN],\n      sqlFormatOp: customSqlInFormatter,\n    },\n    [Op.NOT_IN]: {\n      ...supportedOperators[Op.NOT_IN],\n      sqlFormatOp: customSqlNotInFormatter,\n    },\n    [Op.MACROS]: {\n      label: 'Macros',\n      sqlFormatOp: (field: string, _operator: string, value: string | List<string>) => {\n        if (value === TIME_FILTER) {\n          return `$__timeFilter(${field})`;\n        }\n        return value;\n      },\n    },\n  };\n\n  return customOperators;\n}\n\n// value: string | List<string> but AQB uses a different version of Immutable\nfunction splitIfString(value: any) {\n  if (isString(value)) {\n    return value.split(',');\n  }\n  return value;\n}\n","import { injectGlobal } from '@emotion/css';\nimport { Builder, Config, ImmutableTree, Query, Utils } from '@react-awesome-query-builder/ui';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SQLExpression } from '../../types';\n\nimport { emptyInitTree, raqbConfig } from './AwesomeQueryBuilder';\n\ninterface SQLBuilderWhereRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  config?: Partial<Config>;\n}\n\nexport function WhereRow({ sql, config, onSqlChange }: SQLBuilderWhereRowProps) {\n  const [tree, setTree] = useState<ImmutableTree>();\n  const configWithDefaults = useMemo(() => ({ ...raqbConfig, ...config }), [config]);\n\n  useEffect(() => {\n    // Set the initial tree\n    if (!tree) {\n      const initTree = Utils.checkTree(Utils.loadTree(sql.whereJsonTree ?? emptyInitTree), configWithDefaults);\n      setTree(initTree);\n    }\n  }, [configWithDefaults, sql.whereJsonTree, tree]);\n\n  useEffect(() => {\n    if (!sql.whereJsonTree) {\n      setTree(Utils.checkTree(Utils.loadTree(emptyInitTree), configWithDefaults));\n    }\n  }, [configWithDefaults, sql.whereJsonTree]);\n\n  const onTreeChange = useCallback(\n    (changedTree: ImmutableTree, config: Config) => {\n      setTree(changedTree);\n      const newSql = {\n        ...sql,\n        whereJsonTree: Utils.getTree(changedTree),\n        whereString: Utils.sqlFormat(changedTree, config),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  if (!tree) {\n    return null;\n  }\n\n  return (\n    <Query\n      {...configWithDefaults}\n      value={tree}\n      onChange={onTreeChange}\n      renderBuilder={(props) => <Builder {...props} />}\n    />\n  );\n}\n\nfunction flex(direction: string) {\n  return `\n    display: flex;\n    gap: 8px;\n    flex-direction: ${direction};`;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ninjectGlobal`\n  .group--header {\n    ${flex('row')}\n  }\n\n  .group-or-rule {\n    ${flex('column')}\n    .rule {\n      flex-direction: row;\n    }\n  }\n\n  .rule--body {\n    ${flex('row')}\n  }\n\n  .group--children {\n    ${flex('column')}\n  }\n\n  .group--conjunctions:empty {\n    display: none;\n  }\n`;\n","import useAsync from 'react-use/lib/useAsync';\n\nimport { SelectableValue, TypedVariableModel } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLExpression, SQLQuery, SQLSelectableValue } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { Config } from './AwesomeQueryBuilder';\nimport { WhereRow } from './WhereRow';\n\ninterface WhereRowProps {\n  query: QueryWithDefaults;\n  fields: SelectableValue[];\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLWhereRow({ query, fields, onQueryChange, db }: WhereRowProps) {\n  const state = useAsync(async () => {\n    return mapFieldsToTypes(fields);\n  }, [fields]);\n\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return (\n    <WhereRow\n      // TODO: fix key that's used to force clean render or SQLWhereRow - otherwise it doesn't render operators correctly\n      key={JSON.stringify(state.value)}\n      config={{ fields: state.value || {} }}\n      sql={query.sql!}\n      onSqlChange={(val: SQLExpression) => {\n        const templateVars = getTemplateSrv().getVariables();\n\n        removeQuotesForMultiVariables(val, templateVars);\n\n        onSqlChange(val);\n      }}\n    />\n  );\n}\n\n// needed for awesome query builder\nfunction mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: Config['fields'] = {};\n  for (const col of columns) {\n    fields[col.value] = {\n      type: col.raqbFieldType || 'text',\n      valueSources: ['value'],\n      mainWidgetProps: { customProps: { icon: col.icon } },\n    };\n  }\n  return fields;\n}\n\nexport function removeQuotesForMultiVariables(val: SQLExpression, templateVars: TypedVariableModel[]) {\n  const multiVariableInWhereString = (tv: TypedVariableModel) =>\n    'multi' in tv &&\n    tv.multi &&\n    (val.whereString?.includes(`\\${${tv.name}}`) || val.whereString?.includes(`$${tv.name}`));\n\n  if (templateVars.some((tv) => multiVariableInWhereString(tv))) {\n    val.whereString = val.whereString?.replaceAll(\"')\", ')');\n    val.whereString = val.whereString?.replaceAll(\"('\", '(');\n  }\n}\n","import { useId } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  onParameterChange: (value?: string) => void;\n  value: SelectableValue<string> | null;\n}\n\nexport function SelectColumn({ columns, onParameterChange, value }: Props) {\n  const selectInputId = useId();\n\n  return (\n    <EditorField label=\"Column\" width={25}>\n      <Select\n        value={value}\n        data-testid={selectors.components.SQLQueryEditor.selectColumn}\n        inputId={selectInputId}\n        menuShouldPortal\n        options={[{ label: '*', value: '*' }, ...columns]}\n        allowCustomValue\n        onChange={(s) => onParameterChange(s.value)}\n      />\n    </EditorField>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, InlineLabel, Input, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  onParameterChange: (index: number) => (value?: string) => void;\n  currentColumnIndex: number;\n}\n\nexport function SelectCustomFunctionParameters({\n  columns,\n  query,\n  onSqlChange,\n  onParameterChange,\n  currentColumnIndex,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n\n  const addParameter = useCallback(\n    (index: number) => {\n      const item = query.sql?.columns?.[index];\n      if (!item) {\n        return;\n      }\n\n      item.parameters = item.parameters\n        ? [...item.parameters, { type: QueryEditorExpressionType.FunctionParameter, name: '' }]\n        : [];\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeParameter = useCallback(\n    (columnIndex: number, index: number) => {\n      const item = query.sql?.columns?.[columnIndex];\n      if (!item?.parameters) {\n        return;\n      }\n      item.parameters = item.parameters?.filter((_, i) => i !== index);\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === columnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  function renderParameters(columnIndex: number) {\n    if (!macroOrFunction?.parameters || macroOrFunction.parameters.length <= 1) {\n      return null;\n    }\n\n    const paramComponents = macroOrFunction.parameters.map((param, index) => {\n      // Skip the first parameter as it is the column name\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <Stack key={index} gap={2}>\n          <InlineLabel className={styles.label}>,</InlineLabel>\n          <Input\n            onChange={(e) => onParameterChange(index)(e.currentTarget.value)}\n            value={param.name}\n            aria-label={`Parameter ${index} for column ${columnIndex}`}\n            data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n            addonAfter={\n              <Button\n                title=\"Remove parameter\"\n                type=\"button\"\n                icon=\"times\"\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => removeParameter(columnIndex, index)}\n              />\n            }\n          />\n        </Stack>\n      );\n    });\n    return paramComponents;\n  }\n\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n      {renderParameters(currentColumnIndex)}\n      <Button\n        type=\"button\"\n        onClick={() => addParameter(currentColumnIndex)}\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        title=\"Add parameter\"\n      />\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useId, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { InlineLabel, Input, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { DB, SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\nimport { SelectCustomFunctionParameters } from './SelectCustomFunctionParameters';\n\ninterface Props {\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  currentColumnIndex: number;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectFunctionParameters({ query, onSqlChange, currentColumnIndex, db, columns }: Props) {\n  const selectInputId = useId();\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n  const styles = useStyles2(getStyles);\n  const func = db.functions().find((f) => f.name === macroOrFunction?.name);\n\n  const [fieldsFromFunction, setFieldsFromFunction] = useState<Array<Array<SelectableValue<string>>>>([]);\n\n  useEffect(() => {\n    const getFieldsFromFunction = async () => {\n      if (!func) {\n        return;\n      }\n      const options: Array<Array<SelectableValue<string>>> = [];\n      for (const param of func.parameters ?? []) {\n        if (param.options) {\n          options.push(await param.options(query));\n        } else {\n          options.push([]);\n        }\n      }\n      setFieldsFromFunction(options);\n    };\n    getFieldsFromFunction();\n\n    // It is fine to ignore the warning here and omit the query object\n    // only table property is used in the query object and whenever table changes the component is re-rendered\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [macroOrFunction?.name]);\n\n  const onParameterChange = useCallback(\n    (index: number, keepIndex?: boolean) => (s: string | undefined) => {\n      const item = query.sql?.columns?.[currentColumnIndex];\n      if (!item) {\n        return;\n      }\n      if (!item.parameters) {\n        item.parameters = [];\n      }\n      if (item.parameters[index] === undefined) {\n        item.parameters[index] = { type: QueryEditorExpressionType.FunctionParameter, name: s };\n      } else if (s == null && keepIndex) {\n        // Remove value from index\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: '' } : p));\n        // Remove the last empty parameter\n        if (item.parameters[item.parameters.length - 1]?.name === '') {\n          item.parameters = item.parameters.filter((p) => p.name !== '');\n        }\n      } else if (s == null) {\n        item.parameters = item.parameters.filter((_, i) => i !== index);\n      } else {\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: s } : p));\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === currentColumnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [currentColumnIndex, onSqlChange, query.sql]\n  );\n\n  function renderParametersWithFunctions() {\n    if (!func?.parameters) {\n      return null;\n    }\n\n    return func?.parameters.map((funcParam, index) => {\n      return (\n        <Stack key={index} alignItems=\"flex-end\" gap={2}>\n          <EditorField label={funcParam.name} width={25} optional={!funcParam.required}>\n            <>\n              {funcParam.options ? (\n                <Select\n                  value={getColumnValue(macroOrFunction?.parameters![index])}\n                  options={fieldsFromFunction?.[index]}\n                  data-testid={selectors.components.SQLQueryEditor.selectFunctionParameter(funcParam.name)}\n                  inputId={selectInputId}\n                  menuShouldPortal\n                  allowCustomValue\n                  isClearable\n                  onChange={(s) => onParameterChange(index, true)(s?.value)}\n                />\n              ) : (\n                <Input\n                  onChange={(e) => onParameterChange(index, true)(e.currentTarget.value)}\n                  value={macroOrFunction?.parameters![index]?.name}\n                  data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n                />\n              )}\n            </>\n          </EditorField>\n          {func.parameters!.length !== index + 1 && <InlineLabel className={styles.label}>,</InlineLabel>}\n        </Stack>\n      );\n    });\n  }\n\n  // This means that no function is selected, we render a column selector\n  if (macroOrFunction?.name === undefined) {\n    return (\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n    );\n  }\n\n  // If the function is not found, that means that it might be a custom value\n  // we let the user add any number of parameters\n  if (!func) {\n    return (\n      <SelectCustomFunctionParameters\n        query={query}\n        onSqlChange={onSqlChange}\n        currentColumnIndex={currentColumnIndex}\n        columns={columns}\n        onParameterChange={onParameterChange}\n      />\n    );\n  }\n\n  // Else we render the function parameters based on the provided settings\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      {renderParametersWithFunctions()}\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Button, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType, QueryEditorFunctionExpression } from '../../expressions';\nimport { DB, QueryFormat, SQLExpression, SQLQuery } from '../../types';\nimport { createFunctionField } from '../../utils/sql.utils';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { SelectFunctionParameters } from './SelectFunctionParameters';\n\ninterface SelectRowProps {\n  query: SQLQuery;\n  onQueryChange: (sql: SQLQuery) => void;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectRow({ query, onQueryChange, db, columns }: SelectRowProps) {\n  const styles = useStyles2(getStyles);\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  const timeSeriesAliasOpts: Array<SelectableValue<string>> = [];\n\n  // Add necessary alias options for time series format\n  // when that format has been selected\n  if (query.format === QueryFormat.Timeseries) {\n    timeSeriesAliasOpts.push({ label: 'time', value: 'time' });\n    timeSeriesAliasOpts.push({ label: 'value', value: 'value' });\n  }\n\n  const onAggregationChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (aggregation: SelectableValue<string>) => {\n      const newItem = {\n        ...item,\n        name: aggregation?.value,\n        parameters: [\n          { type: QueryEditorExpressionType.FunctionParameter as const, name: item.parameters?.[0]?.name || '' },\n        ],\n      };\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const onAliasChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (alias: SelectableValue<string>) => {\n      let newItem = { ...item };\n\n      if (alias !== null) {\n        newItem = { ...item, alias: `\"${alias?.value?.trim()}\"` };\n      } else {\n        delete newItem.alias;\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeColumn = useCallback(\n    (index: number) => () => {\n      const clone = [...(query.sql?.columns || [])];\n      clone.splice(index, 1);\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: clone,\n      };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const addColumn = useCallback(() => {\n    const newSql: SQLExpression = { ...query.sql, columns: [...(query.sql?.columns || []), createFunctionField()] };\n    onSqlChange(newSql);\n  }, [onSqlChange, query.sql]);\n\n  const aggregateOptions = () => {\n    const options: Array<SelectableValue<string>> = [\n      { label: 'Aggregations', options: [] },\n      { label: 'Macros', options: [] },\n    ];\n    for (const func of db.functions()) {\n      // Create groups for macros\n      if (func.name.startsWith('$__')) {\n        options[1].options.push({ label: func.name, value: func.name });\n      } else {\n        options[0].options.push({ label: func.name, value: func.name });\n      }\n    }\n    return options;\n  };\n\n  return (\n    <Stack gap={2} wrap=\"wrap\" direction=\"column\">\n      {query.sql?.columns?.map((item, index) => (\n        <div key={index}>\n          <Stack gap={2} alignItems=\"end\">\n            <EditorField label=\"Data operations\" optional width={25}>\n              <Select\n                value={item.name ? toOption(item.name) : null}\n                inputId={`select-aggregation-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAggregation}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n                options={aggregateOptions()}\n                onChange={onAggregationChange(item, index)}\n              />\n            </EditorField>\n\n            <SelectFunctionParameters\n              currentColumnIndex={index}\n              columns={columns}\n              onSqlChange={onSqlChange}\n              query={query}\n              db={db}\n            />\n\n            <EditorField label=\"Alias\" optional width={15}>\n              <Select\n                value={item.alias ? toOption(item.alias) : null}\n                inputId={`select-alias-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAlias}\n                options={timeSeriesAliasOpts}\n                onChange={onAliasChange(item, index)}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n              />\n            </EditorField>\n            <Button\n              title=\"Remove column\"\n              type=\"button\"\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"md\"\n              onClick={removeColumn(index)}\n            />\n          </Stack>\n        </div>\n      ))}\n      <Button\n        type=\"button\"\n        onClick={addColumn}\n        variant=\"secondary\"\n        title=\"Add column\"\n        size=\"md\"\n        icon=\"plus\"\n        className={styles.addButton}\n      />\n    </Stack>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    addButton: css({ alignSelf: 'flex-start' }),\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { useAsync } from 'react-use';\n\nimport { EditorRows, EditorRow, EditorField } from '@grafana/plugin-ui';\n\nimport { DB, QueryEditorProps, QueryRowFilter } from '../../types';\nimport { QueryToolbox } from '../query-editor-raw/QueryToolbox';\n\nimport { Preview } from './Preview';\nimport { SQLGroupByRow } from './SQLGroupByRow';\nimport { SQLOrderByRow } from './SQLOrderByRow';\nimport { SQLWhereRow } from './SQLWhereRow';\nimport { SelectRow } from './SelectRow';\n\ninterface VisualEditorProps extends QueryEditorProps {\n  db: DB;\n  queryRowFilter: QueryRowFilter;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport const VisualEditor = ({ query, db, queryRowFilter, onChange, onValidate, range }: VisualEditorProps) => {\n  const state = useAsync(async () => {\n    const fields = await db.fields(query);\n    return fields;\n  }, [db, query.dataset, query.table]);\n\n  return (\n    <>\n      <EditorRows>\n        <EditorRow>\n          <SelectRow columns={state.value || []} query={query} onQueryChange={onChange} db={db} />\n        </EditorRow>\n        {queryRowFilter.filter && (\n          <EditorRow>\n            <EditorField label=\"Filter by column value\" optional>\n              <SQLWhereRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.group && (\n          <EditorRow>\n            <EditorField label=\"Group by column\">\n              <SQLGroupByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.order && (\n          <EditorRow>\n            <SQLOrderByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n          </EditorRow>\n        )}\n        {queryRowFilter.preview && query.rawSql && (\n          <EditorRow>\n            <Preview rawSql={query.rawSql} datasourceType={query.datasource?.type} />\n          </EditorRow>\n        )}\n      </EditorRows>\n      <QueryToolbox db={db} query={query} onValidate={onValidate} range={range} />\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorMode } from '@grafana/plugin-ui';\nimport { Space } from '@grafana/ui';\n\nimport { SqlDatasource } from '../datasource/SqlDatasource';\nimport { applyQueryDefaults } from '../defaults';\nimport { SQLQuery, QueryRowFilter, SQLOptions } from '../types';\nimport { haveColumns } from '../utils/sql.utils';\n\nimport { QueryHeader, QueryHeaderProps } from './QueryHeader';\nimport { RawEditor } from './query-editor-raw/RawEditor';\nimport { VisualEditor } from './visual-query-builder/VisualEditor';\n\nexport interface SqlQueryEditorProps extends QueryEditorProps<SqlDatasource, SQLQuery, SQLOptions> {\n  queryHeaderProps?: Pick<QueryHeaderProps, 'dialect'>;\n}\n\nexport default function SqlQueryEditor({\n  datasource,\n  query,\n  onChange,\n  onRunQuery,\n  range,\n  queryHeaderProps,\n}: SqlQueryEditorProps) {\n  const [isQueryRunnable, setIsQueryRunnable] = useState(true);\n  const db = datasource.getDB();\n\n  const { preconfiguredDatabase } = datasource;\n  const dialect = queryHeaderProps?.dialect ?? 'other';\n  const { loading, error } = useAsync(async () => {\n    return () => {\n      if (datasource.getDB(datasource.id).init !== undefined) {\n        datasource.getDB(datasource.id).init!();\n      }\n    };\n  }, [datasource]);\n\n  const queryWithDefaults = applyQueryDefaults(query);\n  const [queryRowFilter, setQueryRowFilter] = useState<QueryRowFilter>({\n    filter: !!queryWithDefaults.sql?.whereString,\n    group: !!queryWithDefaults.sql?.groupBy?.[0]?.property.name,\n    order: !!queryWithDefaults.sql?.orderBy?.property.name,\n    preview: true,\n  });\n  const [queryToValidate, setQueryToValidate] = useState(queryWithDefaults);\n\n  useEffect(() => {\n    return () => {\n      if (datasource.getDB(datasource.id).dispose !== undefined) {\n        datasource.getDB(datasource.id).dispose!();\n      }\n    };\n  }, [datasource]);\n\n  const processQuery = useCallback(\n    (q: SQLQuery) => {\n      if (isQueryValid(q) && onRunQuery) {\n        onRunQuery();\n      }\n    },\n    [onRunQuery]\n  );\n\n  const onQueryChange = (q: SQLQuery, process = true) => {\n    setQueryToValidate(q);\n    onChange(q);\n\n    if (haveColumns(q.sql?.columns) && q.sql?.columns.some((c) => c.name) && !queryRowFilter.group) {\n      setQueryRowFilter({ ...queryRowFilter, group: true });\n    }\n\n    if (process) {\n      processQuery(q);\n    }\n  };\n\n  const onQueryHeaderChange = (q: SQLQuery) => {\n    setQueryToValidate(q);\n    onChange(q);\n  };\n\n  if (loading || error) {\n    return null;\n  }\n\n  return (\n    <>\n      <QueryHeader\n        db={db}\n        preconfiguredDataset={preconfiguredDatabase}\n        onChange={onQueryHeaderChange}\n        onRunQuery={onRunQuery}\n        onQueryRowChange={setQueryRowFilter}\n        queryRowFilter={queryRowFilter}\n        query={queryWithDefaults}\n        isQueryRunnable={isQueryRunnable}\n        dialect={dialect}\n      />\n\n      <Space v={0.5} />\n\n      {queryWithDefaults.editorMode !== EditorMode.Code && (\n        <VisualEditor\n          db={db}\n          query={queryWithDefaults}\n          onChange={(q: SQLQuery) => onQueryChange(q, false)}\n          queryRowFilter={queryRowFilter}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n\n      {queryWithDefaults.editorMode === EditorMode.Code && (\n        <RawEditor\n          db={db}\n          query={queryWithDefaults}\n          queryToValidate={queryToValidate}\n          onChange={onQueryChange}\n          onRunQuery={onRunQuery}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n    </>\n  );\n}\n\nconst isQueryValid = (q: SQLQuery) => {\n  return Boolean(q.rawSql);\n};\n"],"names":["ConfirmModal","isOpen","onCancel","onDiscard","onCopy","buttonRef","useRef","styles","useStyles2","getStyles","useEffect","current","focus","Modal","title","div","className","modalHeaderTitle","Icon","name","size","span","titleText","onDismiss","p","ButtonRow","Button","type","variant","onClick","fill","ref","theme","css","paddingLeft","spacing","fontSize","typography","lg","float","paddingTop","margin","DatasetSelector","dataset","db","dialect","onChange","inputId","preconfiguredDataset","hasPreconfigCondition","state","useAsync","isSqlDatasourceDatabaseSelectionFeatureFlagEnabled","toOption","datasets","map","value","undefined","find","v","length","Select","aria-label","options","disabled","loading","isLoading","menuShouldPortal","TableSelector","table","tables","data-testid","selectors","components","SQLQueryEditor","headerTableSelector","placeholder","editorModes","label","EditorMode","Builder","Code","QueryHeader","isQueryRunnable","onQueryRowChange","onRunQuery","query","queryRowFilter","editorMode","_","copyToClipboard","useCopyToClipboard","showConfirm","setShowConfirm","useState","toRawSql","htmlId","useId","onEditorModeChange","useCallback","newEditorMode","reportInteraction","datasource","selectedEditorMode","EditorHeader","InlineSelect","format","e","next","QueryFormat","Table","selectedFormat","QUERY_FORMAT_OPTIONS","InlineSwitch","id","headerFilterSwitch","transparent","showLabel","filter","ev","target","HTMLInputElement","displayed","checked","headerGroupSwitch","group","headerOrderSwitch","order","headerPreviewSwitch","preview","FlexItem","grow","icon","Tooltip","content","br","placement","RadioButtonGroup","rawSql","Space","EditorRow","EditorField","width","sql","QueryEditorRaw","children","height","editorLanguageDefinition","queryRef","onRawQueryChange","processQuery","newQuery","rawQuery","SQLEditor","language","QueryValidator","onValidate","range","validationResult","setValidationResult","useTheme2","valueFormatter","useMemo","getValueFormat","error","color","colors","text","bodySmall","fontFamily","fontFamilyMonospace","valid","success","info","secondary","validateQuery","useAsyncFn","q","trim","useDebounce","result","isError","isValid","splat","split","slice","join","processErrorMessage","Spinner","inline","statistics","strong","formattedValueToString","TotalBytesProcessed","QueryToolbox","showTools","onFormatCode","onExpand","isExpanded","validatorProps","container","border","medium","borderTop","padding","display","flexGrow","justifyContent","hint","whiteSpace","cursor","style","visibility","HorizontalGroup","IconButton","tooltip","expanded","RawEditor","queryToValidate","setIsExpanded","toolboxRef","toolboxMeasure","useMeasure","editorRef","editorMeasure","getEditorLanguageDefinition","renderQueryEditor","formatQuery","renderEditor","standalone","AutoSizer","background","primary","alignItems","refId","closeOnBackdropClick","closeOnEscape","modal","contentClassName","modalContent","Preview","datasourceType","labelElement","labelWrapper","copyPreview","Field","CodeEditor","formatSQL","monacoOptions","scrollbar","vertical","scrollBeyondLastLine","readOnly","showMiniMap","fontWeight","fontWeightMedium","paddingBottom","useSqlChange","onQueryChange","onSqlChange","GroupByRow","columns","onGroupByChange","item","cleaned","setGroupByField","property","newSql","groupBy","EditorList","items","renderItem","makeRenderColumn","onChangeItem","onDeleteItem","InputGroup","AccessoryButton","SQLGroupByRow","fields","sortOrderOptions","description","OrderByRow","showOffset","onSortOrderChange","orderByDirection","onLimitChange","event","limit","Number","parseInt","currentTarget","onOffsetChange","offset","onOrderByChange","orderBy","setPropertyField","isClearable","h","optional","Input","min","uniqueId","SQLOrderByRow","columnsWithIndices","c","i","parameters","emptyInitTree","Utils","uuid","TIME_FILTER","macros","widgets","BasicConfig","factory","props","setValue","number","datetime","operator","val","dateValue","dateTime","utc","DateTimePicker","valueFormat","date","sqlFormatValue","field","widget","operatorDefinition","rightFieldDef","includes","func","call","ctx","settings","canRegroup","maxNesting","canReorder","showNot","addRuleLabel","deleteLabel","renderConjs","conjProps","filterConjunction","conjunctionOptions","Object","keys","selectedConjunction","setConjunction","renderField","fieldProps","config","filterField","f","key","mainWidgetProps","customProps","selectedKey","setField","renderButton","buttonProps","renderOperator","operatorProps","op","filterOperator","customOperators","operators","supportedOperators","sqlFormatOp","valueSrc","valueType","opDef","operatorOptions","fieldDef","isSqlFormatOp","noop","sqlFormatInOpOrNoop","splitIfString","sqlFormatNotInOpOrNoop","_operator","getCustomOperators","textWidget","types","opers","customTextWidget","customTypes","raqbConfig","isString","WhereRow","tree","setTree","configWithDefaults","initTree","checkTree","loadTree","whereJsonTree","onTreeChange","changedTree","getTree","whereString","sqlFormat","Query","renderBuilder","flex","direction","SQLWhereRow","col","raqbFieldType","valueSources","mapFieldsToTypes","templateVars","some","tv","multi","multiVariableInWhereString","replaceAll","removeQuotesForMultiVariables","getTemplateSrv","getVariables","JSON","stringify","injectGlobal","SelectColumn","onParameterChange","selectInputId","selectColumn","allowCustomValue","s","SelectCustomFunctionParameters","currentColumnIndex","macroOrFunction","addParameter","index","QueryEditorExpressionType","FunctionParameter","removeParameter","columnIndex","InlineLabel","getColumnValue","param","Stack","gap","selectInputParameter","addonAfter","SelectFunctionParameters","functions","fieldsFromFunction","setFieldsFromFunction","getFieldsFromFunction","push","keepIndex","funcParam","required","selectFunctionParameter","SelectRow","timeSeriesAliasOpts","Timeseries","onAggregationChange","aggregation","newItem","onAliasChange","alias","removeColumn","clone","splice","addColumn","createFunctionField","aggregateOptions","startsWith","wrap","selectAggregation","selectAlias","addButton","alignSelf","VisualEditor","EditorRows","SqlQueryEditor","queryHeaderProps","queryWithDefaults","setIsQueryRunnable","getDB","preconfiguredDatabase","init","applyQueryDefaults","setQueryRowFilter","setQueryToValidate","dispose","isQueryValid","process","haveColumns","Boolean"],"sourceRoot":""}