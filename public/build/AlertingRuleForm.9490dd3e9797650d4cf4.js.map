{"version":3,"file":"AlertingRuleForm.9490dd3e9797650d4cf4.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alertmanager-entities/MuteTimingsSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/ExportNewGrafanaRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaModifyExport.tsx","webpack://grafana/./public/app/features/alerting/unified/openapi/timeIntervalsApi.gen.ts","webpack://grafana/./public/app/features/alerting/unified/api/timeIntervalsApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/useMuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertRuleNameInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaFolderAndLabelsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/MuteTimingFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/AlertManagerRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/SimplifiedRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NotificationsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/ModifyExportRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsEditorModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsFieldInForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudAlertPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionsEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/CloudDataSourceSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/SmartAlertTypeDetector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/descriptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/useAdvancedMode.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/QueryAndExpressionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/AlertWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useUpsertRuleFromRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRulesNameSpaceAndGroupStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/AlertRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/CloneRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/ExistingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/RuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\nimport { MultiSelect, MultiSelectCommonProps } from '@grafana/ui';\nimport { useSelectableMuteTimings } from 'app/features/alerting/unified/components/mute-timings/useMuteTimings';\nimport { BaseAlertmanagerArgs } from 'app/features/alerting/unified/types/hooks';\nimport { timeIntervalToString } from 'app/features/alerting/unified/utils/alertmanager';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nconst mapMuteTiming = ({ name, time_intervals }: MuteTimeInterval): SelectableValue<string> => ({\n  value: name,\n  label: name,\n  description: time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n});\n\n/** Provides a MultiSelect with available mute timings for the given alertmanager */\nconst MuteTimingsSelector = ({\n  alertmanager,\n  selectProps,\n}: BaseAlertmanagerArgs & { selectProps: MultiSelectCommonProps<string> }) => {\n  const { data } = useSelectableMuteTimings({ alertmanager, skip: selectProps.disabled });\n\n  const muteTimingOptions = data?.map((value) => mapMuteTiming(value)) || [];\n\n  return (\n    <MultiSelect\n      aria-label=\"Mute timings\"\n      options={muteTimingOptions}\n      placeholder=\"Select mute timings...\"\n      {...selectProps}\n    />\n  );\n};\n\nexport default MuteTimingsSelector;\n","import { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ModifyExportRuleForm } from '../rule-editor/alert-rule-form/ModifyExportRuleForm';\n\nfunction ExportNewGrafanaRulePage() {\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: 'Export new Grafana rule',\n        subTitle: 'Export a new rule definition in Terraform(HCL) format. Any changes you make will not be saved.',\n      }}\n    >\n      <ModifyExportRuleForm />\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(ExportNewGrafanaRulePage);\n","import { useMemo } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\n\nimport { RuleIdentifier } from '../../../../../types/unified-alerting';\nimport { useRuleWithLocation } from '../../hooks/useCombinedRule';\nimport { formValuesFromExistingRule } from '../../rule-editor/formDefaults';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { createRelativeUrl } from '../../utils/url';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ModifyExportRuleForm } from '../rule-editor/alert-rule-form/ModifyExportRuleForm';\n\nfunction GrafanaModifyExport() {\n  const { id } = useParams();\n  const ruleIdentifier = useMemo<RuleIdentifier | undefined>(() => {\n    return ruleId.tryParse(id, true);\n  }, [id]);\n\n  if (!ruleIdentifier) {\n    return (\n      <Alert title=\"Invalid rule ID\" severity=\"error\">\n        The rule UID in the page URL is invalid. Please check the URL and try again.\n      </Alert>\n    );\n  }\n\n  return <RuleModifyExport ruleIdentifier={ruleIdentifier} />;\n}\n\nfunction RuleModifyExport({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }) {\n  const { loading, error, result: rulerRule } = useRuleWithLocation({ ruleIdentifier: ruleIdentifier });\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading the rule...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert title=\"Cannot load modify export\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!rulerRule && !loading) {\n    // alert rule does not exist\n    return (\n      <Alert\n        title=\"Cannot load the rule. The rule does not exist\"\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && !isGrafanaRulerRule(rulerRule.rule)) {\n    // alert rule exists but is not a grafana-managed rule\n    return (\n      <Alert\n        title=\"This rule is not a Grafana-managed alert rule\"\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && isGrafanaRulerRule(rulerRule.rule)) {\n    return (\n      <ModifyExportRuleForm\n        ruleForm={formValuesFromExistingRule(rulerRule)}\n        alertUid={rulerRule.rule.grafana_alert.uid}\n      />\n    );\n  }\n\n  return <Alert title=\"Unknown error\" />;\n}\n\nfunction GrafanaModifyExportPage() {\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: 'Modify export',\n        subTitle:\n          'Modify the current alert rule and export the rule definition in the format of your choice. Any changes you make will not be saved.',\n      }}\n    >\n      <GrafanaModifyExport />\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(GrafanaModifyExportPage);\n","import { alertingApi as api } from '../api/alertingApi';\nexport const addTagTypes = ['TimeInterval'] as const;\nconst injectedRtkApi = api\n  .enhanceEndpoints({\n    addTagTypes,\n  })\n  .injectEndpoints({\n    endpoints: (build) => ({\n      listNamespacedTimeInterval: build.query<ListNamespacedTimeIntervalApiResponse, ListNamespacedTimeIntervalApiArg>({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals`,\n          params: {\n            pretty: queryArg.pretty,\n            allowWatchBookmarks: queryArg.allowWatchBookmarks,\n            continue: queryArg['continue'],\n            fieldSelector: queryArg.fieldSelector,\n            labelSelector: queryArg.labelSelector,\n            limit: queryArg.limit,\n            resourceVersion: queryArg.resourceVersion,\n            resourceVersionMatch: queryArg.resourceVersionMatch,\n            sendInitialEvents: queryArg.sendInitialEvents,\n            timeoutSeconds: queryArg.timeoutSeconds,\n            watch: queryArg.watch,\n          },\n        }),\n        providesTags: ['TimeInterval'],\n      }),\n      createNamespacedTimeInterval: build.mutation<\n        CreateNamespacedTimeIntervalApiResponse,\n        CreateNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals`,\n          method: 'POST',\n          body: queryArg.comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            fieldManager: queryArg.fieldManager,\n            fieldValidation: queryArg.fieldValidation,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n      replaceNamespacedTimeInterval: build.mutation<\n        ReplaceNamespacedTimeIntervalApiResponse,\n        ReplaceNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          method: 'PUT',\n          body: queryArg.comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            fieldManager: queryArg.fieldManager,\n            fieldValidation: queryArg.fieldValidation,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n      deleteNamespacedTimeInterval: build.mutation<\n        DeleteNamespacedTimeIntervalApiResponse,\n        DeleteNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          method: 'DELETE',\n          body: queryArg.ioK8SApimachineryPkgApisMetaV1DeleteOptions,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            gracePeriodSeconds: queryArg.gracePeriodSeconds,\n            orphanDependents: queryArg.orphanDependents,\n            propagationPolicy: queryArg.propagationPolicy,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n    }),\n    overrideExisting: false,\n  });\nexport { injectedRtkApi as generatedTimeIntervalsApi };\nexport type ListNamespacedTimeIntervalApiResponse =\n  /** status 200 OK */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalList;\nexport type ListNamespacedTimeIntervalApiArg = {\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. */\n  allowWatchBookmarks?: boolean;\n  /** The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n    \n    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. */\n  continue?: string;\n  /** A selector to restrict the list of returned objects by their fields. Defaults to everything. */\n  fieldSelector?: string;\n  /** A selector to restrict the list of returned objects by their labels. Defaults to everything. */\n  labelSelector?: string;\n  /** limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n    \n    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. */\n  limit?: number;\n  /** resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n    \n    Defaults to unset */\n  resourceVersion?: string;\n  /** resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n    \n    Defaults to unset */\n  resourceVersionMatch?: string;\n  /** `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n    \n    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n      is interpreted as \"data at least as new as the provided `resourceVersion`\"\n      and the bookmark event is send when the state is synced\n      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n      If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n      bookmark event is send when the state is synced at least to the moment\n      when request started being processed.\n    - `resourceVersionMatch` set to any other value or unset\n      Invalid error is returned.\n    \n    Defaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise. */\n  sendInitialEvents?: boolean;\n  /** Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. */\n  timeoutSeconds?: number;\n  /** Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. */\n  watch?: boolean;\n};\nexport type CreateNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 201 Created */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 202 Accepted */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type CreateNamespacedTimeIntervalApiArg = {\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. */\n  fieldManager?: string;\n  /** fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. */\n  fieldValidation?: string;\n  comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n};\nexport type ReplaceNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 201 Created */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type ReplaceNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. */\n  fieldManager?: string;\n  /** fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. */\n  fieldValidation?: string;\n  comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n};\nexport type DeleteNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | IoK8SApimachineryPkgApisMetaV1Status\n  | /** status 202 Accepted */ IoK8SApimachineryPkgApisMetaV1Status;\nexport type DeleteNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. */\n  gracePeriodSeconds?: number;\n  /** Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. */\n  orphanDependents?: boolean;\n  /** Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. */\n  propagationPolicy?: string;\n  ioK8SApimachineryPkgApisMetaV1DeleteOptions: IoK8SApimachineryPkgApisMetaV1DeleteOptions;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Time = string;\nexport type IoK8SApimachineryPkgApisMetaV1FieldsV1 = object;\nexport type IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry = {\n  /** APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted. */\n  apiVersion?: string;\n  /** FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\" */\n  fieldsType?: string;\n  /** FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type. */\n  fieldsV1?: IoK8SApimachineryPkgApisMetaV1FieldsV1;\n  /** Manager is an identifier of the workflow managing these fields. */\n  manager?: string;\n  /** Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'. */\n  operation?: string;\n  /** Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource. */\n  subresource?: string;\n  /** Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over. */\n  time?: IoK8SApimachineryPkgApisMetaV1Time;\n};\nexport type IoK8SApimachineryPkgApisMetaV1OwnerReference = {\n  /** API version of the referent. */\n  apiVersion: string;\n  /** If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. */\n  blockOwnerDeletion?: boolean;\n  /** If true, this reference points to the managing controller. */\n  controller?: boolean;\n  /** Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind: string;\n  /** Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name: string;\n  /** UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ObjectMeta = {\n  /** Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations */\n  annotations?: {\n    [key: string]: string;\n  };\n  /** CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  creationTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. */\n  deletionGracePeriodSeconds?: number;\n  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  deletionTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. */\n  finalizers?: string[];\n  /** GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will return a 409.\n    \n    Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency */\n  generateName?: string;\n  /** A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. */\n  generation?: number;\n  /** Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels */\n  labels?: {\n    [key: string]: string;\n  };\n  /** ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. */\n  managedFields?: IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry[];\n  /** Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name?: string;\n  /** Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces */\n  namespace?: string;\n  /** List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. */\n  ownerReferences?: IoK8SApimachineryPkgApisMetaV1OwnerReference[];\n  /** An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n  /** UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeRange = {\n  end_time: string;\n  start_time: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Interval = {\n  days_of_month?: string[];\n  location?: string;\n  months?: string[];\n  times?: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeRange[];\n  weekdays?: string[];\n  years?: string[];\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalSpec = {\n  name: string;\n  time_intervals: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Interval[];\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ObjectMeta;\n  spec: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalSpec;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ListMeta = {\n  /** continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. */\n  continue?: string;\n  /** remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact. */\n  remainingItemCount?: number;\n  /** String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalList = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  items: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval[];\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ListMeta;\n};\nexport type IoK8SApimachineryPkgApisMetaV1StatusCause = {\n  /** The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n    \n    Examples:\n      \"name\" - the field \"name\" on the current resource\n      \"items[0].name\" - the field \"name\" on the first array entry in \"items\" */\n  field?: string;\n  /** A human-readable description of the cause of the error.  This field may be presented as-is to a reader. */\n  message?: string;\n  /** A machine-readable description of the cause of the error. If this value is empty there is no information available. */\n  reason?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1StatusDetails = {\n  /** The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes. */\n  causes?: IoK8SApimachineryPkgApisMetaV1StatusCause[];\n  /** The group attribute of the resource associated with the status StatusReason. */\n  group?: string;\n  /** The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described). */\n  name?: string;\n  /** If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action. */\n  retryAfterSeconds?: number;\n  /** UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Status = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** Suggested HTTP return code for this status, 0 if not set. */\n  code?: number;\n  /** Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type. */\n  details?: IoK8SApimachineryPkgApisMetaV1StatusDetails;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** A human-readable description of the status of this operation. */\n  message?: string;\n  /** Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  metadata?: IoK8SApimachineryPkgApisMetaV1ListMeta;\n  /** A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it. */\n  reason?: string;\n  /** Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status */\n  status?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Preconditions = {\n  /** Specifies the target ResourceVersion */\n  resourceVersion?: string;\n  /** Specifies the target UID. */\n  uid?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1DeleteOptions = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string[];\n  /** The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. */\n  gracePeriodSeconds?: number;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. */\n  orphanDependents?: boolean;\n  /** Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned. */\n  preconditions?: IoK8SApimachineryPkgApisMetaV1Preconditions;\n  /** Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. */\n  propagationPolicy?: string;\n};\n","// Overriding the response types when enhancing endpoints is currently fiddly.\n// A potential approach could be taken from the below:\n// https://github.com/reduxjs/redux-toolkit/issues/3901#issuecomment-1820995408\n// https://github.com/reduxjs/redux-toolkit/issues/3443#issue-1709588268\n//\n// At the time of writing there is an open PR changing the API of `enhanceEndpoints`,\n// which may help alleviate this when it lands:\n// https://github.com/reduxjs/redux-toolkit/pull/3485\n\nimport { generatedTimeIntervalsApi } from 'app/features/alerting/unified/openapi/timeIntervalsApi.gen';\n\nexport const timeIntervalsApi = generatedTimeIntervalsApi;\n","import { useEffect } from 'react';\n\nimport { alertmanagerApi } from 'app/features/alerting/unified/api/alertmanagerApi';\nimport { timeIntervalsApi } from 'app/features/alerting/unified/api/timeIntervalsApi';\nimport { mergeTimeIntervals } from 'app/features/alerting/unified/components/mute-timings/util';\nimport {\n  ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n  IoK8SApimachineryPkgApisMetaV1ObjectMeta,\n} from 'app/features/alerting/unified/openapi/timeIntervalsApi.gen';\nimport { BaseAlertmanagerArgs, Skippable } from 'app/features/alerting/unified/types/hooks';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { PROVENANCE_NONE } from 'app/features/alerting/unified/utils/k8s/constants';\nimport {\n  encodeFieldSelector,\n  isK8sEntityProvisioned,\n  shouldUseK8sApi,\n} from 'app/features/alerting/unified/utils/k8s/utils';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAPINamespace } from '../../../../../api/utils';\nimport { useAsync } from '../../hooks/useAsync';\nimport { useProduceNewAlertmanagerConfiguration } from '../../hooks/useProduceNewAlertmanagerConfig';\nimport {\n  addMuteTimingAction,\n  deleteMuteTimingAction,\n  updateMuteTimingAction,\n} from '../../reducers/alertmanager/muteTimings';\n\nconst { useLazyGetAlertmanagerConfigurationQuery, useGetMuteTimingListQuery } = alertmanagerApi;\nconst {\n  useLazyListNamespacedTimeIntervalQuery,\n  useCreateNamespacedTimeIntervalMutation,\n  useReplaceNamespacedTimeIntervalMutation,\n  useDeleteNamespacedTimeIntervalMutation,\n} = timeIntervalsApi;\n\n/**\n * Alertmanager mute time interval, with optional additional metadata\n * (returned in the case of K8S API implementation)\n * */\nexport type MuteTiming = MuteTimeInterval & {\n  id: string;\n  metadata?: IoK8SApimachineryPkgApisMetaV1ObjectMeta;\n};\n\n/** Alias for generated kuberenetes Alerting API Server type */\ntype TimeIntervalV0Alpha1 = ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n\n/** Parse kubernetes API response into a Mute Timing */\nconst parseK8sTimeInterval: (item: TimeIntervalV0Alpha1) => MuteTiming = (item) => {\n  const { metadata, spec } = item;\n  return {\n    ...spec,\n    id: spec.name,\n    metadata,\n    provisioned: isK8sEntityProvisioned(item),\n  };\n};\n\n/** Parse Alertmanager time interval response into a Mute Timing */\nconst parseAmTimeInterval: (interval: MuteTimeInterval, provenance: string) => MuteTiming = (interval, provenance) => {\n  return {\n    ...interval,\n    id: interval.name,\n    provisioned: Boolean(provenance && provenance !== PROVENANCE_NONE),\n  };\n};\n\nconst useAlertmanagerIntervals = () =>\n  useLazyGetAlertmanagerConfigurationQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n      const { alertmanager_config } = data;\n      const muteTimingsProvenances = alertmanager_config.muteTimeProvenances ?? {};\n      const intervals = mergeTimeIntervals(alertmanager_config);\n      const timeIntervals = intervals.map((interval) =>\n        parseAmTimeInterval(interval, muteTimingsProvenances[interval.name])\n      );\n\n      return {\n        data: timeIntervals,\n        ...rest,\n      };\n    },\n  });\n\nconst useGrafanaAlertmanagerIntervals = () =>\n  useLazyListNamespacedTimeIntervalQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      return {\n        data: data?.items.map((item) => parseK8sTimeInterval(item)),\n        ...rest,\n      };\n    },\n  });\n\n/**\n * Depending on alertmanager source, fetches mute timings.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * fetches time intervals from k8s API.\n *\n * Otherwise, fetches and parses from the alertmanager config API\n */\nexport const useMuteTimings = ({ alertmanager, skip }: BaseAlertmanagerArgs & Skippable) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getGrafanaTimeIntervals, intervalsResponse] = useGrafanaAlertmanagerIntervals();\n  const [getAlertmanagerTimeIntervals, configApiResponse] = useAlertmanagerIntervals();\n\n  useEffect(() => {\n    if (skip) {\n      return;\n    }\n    if (useK8sApi) {\n      const namespace = getAPINamespace();\n      getGrafanaTimeIntervals({ namespace });\n    } else {\n      getAlertmanagerTimeIntervals(alertmanager);\n    }\n  }, [alertmanager, getAlertmanagerTimeIntervals, getGrafanaTimeIntervals, skip, useK8sApi]);\n  return useK8sApi ? intervalsResponse : configApiResponse;\n};\n\ntype CreateUpdateMuteTimingArgs = { interval: MuteTimeInterval };\n\n/**\n * Create a new mute timing.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * fetches time intervals from k8s API.\n *\n * Otherwise, creates the new timing in `time_intervals` via AM config API\n */\nexport const useCreateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [createGrafanaTimeInterval] = useCreateNamespacedTimeIntervalMutation();\n  const [updateConfiguration] = useProduceNewAlertmanagerConfiguration();\n\n  const addToK8sAPI = useAsync(({ interval }: CreateUpdateMuteTimingArgs) => {\n    const namespace = getAPINamespace();\n\n    return createGrafanaTimeInterval({\n      namespace,\n      comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: { metadata: {}, spec: interval },\n    }).unwrap();\n  });\n\n  const addToAlertmanagerConfiguration = useAsync(({ interval }: CreateUpdateMuteTimingArgs) => {\n    const action = addMuteTimingAction({ interval });\n    return updateConfiguration(action);\n  });\n\n  return useK8sApi ? addToK8sAPI : addToAlertmanagerConfiguration;\n};\n\n/**\n * Get an individual time interval, either from the k8s API,\n * or by finding it in the alertmanager config\n */\nexport const useGetMuteTiming = ({ alertmanager, name: nameToFind }: BaseAlertmanagerArgs & { name: string }) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getGrafanaTimeInterval, k8sResponse] = useLazyListNamespacedTimeIntervalQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n\n      if (data.items.length === 0) {\n        return { ...rest, data: undefined, isError: true };\n      }\n\n      return {\n        data: parseK8sTimeInterval(data.items[0]),\n        ...rest,\n      };\n    },\n  });\n\n  const [getAlertmanagerTimeInterval, amConfigApiResponse] = useLazyGetAlertmanagerConfigurationQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n      const alertmanager_config = data?.alertmanager_config ?? {};\n      const timeIntervals = mergeTimeIntervals(alertmanager_config);\n      const timing = timeIntervals.find(({ name }) => name === nameToFind);\n      if (timing) {\n        const muteTimingsProvenances = alertmanager_config?.muteTimeProvenances ?? {};\n\n        return {\n          data: parseAmTimeInterval(timing, muteTimingsProvenances[timing.name]),\n          ...rest,\n        };\n      }\n      return { ...rest, data: undefined, isError: true };\n    },\n  });\n\n  useEffect(() => {\n    if (useK8sApi) {\n      const namespace = getAPINamespace();\n      const entityName = encodeFieldSelector(nameToFind);\n      getGrafanaTimeInterval({ namespace, fieldSelector: `spec.name=${entityName}` }, true);\n    } else {\n      getAlertmanagerTimeInterval(alertmanager, true);\n    }\n  }, [alertmanager, getAlertmanagerTimeInterval, getGrafanaTimeInterval, nameToFind, useK8sApi]);\n\n  return useK8sApi ? k8sResponse : amConfigApiResponse;\n};\n\n/**\n * Updates an existing mute timing.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * uses the k8s API. At the time of writing, the name of the timing cannot be changed via this API\n *\n * Otherwise, updates the timing via AM config API, and also ensures any referenced routes are updated\n */\nexport const useUpdateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [replaceGrafanaTimeInterval] = useReplaceNamespacedTimeIntervalMutation();\n  const [updateConfiguration] = useProduceNewAlertmanagerConfiguration();\n\n  const updateToK8sAPI = useAsync(\n    async ({ interval, originalName }: CreateUpdateMuteTimingArgs & { originalName: string }) => {\n      const namespace = getAPINamespace();\n\n      return replaceGrafanaTimeInterval({\n        name: originalName,\n        namespace,\n        comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: {\n          spec: interval,\n          metadata: { name: originalName },\n        },\n      }).unwrap();\n    }\n  );\n\n  const updateToAlertmanagerConfiguration = useAsync(\n    async ({ interval, originalName }: CreateUpdateMuteTimingArgs & { originalName: string }) => {\n      const action = updateMuteTimingAction({ interval, originalName });\n      return updateConfiguration(action);\n    }\n  );\n\n  return useK8sApi ? updateToK8sAPI : updateToAlertmanagerConfiguration;\n};\n\n/**\n * Delete a mute timing interval\n */\ntype DeleteMuteTimingArgs = { name: string };\nexport const useDeleteMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [updateConfiguration, _updateConfigurationRequestState] = useProduceNewAlertmanagerConfiguration();\n  const [deleteGrafanaTimeInterval] = useDeleteNamespacedTimeIntervalMutation();\n\n  const deleteFromAlertmanagerAPI = useAsync(async ({ name }: DeleteMuteTimingArgs) => {\n    const action = deleteMuteTimingAction({ name });\n    return updateConfiguration(action);\n  });\n\n  const deleteFromK8sAPI = useAsync(async ({ name }: DeleteMuteTimingArgs) => {\n    const namespace = getAPINamespace();\n    await deleteGrafanaTimeInterval({\n      name,\n      namespace,\n      ioK8SApimachineryPkgApisMetaV1DeleteOptions: {},\n    }).unwrap();\n  });\n\n  return useK8sApi ? deleteFromK8sAPI : deleteFromAlertmanagerAPI;\n};\n\nexport const useValidateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getIntervals] = useAlertmanagerIntervals();\n\n  // If we're using the kubernetes API, then we let the API response handle the validation instead\n  // as we don't expect to be able to fetch the intervals via the AM config\n  if (useK8sApi) {\n    return () => undefined;\n  }\n\n  return async (value: string, skipValidation?: boolean) => {\n    if (skipValidation) {\n      return;\n    }\n    return getIntervals(alertmanager)\n      .unwrap()\n      .then((config) => {\n        const intervals = mergeTimeIntervals(config.alertmanager_config);\n        const duplicatedInterval = Boolean(intervals?.find((interval) => interval.name === value));\n        return duplicatedInterval ? `Mute timing already exists with name \"${value}\"` : undefined;\n      });\n  };\n};\n\n/**\n * @deprecated This will be deprecated by the K8S API.\n * Once that is enabled by default, this method should be removed and `useMuteTimings` should always be used instead\n */\nexport const useSelectableMuteTimings = ({ alertmanager, skip }: BaseAlertmanagerArgs & Skippable) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n  const useDeprecatedEndpoint = alertmanager === GRAFANA_RULES_SOURCE_NAME && !useK8sApi;\n\n  /** Fetch from the (to be deprecated) specific endpoint for time-intervals */\n  const deprecatedMuteTimingsResponse = useGetMuteTimingListQuery(undefined, {\n    skip: skip || !useDeprecatedEndpoint,\n  });\n\n  const fetchMuteTimings = useMuteTimings({ alertmanager, skip: skip || useDeprecatedEndpoint });\n\n  return useDeprecatedEndpoint ? deprecatedMuteTimingsResponse : fetchMuteTimings;\n};\n","import moment from 'moment';\nimport { Fragment } from 'react';\n\nimport { Stack } from '@grafana/ui';\nimport { AlertmanagerConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nexport const isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\n/**\n * Merges `mute_time_intervals` and `time_intervals` from alertmanager config to support both old and new config\n */\nexport const mergeTimeIntervals = (alertManagerConfig: AlertmanagerConfig) => {\n  return [...(alertManagerConfig.mute_time_intervals ?? []), ...(alertManagerConfig.time_intervals ?? [])];\n};\n\nexport const isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport function renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  const intervals = timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <Fragment key={JSON.stringify(interval) + index}>\n        <div>\n          {`${timeString} ${weekdayString}`}\n          <br />\n          {[daysString, monthsString, yearsString].join(' | ')}\n          <br />\n        </div>\n      </Fragment>\n    );\n  });\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {intervals}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  list: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content 1fr 2fr',\n    gap: theme.spacing(1, 3),\n  }),\n  header: css({\n    display: 'contents',\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  examples: css({\n    display: 'contents',\n    '& > div': {\n      gridColumn: '1 / span 2',\n    },\n  }),\n});\n","import { forwardRef } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { PopupCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>((props, ref) => {\n  return (\n    <Input\n      suffix={\n        <PopupCard content={<PromDurationDocs />} disabled={false}>\n          <Icon name=\"info-circle\" size=\"lg\" />\n        </PopupCard>\n      }\n      {...props}\n      ref={ref}\n    />\n  );\n});\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      alignItems: 'center',\n      display: 'flex',\n      flexFlow: 'row nowrap',\n\n      '& > * + *': {\n        marginLeft: theme.spacing(1),\n      },\n    }),\n    input: css({\n      flex: 1,\n    }),\n    promDurationInput: css({\n      maxWidth: theme.spacing(32),\n    }),\n    timingFormContainer: css({\n      padding: theme.spacing(1),\n    }),\n    linkText: css({\n      textDecoration: 'underline',\n    }),\n    collapse: css({\n      border: 'none',\n      background: 'none',\n      color: theme.colors.text.primary,\n    }),\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The wait time before sending the first notification for a new group of alerts. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The wait time before sending a notification about changes in the alert group after the first notification has been sent. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The wait time before resending a notification that has already been sent successfully.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import { useFormContext } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Field, Input, Stack, Text } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isCloudRecordingRuleByType, isGrafanaRecordingRuleByType, isRecordingRuleByType } from '../../utils/rules';\n\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst recordingRuleNameValidationPattern = (type: RuleFormType) => ({\n  message: isGrafanaRecordingRuleByType(type)\n    ? 'Recording rule metric must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.'\n    : 'Recording rule name must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.',\n  value: /^[a-zA-Z_:][a-zA-Z0-9_:]*$/,\n});\n\n/**\n *  This component renders the input for the alert rule name.\n *  In case of recording rule, it also renders the input for the recording rule metric, and it validates this value.\n */\nexport const AlertRuleNameAndMetric = () => {\n  const {\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const ruleFormType = watch('type');\n  if (!ruleFormType) {\n    return null;\n  }\n  const isRecording = isRecordingRuleByType(ruleFormType);\n  const isGrafanaRecordingRule = isGrafanaRecordingRuleByType(ruleFormType);\n  const isCloudRecordingRule = isCloudRecordingRuleByType(ruleFormType);\n  const recordingLabel = isGrafanaRecordingRule ? 'recording rule and metric' : 'recording rule';\n  const namePlaceholder = isRecording ? 'recording rule' : 'alert rule';\n  const entityName = isRecording ? recordingLabel : 'alert rule';\n  return (\n    <RuleEditorSection\n      stepNo={1}\n      title={`Enter ${entityName} name`}\n      description={\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          Enter a name to identify your {entityName}.\n        </Text>\n      }\n    >\n      <Stack direction=\"column\">\n        <Field label=\"Name\" error={errors?.name?.message} invalid={!!errors.name?.message}>\n          <Input\n            data-testid={selectors.components.AlertRules.ruleNameField}\n            id=\"name\"\n            width={38}\n            {...register('name', {\n              required: { value: true, message: 'Must enter a name' },\n              pattern: isCloudRecordingRule\n                ? recordingRuleNameValidationPattern(RuleFormType.cloudRecording)\n                : undefined,\n            })}\n            aria-label=\"name\"\n            placeholder={`Give your ${namePlaceholder} a name`}\n          />\n        </Field>\n        {isGrafanaRecordingRule && (\n          <Field label=\"Metric\" error={errors?.metric?.message} invalid={!!errors.metric?.message}>\n            <Input\n              id=\"metric\"\n              width={38}\n              {...register('metric', {\n                required: { value: true, message: 'Must enter a metric name' },\n                pattern: recordingRuleNameValidationPattern(RuleFormType.grafanaRecording),\n              })}\n              aria-label=\"metric\"\n              placeholder={`Give the name of the new recorded metric`}\n            />\n          </Field>\n        )}\n      </Stack>\n    </RuleEditorSection>\n  );\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useCallback, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, Input, Label, Modal, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { NestedFolderPicker } from 'app/core/components/NestedFolderPicker/NestedFolderPicker';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useNewFolderMutation } from 'app/features/browse-dashboards/api/browseDashboardsAPI';\nimport { AccessControlAction } from 'app/types';\n\nimport { Trans } from '../../../../../core/internationalization/index';\nimport { Folder, RuleFormValues } from '../../types/rule-form';\n\nexport function FolderSelector() {\n  const {\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const folder = watch('folder');\n\n  const onOpenFolderCreationModal = () => setIsCreatingFolder(true);\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n    setIsCreatingFolder(false);\n  };\n\n  return (\n    <>\n      <Stack alignItems=\"center\">\n        {\n          <Field\n            label={\n              <Label htmlFor=\"folder\" description={'Select a folder to store your rule in.'}>\n                <Trans i18nKey=\"alerting.rule-form.folder.label\">Folder</Trans>\n              </Label>\n            }\n            error={errors.folder?.message}\n            data-testid=\"folder-picker\"\n          >\n            <Stack direction=\"row\" alignItems=\"center\">\n              {(!isCreatingFolder && (\n                <>\n                  <Controller\n                    render={({ field: { ref, ...field } }) => (\n                      <div style={{ width: 420 }}>\n                        <NestedFolderPicker\n                          showRootFolder={false}\n                          invalid={!!errors.folder?.message}\n                          {...field}\n                          value={folder?.uid}\n                          onChange={(uid, title) => {\n                            if (uid && title) {\n                              setValue('folder', { title, uid });\n                            } else {\n                              setValue('folder', undefined);\n                            }\n\n                            resetGroup();\n                          }}\n                        />\n                      </div>\n                    )}\n                    name=\"folder\"\n                    rules={{\n                      required: { value: true, message: 'Select a folder' },\n                    }}\n                  />\n                  <Text color=\"secondary\">\n                    <Trans i18nKey=\"alerting.rule-form.folder.new-folder-or\">or</Trans>\n                  </Text>\n                  <Button\n                    onClick={onOpenFolderCreationModal}\n                    type=\"button\"\n                    icon=\"plus\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n                    data-testid={selectors.components.AlertRules.newFolderButton}\n                  >\n                    <Trans i18nKey=\"alerting.rule-form.folder.new-folder\">New folder</Trans>\n                  </Button>\n                </>\n              )) || (\n                <div>\n                  <Trans i18nKey=\"alerting.rule-form.folder.creating-new-folder\">Creating new folder</Trans>\n                  {'...'}\n                </div>\n              )}\n            </Stack>\n          </Field>\n        }\n      </Stack>\n\n      {isCreatingFolder && (\n        <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n      )}\n    </>\n  );\n}\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [title, setTitle] = useState('');\n  const [createFolder] = useNewFolderMutation();\n\n  const onSubmit = async () => {\n    const { data, error } = await createFolder({ title });\n\n    if (error) {\n      notifyApp.error('Failed to create folder');\n    } else if (data) {\n      onCreate({ title: data.title, uid: data.uid });\n      notifyApp.success('Folder created');\n    }\n  };\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={'New folder'} onDismiss={onClose} onClickBackdrop={onClose}>\n      <Stack direction=\"column\" gap={2}>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"alerting.rule-form.folder.create-folder\">\n            Create a new folder to store your alert rule in.\n          </Trans>\n        </Text>\n\n        <form onSubmit={onSubmit}>\n          <Field\n            label={\n              <Label htmlFor=\"folder\">\n                <Trans i18nKey=\"alerting.rule-form.folder.name\">Folder name</Trans>\n              </Label>\n            }\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newFolderNameField}\n              autoFocus={true}\n              id=\"folderName\"\n              placeholder=\"Enter a name\"\n              value={title}\n              onChange={(e) => setTitle(e.currentTarget.value)}\n            />\n          </Field>\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n              <Trans i18nKey=\"alerting.rule-form.folder.cancel\">Cancel</Trans>\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!title}\n              data-testid={selectors.components.AlertRules.newFolderNameCreateButton}\n            >\n              <Trans i18nKey=\"alerting.rule-form.folder.create\">Create</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </Stack>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n});\n","import { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { KBObjectArray, RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FolderSelector } from './FolderSelector';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { LabelsEditorModal } from './labels/LabelsEditorModal';\nimport { LabelsFieldInForm } from './labels/LabelsFieldInForm';\n\n/** Precondition: rule is Grafana managed.\n */\nexport function GrafanaFolderAndLabelsStep() {\n  const { setValue, getValues } = useFormContext<RuleFormValues>();\n  const [showLabelsEditor, setShowLabelsEditor] = useState(false);\n\n  function onCloseLabelsEditor(labelsToUpdate?: KBObjectArray) {\n    if (labelsToUpdate) {\n      setValue('labels', labelsToUpdate);\n    }\n    setShowLabelsEditor(false);\n  }\n\n  function SectionDescription() {\n    return (\n      <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <Trans i18nKey=\"alerting.rule-form.folder-and-labels\">\n            Organize your alert rule with a folder and set of labels.\n          </Trans>\n        </Text>\n        <NeedHelpInfo\n          contentText={\n            <>\n              <p>\n                {t(\n                  'alerting.rule-form.folders.help-info',\n                  'Folders are used for storing alert rules. You can extend the access provided by a role to alert rules and assign permissions to individual folders.'\n                )}\n              </p>\n              <p>\n                {t(\n                  'alerting.rule-form.labels.help-info',\n                  'Labels are used to differentiate an alert from all other alerts.You can use them for searching, silencing, and routing notifications.'\n                )}\n              </p>\n            </>\n          }\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Add folder and labels\" description={<SectionDescription />}>\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderSelector />\n        <LabelsFieldInForm onEditClick={() => setShowLabelsEditor(true)} />\n        <LabelsEditorModal\n          isOpen={showLabelsEditor}\n          onClose={onCloseLabelsEditor}\n          dataSourceName={GRAFANA_RULES_SOURCE_NAME}\n          initialLabels={getValues('labels')}\n        />\n      </Stack>\n    </RuleEditorSection>\n  );\n}\n","import { Stack } from '@grafana/ui';\n\nimport { ContactPointReceiverTitleRow } from '../../../../contact-points/ContactPoint';\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY } from '../../../../contact-points/constants';\nimport { ReceiverConfigWithMetadata, getReceiverDescription } from '../../../../contact-points/utils';\n\ninterface ContactPointDetailsProps {\n  receivers: ReceiverConfigWithMetadata[];\n}\n\nexport const ContactPointDetails = ({ receivers }: ContactPointDetailsProps) => {\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <div>\n        {receivers.map((receiver, index) => {\n          const metadata = receiver[RECEIVER_META_KEY];\n          const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n          const key = metadata.name + index;\n          return (\n            <ContactPointReceiverTitleRow\n              key={key}\n              name={metadata.name}\n              type={receiver.type}\n              description={getReceiverDescription(receiver)}\n              pluginMetadata={pluginMetadata}\n            />\n          );\n        })}\n      </div>\n    </Stack>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { ActionMeta, Field, FieldValidationMessage, Stack, TextLink } from '@grafana/ui';\nimport { ContactPointSelector as ContactPointSelectorDropdown } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { createRelativeUrl } from 'app/features/alerting/unified/utils/url';\n\nimport { ContactPointWithMetadata } from '../../../../contact-points/utils';\n\nexport interface ContactPointSelectorProps {\n  alertManager: string;\n  onSelectContactPoint: (contactPoint?: ContactPointWithMetadata) => void;\n}\n\nexport function ContactPointSelector({ alertManager, onSelectContactPoint }: ContactPointSelectorProps) {\n  const { control, watch, trigger } = useFormContext<RuleFormValues>();\n\n  const contactPointInForm = watch(`contactPoints.${alertManager}.selectedContactPoint`);\n\n  // if we have a contact point selected, check if it still exists in the event that someone has deleted it\n  const validateContactPoint = useCallback(() => {\n    if (contactPointInForm) {\n      trigger(`contactPoints.${alertManager}.selectedContactPoint`, { shouldFocus: true });\n    }\n  }, [alertManager, contactPointInForm, trigger]);\n\n  // validate the contact point and check if it still exists when mounting the component\n  useEffect(() => {\n    validateContactPoint();\n  }, [validateContactPoint]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Field label=\"Contact point\" data-testid=\"contact-point-picker\">\n          <Controller\n            render={({ field: { onChange }, fieldState: { error } }) => (\n              <>\n                <Stack>\n                  <ContactPointSelectorDropdown\n                    selectProps={{\n                      onChange: (value: SelectableValue<ContactPointWithMetadata>, _: ActionMeta) => {\n                        onChange(value?.value?.name);\n                        onSelectContactPoint(value?.value);\n                      },\n                      width: 50,\n                    }}\n                    showRefreshButton\n                    selectedContactPointName={contactPointInForm}\n                  />\n                  <LinkToContactPoints />\n                </Stack>\n\n                {/* Error can come from the required validation we have in here, or from the manual setError we do in the parent component.\n                The only way I found to check the custom error is to check if the field has a value and if it's not in the options. */}\n\n                {error && <FieldValidationMessage>{error?.message}</FieldValidationMessage>}\n              </>\n            )}\n            rules={{\n              required: {\n                value: true,\n                message: 'Contact point is required.',\n              },\n            }}\n            control={control}\n            name={`contactPoints.${alertManager}.selectedContactPoint`}\n          />\n        </Field>\n      </Stack>\n    </Stack>\n  );\n}\nfunction LinkToContactPoints() {\n  const hrefToContactPoints = '/alerting/notifications';\n  return (\n    <TextLink external href={createRelativeUrl(hrefToContactPoints)} aria-label=\"View or create contact points\">\n      View or create contact points\n    </TextLink>\n  );\n}\n","import { Controller, useFormContext } from 'react-hook-form';\n\nimport { Field } from '@grafana/ui';\nimport MuteTimingsSelector from 'app/features/alerting/unified/components/alertmanager-entities/MuteTimingsSelector';\nimport { BaseAlertmanagerArgs } from 'app/features/alerting/unified/types/hooks';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { mapMultiSelectValueToStrings } from 'app/features/alerting/unified/utils/amroutes';\n\n/** Provides a form field for use in simplified routing, for selecting appropriate mute timings */\nexport function MuteTimingFields({ alertmanager }: BaseAlertmanagerArgs) {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  return (\n    <Field\n      label=\"Mute timings\"\n      data-testid=\"am-mute-timing-select\"\n      description=\"Select a mute timing to define when not to send notifications for this alert rule\"\n      invalid={!!errors.contactPoints?.[alertmanager]?.muteTimeIntervals}\n    >\n      <Controller\n        render={({ field: { onChange, ref, ...field } }) => (\n          <MuteTimingsSelector\n            alertmanager={alertmanager}\n            selectProps={{\n              ...field,\n              onChange: (value) => onChange(mapMultiSelectValueToStrings(value)),\n            }}\n          />\n        )}\n        control={control}\n        name={`contactPoints.${alertmanager}.muteTimeIntervals`}\n      />\n    </Field>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\n\nimport { Field, useStyles2 } from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { promDurationValidator, repeatIntervalValidator } from 'app/features/alerting/unified/utils/amroutes';\n\nimport { PromDurationInput } from '../../../../notification-policies/PromDurationInput';\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { routeTimingsFields } from '../../../../notification-policies/routeTimingsFields';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\ninterface RouteTimingsProps {\n  alertManager: string;\n}\n\nexport function RouteTimings({ alertManager }: RouteTimingsProps) {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    register,\n    formState: { errors },\n    getValues,\n  } = useFormContext<RuleFormValues>();\n  return (\n    <>\n      <Field\n        label={routeTimingsFields.groupWait.label}\n        description={routeTimingsFields.groupWait.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupWaitValue}\n        error={errors.contactPoints?.[alertManager]?.groupWaitValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupWaitValue`, { validate: promDurationValidator })}\n          aria-label={routeTimingsFields.groupWait.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.groupInterval.label}\n        description={routeTimingsFields.groupInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.groupIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupIntervalValue`, {\n            validate: promDurationValidator,\n          })}\n          aria-label={routeTimingsFields.groupInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.repeatInterval.label}\n        description={routeTimingsFields.repeatInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.repeatIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.repeatIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.repeatIntervalValue`, {\n            validate: (value: string) => {\n              const groupInterval = getValues(`contactPoints.${alertManager}.repeatIntervalValue`);\n              return repeatIntervalValidator(value, groupInterval);\n            },\n          })}\n          aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n        />\n      </Field>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, FieldValidationMessage, InlineField, MultiSelect, Stack, Switch, Text, useStyles2 } from '@grafana/ui';\nimport { MultiValueRemove, MultiValueRemoveProps } from '@grafana/ui/src/components/Select/MultiValue';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport {\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from 'app/features/alerting/unified/utils/amroutes';\n\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\nimport { RouteTimings } from './RouteTimings';\n\nconst REQUIRED_FIELDS_IN_GROUPBY = ['grafana_folder', 'alertname'];\n\nconst DEFAULTS_TIMINGS = {\n  groupWaitValue: TIMING_OPTIONS_DEFAULTS.group_wait,\n  groupIntervalValue: TIMING_OPTIONS_DEFAULTS.group_interval,\n  repeatIntervalValue: TIMING_OPTIONS_DEFAULTS.repeat_interval,\n};\nconst DISABLE_GROUPING = '...';\n\nexport interface RoutingSettingsProps {\n  alertManager: string;\n}\nexport const RoutingSettings = ({ alertManager }: RoutingSettingsProps) => {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    control,\n    watch,\n    register,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues([]));\n  const { groupIntervalValue, groupWaitValue, repeatIntervalValue } = DEFAULTS_TIMINGS;\n  const overrideGrouping = watch(`contactPoints.${alertManager}.overrideGrouping`);\n  const overrideTimings = watch(`contactPoints.${alertManager}.overrideTimings`);\n  const groupByCount = watch(`contactPoints.${alertManager}.groupBy`)?.length ?? 0;\n\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    if (overrideGrouping && groupByCount === 0) {\n      setValue(`contactPoints.${alertManager}.groupBy`, REQUIRED_FIELDS_IN_GROUPBY);\n    }\n  }, [overrideGrouping, setValue, alertManager, groupByCount]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField label=\"Override grouping\" transparent={true} className={styles.switchElement}>\n          <Switch id=\"override-grouping-toggle\" {...register(`contactPoints.${alertManager}.overrideGrouping`)} />\n        </InlineField>\n        {!overrideGrouping && (\n          <Text variant=\"body\" color=\"secondary\">\n            Grouping: <strong>{REQUIRED_FIELDS_IN_GROUPBY.join(', ')}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the default notification policy.\"\n          {...register(`contactPoints.${alertManager}.groupBy`)}\n          invalid={!!errors.contactPoints?.[alertManager]?.groupBy}\n          className={styles.optionalContent}\n        >\n          <Controller\n            rules={{\n              validate: (value: string[]) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                if (value.length === 1 && value[0] === DISABLE_GROUPING) {\n                  return true;\n                }\n                // we need to make sure that the required fields are included\n                const requiredFieldsIncluded = REQUIRED_FIELDS_IN_GROUPBY.every((field) => value.includes(field));\n                if (!requiredFieldsIncluded) {\n                  return `Group by must include ${REQUIRED_FIELDS_IN_GROUPBY.join(', ')}`;\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue(`contactPoints.${alertManager}.groupBy`, [...field.value, opt]);\n                  }}\n                  onChange={(value) => {\n                    return onChange(mapMultiSelectValueToStrings(value));\n                  }}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                  components={{\n                    MultiValueRemove(\n                      props: React.PropsWithChildren<\n                        MultiValueRemoveProps &\n                          Array<SelectableValue<string>> & {\n                            data: {\n                              label: string;\n                              value: string;\n                              isFixed: boolean;\n                            };\n                          }\n                      >\n                    ) {\n                      const { data } = props;\n                      if (data.isFixed) {\n                        return null;\n                      }\n                      return MultiValueRemove(props);\n                    },\n                  }}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            name={`contactPoints.${alertManager}.groupBy`}\n            control={control}\n          />\n        </Field>\n      )}\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField label=\"Override timings\" transparent={true} className={styles.switchElement}>\n          <Switch id=\"override-timings-toggle\" {...register(`contactPoints.${alertManager}.overrideTimings`)} />\n        </InlineField>\n        {!overrideTimings && (\n          <Text variant=\"body\" color=\"secondary\">\n            Group wait: <strong>{groupWaitValue}, </strong>\n            Group interval: <strong>{groupIntervalValue}, </strong>\n            Repeat interval: <strong>{repeatIntervalValue}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideTimings && (\n        <div className={styles.optionalContent}>\n          <RouteTimings alertManager={alertManager} />\n        </div>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  switchElement: css({\n    flexFlow: 'row-reverse',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  optionalContent: css({\n    marginLeft: '49px',\n    marginBottom: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CollapsableSection, Stack, useStyles2 } from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { AlertManagerDataSource } from 'app/features/alerting/unified/utils/datasource';\n\nimport { useContactPointsWithStatus } from '../../../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../../../contact-points/utils';\n\nimport { ContactPointDetails } from './contactPoint/ContactPointDetails';\nimport { ContactPointSelector } from './contactPoint/ContactPointSelector';\nimport { MuteTimingFields } from './route-settings/MuteTimingFields';\nimport { RoutingSettings } from './route-settings/RouteSettings';\n\ninterface AlertManagerManualRoutingProps {\n  alertManager: AlertManagerDataSource;\n}\n\nexport function AlertManagerManualRouting({ alertManager }: AlertManagerManualRoutingProps) {\n  const styles = useStyles2(getStyles);\n\n  const alertManagerName = alertManager.name;\n\n  const [selectedContactPointWithMetadata, setSelectedContactPointWithMetadata] = useState<\n    ContactPointWithMetadata | undefined\n  >();\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const contactPointInForm = watch(`contactPoints.${alertManagerName}.selectedContactPoint`);\n  const { contactPoints } = useContactPointsWithStatus({\n    // we only fetch the contact points with metadata for the first time we render an existing alert rule\n    alertmanager: alertManagerName,\n    skip: Boolean(selectedContactPointWithMetadata),\n  });\n  const contactPointWithMetadata = contactPoints.find((cp) => cp.name === contactPointInForm);\n\n  useEffect(() => {\n    if (contactPointWithMetadata && !selectedContactPointWithMetadata) {\n      onSelectContactPoint(contactPointWithMetadata);\n    }\n  }, [contactPointWithMetadata, selectedContactPointWithMetadata]);\n\n  const onSelectContactPoint = (contactPoint?: ContactPointWithMetadata) => {\n    setSelectedContactPointWithMetadata(contactPoint);\n  };\n\n  const hasRouteSettings =\n    watch(`contactPoints.${alertManagerName}.overrideGrouping`) ||\n    watch(`contactPoints.${alertManagerName}.overrideTimings`) ||\n    watch(`contactPoints.${alertManagerName}.muteTimeIntervals`)?.length > 0;\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <div className={styles.firstAlertManagerLine} />\n        <div className={styles.alertManagerName}>\n          Alertmanager:\n          <img src={alertManager.imgUrl} alt=\"Alert manager logo\" className={styles.img} />\n          {alertManagerName}\n        </div>\n        <div className={styles.secondAlertManagerLine} />\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <ContactPointSelector alertManager={alertManagerName} onSelectContactPoint={onSelectContactPoint} />\n      </Stack>\n      {selectedContactPointWithMetadata?.grafana_managed_receiver_configs && (\n        <ContactPointDetails receivers={selectedContactPointWithMetadata.grafana_managed_receiver_configs} />\n      )}\n      <div className={styles.routingSection}>\n        <CollapsableSection\n          label=\"Muting, grouping and timings (optional)\"\n          isOpen={hasRouteSettings}\n          className={styles.collapsableSection}\n        >\n          <Stack direction=\"column\" gap={1}>\n            <MuteTimingFields alertmanager={alertManagerName} />\n            <RoutingSettings alertManager={alertManagerName} />\n          </Stack>\n        </CollapsableSection>\n      </div>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  firstAlertManagerLine: css({\n    height: 1,\n    width: theme.spacing(4),\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  alertManagerName: css({\n    with: 'fit-content',\n  }),\n  secondAlertManagerLine: css({\n    height: '1px',\n    width: '100%',\n    flex: 1,\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  img: css({\n    marginLeft: theme.spacing(2),\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  }),\n  collapsableSection: css({\n    width: 'fit-content',\n    fontSize: theme.typography.body.fontSize,\n  }),\n  routingSection: css({\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: theme.breakpoints.values.xl,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { AlertmanagerProvider } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { getAlertManagerDataSourcesByPermission } from 'app/features/alerting/unified/utils/datasource';\n\nimport { AlertManagerManualRouting } from './AlertManagerRouting';\n\nexport function SimplifiedRouting() {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const contactPointsInAlert = getValues('contactPoints');\n\n  const allAlertManagersByPermission = getAlertManagerDataSourcesByPermission('notification');\n\n  // We decided to only show internal alert manager for now. Once we want to show external alert managers we can use this code\n  // const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources.concat(\n  //   allAlertManagersByPermission.availableExternalDataSources\n  // );\n\n  const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources;\n\n  const alertManagersDataSourcesWithConfigAPI = alertManagersDataSources.filter((am) => am.hasConfigurationAPI);\n\n  // we merge the selected contact points data for each alert manager, with the alert manager meta data\n  const alertManagersWithSelectedContactPoints = useMemo(\n    () =>\n      alertManagersDataSourcesWithConfigAPI.map((am) => {\n        const selectedContactPoint = contactPointsInAlert ? contactPointsInAlert[am.name] : undefined;\n        return {\n          alertManager: am,\n          selectedContactPoint: selectedContactPoint?.selectedContactPoint ?? '',\n          routeSettings: {\n            muteTimeIntervals: selectedContactPoint?.muteTimeIntervals ?? [],\n            overrideGrouping: selectedContactPoint?.overrideGrouping ?? false,\n            groupBy: selectedContactPoint?.groupBy ?? [],\n            overrideTimings: selectedContactPoint?.overrideTimings ?? false,\n            groupWaitValue: selectedContactPoint?.groupWaitValue ?? '',\n            groupIntervalValue: selectedContactPoint?.groupIntervalValue ?? '',\n            repeatIntervalValue: selectedContactPoint?.repeatIntervalValue ?? '',\n          },\n        };\n      }),\n    [alertManagersDataSourcesWithConfigAPI, contactPointsInAlert]\n  );\n\n  return alertManagersWithSelectedContactPoints.map((alertManagerContactPoint, index) => {\n    return (\n      <AlertmanagerProvider\n        accessType={'notification'}\n        alertmanagerSourceName={alertManagerContactPoint.alertManager.name}\n        key={alertManagerContactPoint.alertManager.name + index}\n      >\n        <AlertManagerManualRouting alertManager={alertManagerContactPoint.alertManager} />\n      </AlertmanagerProvider>\n    );\n  });\n}\n","import { compact } from 'lodash';\nimport { Suspense, lazy } from 'react';\n\nimport { Button, LoadingPlaceholder, Stack, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { alertRuleApi } from 'app/features/alerting/unified/api/alertRuleApi';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Folder, KBObjectArray } from '../../../types/rule-form';\nimport { useGetAlertManagerDataSourcesByPermissionAndConfig } from '../../../utils/datasource';\n\nconst NotificationPreviewByAlertManager = lazy(() => import('./NotificationPreviewByAlertManager'));\n\ninterface NotificationPreviewProps {\n  customLabels: KBObjectArray;\n  alertQueries: AlertQuery[];\n  condition: string | null;\n  folder?: Folder;\n  alertName?: string;\n  alertUid?: string;\n}\n\n// TODO the scroll position keeps resetting when we preview\n// this is to be expected because the list of routes dissapears as we start the request but is very annoying\nexport const NotificationPreview = ({\n  alertQueries,\n  customLabels,\n  condition,\n  folder,\n  alertName,\n  alertUid,\n}: NotificationPreviewProps) => {\n  const disabled = !condition || !folder;\n\n  const previewEndpoint = alertRuleApi.endpoints.preview;\n\n  const [trigger, { data = [], isLoading, isUninitialized: previewUninitialized }] = previewEndpoint.useMutation();\n\n  // potential instances are the instances that are going to be routed to the notification policies\n  // convert data to list of labels: are the representation of the potential instances\n  const potentialInstances = compact(data.flatMap((label) => label?.labels));\n\n  const onPreview = () => {\n    if (!folder || !condition) {\n      return;\n    }\n\n    // Get the potential labels given the alert queries, the condition and the custom labels (autogenerated labels are calculated on the BE side)\n    trigger({\n      alertQueries: alertQueries,\n      condition: condition,\n      customLabels: customLabels,\n      folder: folder,\n      alertName: alertName,\n      alertUid: alertUid,\n    });\n  };\n\n  //  Get alert managers's data source information\n  const alertManagerDataSources = useGetAlertManagerDataSourcesByPermissionAndConfig('notification');\n\n  const onlyOneAM = alertManagerDataSources.length === 1;\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"flex-start\" justifyContent=\"space-between\">\n        <Stack direction=\"column\" gap={1}>\n          <Text element=\"h5\">\n            <Trans i18nKey=\"alerting.notification-preview.title\">Alert instance routing preview</Trans>\n          </Text>\n          {isLoading && previewUninitialized && (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.common.loading\">Loading...</Trans>\n            </Text>\n          )}\n          {previewUninitialized ? (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.notification-preview.uninitialized\">\n                When you have your folder selected and your query and labels are configured, click &quot;Preview\n                routing&quot; to see the results here.\n              </Trans>\n            </Text>\n          ) : (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.notification-preview.initialized\">\n                Based on the labels added, alert instances are routed to the following notification policies. Expand\n                each notification policy below to view more details.\n              </Trans>\n            </Text>\n          )}\n        </Stack>\n        <Button icon=\"sync\" variant=\"secondary\" type=\"button\" onClick={onPreview} disabled={disabled}>\n          <Trans i18nKey=\"alerting.notification-preview.preview-routing\">Preview routing</Trans>\n        </Button>\n      </Stack>\n      {!isLoading && !previewUninitialized && potentialInstances.length > 0 && (\n        <Suspense fallback={<LoadingPlaceholder text=\"Loading preview...\" />}>\n          {alertManagerDataSources.map((alertManagerSource) => (\n            <NotificationPreviewByAlertManager\n              alertManagerSource={alertManagerSource}\n              potentialInstances={potentialInstances}\n              onlyOneAM={onlyOneAM}\n              key={alertManagerSource.name}\n            />\n          ))}\n        </Suspense>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Icon, RadioButtonGroup, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { KBObjectArray, RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isGrafanaManagedRuleByType, isGrafanaRecordingRuleByType, isRecordingRuleByType } from '../../utils/rules';\n\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { SimplifiedRouting } from './alert-rule-form/simplifiedRouting/SimplifiedRouting';\nimport { LabelsEditorModal } from './labels/LabelsEditorModal';\nimport { LabelsFieldInForm } from './labels/LabelsFieldInForm';\nimport { NotificationPreview } from './notificaton-preview/NotificationPreview';\n\ntype NotificationsStepProps = {\n  alertUid?: string;\n};\n\nenum RoutingOptions {\n  NotificationPolicy = 'notification policy',\n  ContactPoint = 'contact point',\n}\n\nfunction useHasInternalAlertmanagerEnabled() {\n  const { useGetGrafanaAlertingConfigurationStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetGrafanaAlertingConfigurationStatusQuery(undefined);\n  return (\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.Internal ||\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.All\n  );\n}\n\nexport const NotificationsStep = ({ alertUid }: NotificationsStepProps) => {\n  const { watch, getValues, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [type, manualRouting] = watch(['type', 'manualRouting']);\n  const [showLabelsEditor, setShowLabelsEditor] = useState(false);\n\n  const dataSourceName = watch('dataSourceName') ?? GRAFANA_RULES_SOURCE_NAME;\n  const isGrafanaManaged = isGrafanaManagedRuleByType(type);\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  const simplifiedModeInNotificationsStepEnabled = config.featureToggles.alertingNotificationsStepMode ?? false;\n  const shouldRenderpreview = type === RuleFormType.grafana;\n  const hasInternalAlertmanagerEnabled = useHasInternalAlertmanagerEnabled();\n\n  const shouldAllowSimplifiedRouting =\n    type === RuleFormType.grafana && simplifiedRoutingToggleEnabled && hasInternalAlertmanagerEnabled;\n\n  function onCloseLabelsEditor(labelsToUpdate?: KBObjectArray) {\n    if (labelsToUpdate) {\n      setValue('labels', labelsToUpdate);\n    }\n    setShowLabelsEditor(false);\n  }\n\n  if (isGrafanaRecordingRuleByType(type)) {\n    return null;\n  }\n\n  const step = !isGrafanaManaged ? 4 : 5;\n\n  const switchMode =\n    isGrafanaManaged && simplifiedModeInNotificationsStepEnabled\n      ? {\n          isAdvancedMode: !manualRouting,\n          setAdvancedMode: (isAdvanced: boolean) => {\n            setValue('editorSettings.simplifiedNotificationEditor', !isAdvanced);\n            setValue('manualRouting', !isAdvanced);\n          },\n        }\n      : undefined;\n  const title = isRecordingRuleByType(type)\n    ? 'Add labels'\n    : isGrafanaManaged\n      ? 'Configure notifications'\n      : 'Configure labels and notifications';\n\n  return (\n    <RuleEditorSection\n      stepNo={step}\n      title={title}\n      description={\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          {isRecordingRuleByType(type) ? (\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              Add labels to help you better manage your recording rules.\n            </Text>\n          ) : (\n            shouldAllowSimplifiedRouting && (\n              <Text variant=\"bodySmall\" color=\"secondary\">\n                Select who should receive a notification when an alert rule fires.\n              </Text>\n            )\n          )}\n        </Stack>\n      }\n      switchMode={switchMode}\n      fullWidth\n    >\n      {!isGrafanaManaged && (\n        <>\n          <LabelsFieldInForm onEditClick={() => setShowLabelsEditor(true)} />\n          <LabelsEditorModal\n            isOpen={showLabelsEditor}\n            onClose={onCloseLabelsEditor}\n            dataSourceName={dataSourceName}\n            initialLabels={getValues('labels')}\n          />\n        </>\n      )}\n      {shouldAllowSimplifiedRouting && (\n        <div className={styles.configureNotifications}>\n          <Text element=\"h5\">Recipient</Text>\n        </div>\n      )}\n      {shouldAllowSimplifiedRouting ? ( // when simplified routing is enabled and is grafana rule\n        simplifiedModeInNotificationsStepEnabled ? ( // simplified mode is enabled\n          <ManualAndAutomaticRoutingSimplified alertUid={alertUid} />\n        ) : (\n          // simplified mode is disabled\n          <ManualAndAutomaticRouting alertUid={alertUid} />\n        )\n      ) : // when simplified routing is not enabled, render the notification preview as we did before\n      shouldRenderpreview ? (\n        <AutomaticRooting alertUid={alertUid} />\n      ) : null}\n    </RuleEditorSection>\n  );\n};\n\n/**\n * Preconditions:\n * - simplified routing is enabled\n * - the alert rule is a grafana rule\n *\n * This component will render the switch between the select contact point routing and the notification policy routing.\n * It also renders the section body of the NotificationsStep, depending on the routing option selected.\n * If select contact point routing is selected, it will render the SimplifiedRouting component.\n * If notification policy routing is selected, it will render the AutomaticRouting component.\n *\n */\nfunction ManualAndAutomaticRouting({ alertUid }: { alertUid?: string }) {\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [manualRouting] = watch(['manualRouting']);\n\n  const routingOptions = [\n    { label: 'Select contact point', value: RoutingOptions.ContactPoint },\n    { label: 'Use notification policy', value: RoutingOptions.NotificationPolicy },\n  ];\n\n  const onRoutingOptionChange = (option: RoutingOptions) => {\n    setValue('manualRouting', option === RoutingOptions.ContactPoint);\n  };\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\">\n        <RadioButtonGroup\n          data-testid={manualRouting ? 'routing-options-contact-point' : 'routing-options-notification-policy'}\n          options={routingOptions}\n          value={manualRouting ? RoutingOptions.ContactPoint : RoutingOptions.NotificationPolicy}\n          onChange={onRoutingOptionChange}\n          className={styles.routingOptions}\n        />\n      </Stack>\n\n      <RoutingOptionDescription manualRouting={manualRouting} />\n\n      {manualRouting ? <SimplifiedRouting /> : <AutomaticRooting alertUid={alertUid} />}\n    </Stack>\n  );\n}\n\n/**\n * Preconditions:\n * - simplified routing is enabled\n * - simple mode for notifications step is enabled\n * - the alert rule is a grafana rule\n *\n * This component will render the switch between the select contact point routing and the notification policy routing.\n * It also renders the section body of the NotificationsStep, depending on the routing option selected.\n * If select contact point routing is selected, it will render the SimplifiedRouting component.\n * If notification policy routing is selected, it will render the AutomaticRouting component.\n *\n */\nfunction ManualAndAutomaticRoutingSimplified({ alertUid }: { alertUid?: string }) {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const [manualRouting] = watch(['manualRouting']);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <RoutingOptionDescription manualRouting={manualRouting} />\n\n      {manualRouting ? <SimplifiedRouting /> : <AutomaticRooting alertUid={alertUid} />}\n    </Stack>\n  );\n}\n\ninterface AutomaticRootingProps {\n  alertUid?: string;\n}\n\nfunction AutomaticRooting({ alertUid }: AutomaticRootingProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const [labels, queries, condition, folder, alertName] = watch([\n    'labels',\n    'queries',\n    'condition',\n    'folder',\n    'name',\n    'manualRouting',\n  ]);\n  return (\n    <NotificationPreview\n      alertQueries={queries}\n      customLabels={labels}\n      condition={condition}\n      folder={folder}\n      alertName={alertName}\n      alertUid={alertUid}\n    />\n  );\n}\n\n// Auxiliar components to build the texts and descriptions in the NotificationsStep\nfunction NeedHelpInfoForNotificationPolicy() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <Stack gap={1} direction=\"column\">\n          <Stack direction=\"column\" gap={0}>\n            <>\n              Firing alert instances are routed to notification policies based on matching labels. The default\n              notification policy matches all alert instances.\n            </>\n          </Stack>\n          <Stack direction=\"column\" gap={0}>\n            <>\n              Custom labels change the way your notifications are routed. First, add labels to your alert rule and then\n              connect them to your notification policy by adding label matchers.\n            </>\n            <a\n              href={`https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/notification-policies/`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <Text color=\"link\">\n                Read about notification policies. <Icon name=\"external-link-alt\" />\n              </Text>\n            </a>\n          </Stack>\n        </Stack>\n      }\n      title=\"Notification routing\"\n    />\n  );\n}\n\nfunction NeedHelpInfoForContactpoint() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <>\n          Select a contact point to notify all recipients in it.\n          <br />\n          <br />\n          Notifications for firing alert instances are grouped based on folder and alert rule name.\n          <br />\n          The wait time before sending the first notification for a new group of alerts is 30 seconds.\n          <br />\n          The waiting time before sending a notification about changes in the alert group after the first notification\n          has been sent is 5 minutes.\n          <br />\n          The wait time before resending a notification that has already been sent successfully is 4 hours.\n          <br />\n          Grouping and wait time values are defined in your default notification policy.\n        </>\n      }\n      externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/\"\n      linkText=\"Read more about notifications\"\n      title=\"Notify contact points\"\n    />\n  );\n}\ninterface NotificationsStepDescriptionProps {\n  manualRouting: boolean;\n}\n\nexport const RoutingOptionDescription = ({ manualRouting }: NotificationsStepDescriptionProps) => {\n  return (\n    <Stack alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {manualRouting\n          ? 'Notifications for firing alerts are routed to a selected contact point.'\n          : 'Notifications for firing alerts are routed to contact points based on matching labels and the notification policy tree.'}\n      </Text>\n      {manualRouting ? <NeedHelpInfoForContactpoint /> : <NeedHelpInfoForNotificationPolicy />}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  routingOptions: css({\n    width: 'fit-content',\n  }),\n  configureNotifications: css({\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceUid: string;\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\n\nimport {\n  DataFrameJSON,\n  LoadingState,\n  PanelData,\n  dataFrameFromJSON,\n  getDefaultTimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\n\nimport {\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, request.dataSourceUid, RuleFormType.cloudAlerting);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, GRAFANA_RULES_SOURCE_NAME, RuleFormType.grafana);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype AlertRulePreviewResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction fetchAlertRulePreview(\n  request: PreviewRuleRequest,\n  dataSourceUid: string,\n  ruleType: RuleFormType\n): Observable<PreviewRuleResponse> {\n  return withLoadingIndicator({\n    whileLoading: createResponse(ruleType),\n    source: getBackendSrv()\n      .fetch<AlertRulePreviewResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/${dataSourceUid}`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(ruleType, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(ruleType, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\n\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: `${theme.spacing(2)} 0`,\n    }),\n    table: css({\n      flex: '1 1 auto',\n      height: '135px',\n      marginTop: theme.spacing(2),\n      border: `1px solid ${theme.colors.border.medium}`,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { GrafanaTheme2, LoadingState, dateTimeFormatISO } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, Stack, useStyles2 } from '@grafana/ui';\n\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isDataSourceManagedRuleByType } from '../../utils/rules';\n\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: Array<keyof RuleFormValues> = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext<RuleFormValues>();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  if (!type || isDataSourceManagedRuleByType(type)) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n\n  return (\n    <div className={styles.container}>\n      <Stack>\n        {allDataSourcesAvailable && (\n          <Button disabled={!isPreviewAvailable} type=\"button\" variant=\"primary\" onClick={onPreview}>\n            Preview alerts\n          </Button>\n        )}\n        {!allDataSourcesAvailable && (\n          <Alert title=\"Preview is not available\" severity=\"warning\">\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </Stack>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nexport function usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n  const dsSettings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n  if (!dsSettings) {\n    throw new Error(`Cannot find data source settings for ${dataSourceName}`);\n  }\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceUid: dsSettings.uid,\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      marginTop: theme.spacing(2),\n      maxWidth: `${theme.breakpoints.values.xxl}px`,\n    }),\n  };\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { Button, LinkButton, LoadingPlaceholder, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans } from 'app/core/internationalization';\n\nimport { AppChromeUpdate } from '../../../../../../core/components/AppChrome/AppChromeUpdate';\nimport {\n  PostableRulerRuleGroupDTO,\n  RulerRuleDTO,\n  RulerRuleGroupDTO,\n} from '../../../../../../types/unified-alerting-dto';\nimport { alertRuleApi } from '../../../api/alertRuleApi';\nimport { fetchRulerRulesGroup } from '../../../api/ruler';\nimport { useDataSourceFeatures } from '../../../hooks/useCombinedRule';\nimport { useReturnTo } from '../../../hooks/useReturnTo';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL, getDefaultFormValues } from '../../../rule-editor/formDefaults';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { formValuesToRulerGrafanaRuleDTO, getDefaultQueries } from '../../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../../utils/rules';\nimport { FileExportPreview } from '../../export/FileExportPreview';\nimport { GrafanaExportDrawer } from '../../export/GrafanaExportDrawer';\nimport { ExportFormats, HclExportProvider, allGrafanaExportProviders } from '../../export/providers';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { GrafanaEvaluationBehaviorStep } from '../GrafanaEvaluationBehavior';\nimport { GrafanaFolderAndLabelsStep } from '../GrafanaFolderAndLabelsStep';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\n\ninterface ModifyExportRuleFormProps {\n  alertUid?: string;\n  ruleForm?: RuleFormValues;\n}\n\nexport function ModifyExportRuleForm({ ruleForm, alertUid }: ModifyExportRuleFormProps) {\n  const defaultValuesForNewRule: RuleFormValues = useMemo(() => {\n    const defaultRuleType = RuleFormType.grafana;\n\n    return {\n      ...getDefaultFormValues(),\n      condition: 'C',\n      queries: getDefaultQueries(false),\n      type: defaultRuleType,\n      evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL,\n    };\n  }, []);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues: ruleForm ?? defaultValuesForNewRule,\n    shouldFocusError: true,\n  });\n\n  const existing = Boolean(ruleForm);\n  const notifyApp = useAppNotification();\n  const { returnTo } = useReturnTo('/alerting/list');\n\n  const [exportData, setExportData] = useState<RuleFormValues | undefined>(undefined);\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n\n  const onInvalid = (): void => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  const submit = (exportData: RuleFormValues | undefined) => {\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      return;\n    }\n    setExportData(exportData);\n  };\n\n  const onClose = useCallback(() => {\n    setExportData(undefined);\n  }, [setExportData]);\n\n  const actionButtons = [\n    <LinkButton href={returnTo} key=\"cancel\" size=\"sm\" variant=\"secondary\" onClick={() => submit(undefined)}>\n      <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n    </LinkButton>,\n    <Button key=\"export-rule\" size=\"sm\" onClick={formAPI.handleSubmit((formValues) => submit(formValues), onInvalid)}>\n      Export\n    </Button>,\n  ];\n\n  return (\n    <>\n      <FormProvider {...formAPI}>\n        <AppChromeUpdate actions={actionButtons} />\n        <form onSubmit={(e) => e.preventDefault()}>\n          <div>\n            <Stack direction=\"column\" gap={3}>\n              {/* Step 1 */}\n              <AlertRuleNameAndMetric />\n              {/* Step 2 */}\n              <QueryAndExpressionsStep editingExistingRule={existing} onDataChange={checkAlertCondition} />\n              {/* Step 3-4-5 */}\n              <GrafanaFolderAndLabelsStep />\n\n              {/* Step 4 & 5 */}\n              <GrafanaEvaluationBehaviorStep existing={Boolean(existing)} enableProvisionedGroups={true} />\n              {/* Notifications step*/}\n              <NotificationsStep alertUid={alertUid} />\n              {/* Annotations only for cloud and Grafana */}\n              <AnnotationsStep />\n            </Stack>\n          </div>\n        </form>\n        {exportData && <GrafanaRuleDesignExporter exportValues={exportData} onClose={onClose} uid={alertUid} />}\n      </FormProvider>\n    </>\n  );\n}\n\nconst useGetGroup = (nameSpaceUID: string, group: string) => {\n  const { dsFeatures } = useDataSourceFeatures(GRAFANA_RULES_SOURCE_NAME);\n\n  const rulerConfig = dsFeatures?.rulerConfig;\n\n  const targetGroup = useAsync(async () => {\n    return rulerConfig ? await fetchRulerRulesGroup(rulerConfig, nameSpaceUID, group) : undefined;\n  }, [rulerConfig, nameSpaceUID, group]);\n\n  return targetGroup;\n};\n\ninterface GrafanaRuleDesignExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid?: string;\n}\nexport const getPayloadToExport = (\n  formValues: RuleFormValues,\n  existingGroup: RulerRuleGroupDTO<RulerRuleDTO> | null | undefined,\n  ruleUid?: string\n): PostableRulerRuleGroupDTO => {\n  const grafanaRuleDto = formValuesToRulerGrafanaRuleDTO(formValues);\n\n  const updatedRule = { ...grafanaRuleDto, grafana_alert: { ...grafanaRuleDto.grafana_alert, uid: ruleUid } };\n  if (existingGroup?.rules) {\n    // we have to update the rule in the group in the same position if it exists, otherwise we have to add it at the end\n    let alreadyExistsInGroup = false;\n    const updatedRules = existingGroup.rules.map((rule: RulerRuleDTO) => {\n      if (isGrafanaRulerRule(rule) && rule.grafana_alert.uid === ruleUid) {\n        alreadyExistsInGroup = true;\n        return updatedRule;\n      } else {\n        return rule;\n      }\n    });\n    if (!alreadyExistsInGroup) {\n      // we have to add the updated rule at the end of the group\n      updatedRules.push(updatedRule);\n    }\n    return {\n      ...existingGroup,\n      rules: updatedRules,\n    };\n  } else {\n    // we have to create a new group with the updated rule\n    return {\n      name: existingGroup?.name ?? '',\n      rules: [updatedRule],\n    };\n  }\n};\n\nconst useGetPayloadToExport = (values: RuleFormValues, ruleUid?: string) => {\n  const rulerGroupDto = useGetGroup(values.folder?.uid ?? '', values.group);\n  const payload: PostableRulerRuleGroupDTO = useMemo(() => {\n    return getPayloadToExport(values, rulerGroupDto?.value, ruleUid);\n  }, [ruleUid, rulerGroupDto, values]);\n  return { payload, loadingGroup: rulerGroupDto.loading };\n};\n\nconst GrafanaRuleDesignExportPreview = ({\n  exportFormat,\n  exportValues,\n  onClose,\n  uid,\n}: GrafanaRuleDesignExportPreviewProps) => {\n  const [getExport, exportData] = alertRuleApi.endpoints.exportModifiedRuleGroup.useMutation();\n  const { loadingGroup, payload } = useGetPayloadToExport(exportValues, uid);\n\n  const nameSpaceUID = exportValues.folder?.uid ?? '';\n\n  useEffect(() => {\n    !loadingGroup && payload.name && getExport({ payload, format: exportFormat, nameSpaceUID });\n  }, [nameSpaceUID, exportFormat, payload, getExport, loadingGroup]);\n\n  if (exportData.isLoading) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `modify-export-${payload.name}-${uid}-${new Date().getTime()}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportData.data ?? ''}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRuleDesignExporterProps {\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid?: string;\n}\n\nexport const GrafanaRuleDesignExporter = memo(({ onClose, exportValues, uid }: GrafanaRuleDesignExporterProps) => {\n  const exportingNewRule = !uid;\n  const initialTab = exportingNewRule ? 'hcl' : 'yaml';\n  const [activeTab, setActiveTab] = useState<ExportFormats>(initialTab);\n  const formatProviders = exportingNewRule ? [HclExportProvider] : Object.values(allGrafanaExportProviders);\n\n  return (\n    <GrafanaExportDrawer\n      title={'Export Group'}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={formatProviders}\n    >\n      <GrafanaRuleDesignExportPreview\n        exportFormat={activeTab}\n        onClose={onClose}\n        exportValues={exportValues}\n        uid={uid}\n      />\n    </GrafanaExportDrawer>\n  );\n});\n\nGrafanaRuleDesignExporter.displayName = 'GrafanaRuleDesignExporter';\n","import { Modal } from '@grafana/ui';\n\nimport { KBObjectArray } from '../../../types/rule-form';\n\nimport { LabelsSubForm } from './LabelsField';\n\nexport interface LabelsEditorModalProps {\n  isOpen: boolean;\n  initialLabels: Array<{\n    key: string;\n    value: string;\n  }>;\n  onClose: (labelsToUodate?: KBObjectArray) => void;\n  dataSourceName: string;\n}\nexport function LabelsEditorModal({ isOpen, onClose, dataSourceName, initialLabels }: LabelsEditorModalProps) {\n  return (\n    <Modal title=\"Edit labels\" closeOnEscape isOpen={isOpen} onDismiss={() => onClose()}>\n      <LabelsSubForm dataSourceName={dataSourceName} onClose={onClose} initialLabels={initialLabels} />\n    </Modal>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\n\nimport { Button, Stack, Text } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleFormValues } from '../../../types/rule-form';\nimport { isRecordingRuleByType } from '../../../utils/rules';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nimport { LabelsInRule } from './LabelsField';\n\ninterface LabelsFieldInFormProps {\n  onEditClick: () => void;\n}\nexport function LabelsFieldInForm({ onEditClick }: LabelsFieldInFormProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const labels = watch('labels');\n  const type = watch('type');\n\n  const isRecordingRule = type ? isRecordingRuleByType(type) : false;\n\n  const text = isRecordingRule\n    ? t('alerting.alertform.labels.recording', 'Add labels to your rule.')\n    : t(\n        'alerting.alertform.labels.alerting',\n        'Add labels to your rule for searching, silencing, or routing to a notification policy.'\n      );\n\n  const hasLabels = Object.keys(labels).length > 0 && labels.some((label) => label.key || label.value);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\" gap={1}>\n        <Text element=\"h5\">Labels</Text>\n        <Stack direction={'row'} gap={1}>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {text}\n          </Text>\n          <NeedHelpInfo\n            contentText=\"The dropdown only displays labels that you have previously used for alerts.\n              Select a label from the options below or type in a new one.\"\n            title=\"Labels\"\n          />\n        </Stack>\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <LabelsInRule labels={labels} />\n        {hasLabels ? (\n          <Button variant=\"secondary\" type=\"button\" onClick={onEditClick} size=\"sm\">\n            Edit labels\n          </Button>\n        ) : (\n          <Stack direction=\"row\" gap={2} alignItems=\"center\">\n            <Text>No labels selected</Text>\n            <Button\n              icon=\"plus\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={onEditClick}\n              size=\"sm\"\n              data-testid=\"add-labels-button\"\n            >\n              Add labels\n            </Button>\n          </Stack>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\n\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { getRulesDataSources } from '../utils/datasource';\n\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useRulesSourcesWithRuler(): {\n  rulesSourcesWithRuler: DataSourceInstanceSettings[];\n  isLoading: boolean;\n} {\n  const [rulesSourcesWithRuler, setRulesSourcesWithRuler] = useState<DataSourceInstanceSettings[]>([]);\n  const [discoverDsFeatures, { isLoading }] = useLazyDiscoverDsFeaturesQuery();\n\n  useEffect(() => {\n    const dataSources = getRulesDataSources();\n    dataSources.forEach(async (ds) => {\n      const { data: dsFeatures } = await discoverDsFeatures({ uid: ds.uid }, true);\n      if (dsFeatures?.rulerConfig) {\n        setRulesSourcesWithRuler((prev) => [...prev, ds]);\n      }\n    });\n  }, [discoverDsFeatures]);\n\n  return { rulesSourcesWithRuler, isLoading };\n}\n","import { DataFrame } from '@grafana/data';\n\nimport { GrafanaAlertState, Labels, isGrafanaAlertState } from '../../../../../types/unified-alerting-dto';\n\ninterface AlertPreviewInstance {\n  state: GrafanaAlertState;\n  info?: string;\n  labels: Labels;\n}\n\ninterface AlertPreview {\n  instances: AlertPreviewInstance[];\n}\n\n// Alerts previews come in a DataFrame format which is more suited for displaying time series data\n// In order to display a list of tags we need to transform DataFrame into set of labels\nexport function mapDataFrameToAlertPreview({ fields }: DataFrame): AlertPreview {\n  const labelFields = fields.filter((field) => !['State', 'Info'].includes(field.name));\n  const stateFieldIndex = fields.findIndex((field) => field.name === 'State');\n  const infoFieldIndex = fields.findIndex((field) => field.name === 'Info');\n\n  const labelIndexes = labelFields.map((labelField) => fields.indexOf(labelField));\n\n  const instanceStatusCount = fields[stateFieldIndex]?.values.length ?? 0;\n\n  const instances: AlertPreviewInstance[] = [];\n\n  for (let index = 0; index < instanceStatusCount; index++) {\n    const labelValues = labelIndexes.map((labelIndex) => [fields[labelIndex].name, fields[labelIndex].values[index]]);\n    const state = fields[stateFieldIndex]?.values?.[index];\n    const info = fields[infoFieldIndex]?.values?.[index];\n\n    if (isGrafanaAlertState(state)) {\n      instances.push({\n        state: state,\n        info: info,\n        labels: Object.fromEntries(labelValues),\n      });\n    }\n  }\n\n  return { instances };\n}\n","import { css } from '@emotion/css';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data/src';\nimport { Icon, TagList, Tooltip, useStyles2 } from '@grafana/ui/src';\n\nimport { labelsToTags } from '../../utils/labels';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\nimport { mapDataFrameToAlertPreview } from './preview';\n\ninterface CloudAlertPreviewProps {\n  preview: DataFrame;\n}\n\nexport function CloudAlertPreview({ preview }: CloudAlertPreviewProps) {\n  const styles = useStyles2(getStyles);\n  const alertPreview = mapDataFrameToAlertPreview(preview);\n\n  return (\n    <table className={styles.table}>\n      <caption>\n        <div>Alerts preview</div>\n        <span>Preview based on the result of running the query for this moment.</span>\n      </caption>\n      <thead>\n        <tr>\n          <th>State</th>\n          <th>Labels</th>\n          <th>Info</th>\n        </tr>\n      </thead>\n      <tbody>\n        {alertPreview.instances.map(({ state, info, labels }, index) => {\n          const instanceTags = labelsToTags(labels);\n\n          return (\n            <tr key={index}>\n              <td>{<AlertStateTag state={state} />}</td>\n              <td>\n                <TagList tags={instanceTags} className={styles.tagList} />\n              </td>\n              <td>\n                {info && (\n                  <Tooltip content={info}>\n                    <Icon name=\"info-circle\" />\n                  </Tooltip>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    margin: theme.spacing(2, 0),\n\n    caption: {\n      captionSide: 'top',\n      color: theme.colors.text.primary,\n\n      '& > span': {\n        fontSize: theme.typography.bodySmall.fontSize,\n        color: theme.colors.text.secondary,\n      },\n    },\n\n    'td, th': {\n      padding: theme.spacing(1, 1),\n    },\n\n    'td + td, th + th': {\n      paddingLeft: theme.spacing(3),\n    },\n\n    'thead th': {\n      '&:nth-child(1)': {\n        width: '80px',\n      },\n\n      '&:nth-child(2)': {\n        width: 'auto',\n      },\n\n      '&:nth-child(3)': {\n        width: '40px',\n      },\n    },\n\n    'td:nth-child(3)': {\n      textAlign: 'center',\n    },\n\n    'tbody tr:nth-child(2n + 1)': {\n      backgroundColor: theme.colors.background.secondary,\n    },\n  }),\n  tagList: css({\n    justifyContent: 'flex-start',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataQuery, DataSourcePluginContextProvider, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PromQuery } from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nimport { CloudAlertPreview } from './CloudAlertPreview';\nimport { usePreview } from './PreviewRule';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n  showPreviewAlertsButton: boolean;\n}\n\nexport const ExpressionEditor = ({\n  value,\n  onChange,\n  dataSourceName,\n  showPreviewAlertsButton = true,\n}: ExpressionEditorProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const dataQuery = mapToQuery({ refId: 'A', hide: false }, value);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  const [alertPreview, onPreview] = usePreview();\n\n  const onRunQueriesClick = async () => {\n    onPreview();\n  };\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const previewLoaded = alertPreview?.data.state === LoadingState.Done;\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  // The Preview endpoint returns the preview as a single-element array of data frames\n  const previewDataFrame = alertPreview?.data?.series?.find((s) => s.name === 'evaluation results');\n  // The preview API returns arrays with empty elements when there are no firing alerts\n  const previewHasAlerts = previewDataFrame && previewDataFrame.fields.some((field) => field.values.length > 0);\n\n  return (\n    <>\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <QueryEditor\n          query={dataQuery}\n          queries={[dataQuery]}\n          app={CoreApp.CloudAlerting}\n          onChange={onChangeQuery}\n          onRunQuery={noop}\n          datasource={dataSource}\n        />\n      </DataSourcePluginContextProvider>\n      {showPreviewAlertsButton && (\n        <div className={styles.preview}>\n          <Button\n            type=\"button\"\n            onClick={onRunQueriesClick}\n            disabled={alertPreview?.data.state === LoadingState.Loading}\n          >\n            Preview alerts\n          </Button>\n          {previewLoaded && !previewHasAlerts && (\n            <Alert title=\"Alerts preview\" severity=\"info\" className={styles.previewAlert}>\n              There are no firing alerts for your query.\n            </Alert>\n          )}\n          {previewHasAlerts && <CloudAlertPreview preview={previewDataFrame} />}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  preview: css({\n    padding: theme.spacing(2, 0),\n    maxWidth: `${theme.breakpoints.values.xl}px`,\n  }),\n  previewAlert: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nexport function useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Expression } from '../expressions/Expression';\n\nimport { errorFromCurrentCondition, errorFromPreviewData, warningFromSeries } from './util';\n\ninterface Props {\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  panelData: Record<string, PanelData | undefined>;\n  queries: AlertQuery[];\n  onRemoveExpression: (refId: string) => void;\n  onUpdateRefId: (oldRefId: string, newRefId: string) => void;\n  onUpdateExpressionType: (refId: string, type: ExpressionQueryType) => void;\n  onUpdateQueryExpression: (query: ExpressionQuery) => void;\n}\n\nexport const ExpressionsEditor = ({\n  condition,\n  onSetCondition,\n  queries,\n  panelData,\n  onUpdateRefId,\n  onRemoveExpression,\n  onUpdateExpressionType,\n  onUpdateQueryExpression,\n}: Props) => {\n  const expressionQueries = useMemo(() => {\n    return queries.reduce((acc: ExpressionQuery[], query) => {\n      return isExpressionQuery(query.model) ? acc.concat(query.model) : acc;\n    }, []);\n  }, [queries]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {expressionQueries.map((query) => {\n        const data = panelData[query.refId];\n\n        const isAlertCondition = condition === query.refId;\n\n        const errorFromCondition = data && isAlertCondition ? errorFromCurrentCondition(data) : undefined;\n        const errorFromPreview = data ? errorFromPreviewData(data) : undefined;\n        const error = errorFromPreview || errorFromCondition;\n\n        const warning = data ? warningFromSeries(data.series) : undefined;\n\n        return (\n          <Expression\n            key={query.refId}\n            isAlertCondition={isAlertCondition}\n            data={data}\n            error={error}\n            warning={warning}\n            queries={queries}\n            query={query}\n            onSetCondition={onSetCondition}\n            onRemoveExpression={onRemoveExpression}\n            onUpdateRefId={onUpdateRefId}\n            onUpdateExpressionType={onUpdateExpressionType}\n            onChangeQuery={onUpdateQueryExpression}\n          />\n        );\n      })}\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    gap: theme.spacing(2),\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2, RelativeTimeRange, dateTime, getDefaultRelativeTimeRange } from '@grafana/data';\nimport { relativeToTimeRange } from '@grafana/data/src/datetime/rangeutil';\nimport { Icon, InlineField, RelativeTimeRangePicker, Toggletip, clearButtonStyles, useStyles2 } from '@grafana/ui';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { AlertQueryOptions, MaxDataPointsOption, MinIntervalOption } from './QueryWrapper';\n\nexport interface QueryOptionsProps {\n  query: AlertQuery;\n  queryOptions: AlertQueryOptions;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n  index: number;\n}\n\nexport const QueryOptions = ({\n  query,\n  queryOptions,\n  onChangeTimeRange,\n  onChangeQueryOptions,\n  index,\n}: QueryOptionsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [showOptions, setShowOptions] = useState(false);\n\n  const timeRange = query.relativeTimeRange ? relativeToTimeRange(query.relativeTimeRange) : undefined;\n\n  return (\n    <>\n      <Toggletip\n        content={\n          <div className={styles.queryOptions}>\n            {onChangeTimeRange && (\n              <InlineField label=\"Time Range\">\n                <RelativeTimeRangePicker\n                  timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n                  onChange={(range) => onChangeTimeRange(range, index)}\n                />\n              </InlineField>\n            )}\n            <MaxDataPointsOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n            <MinIntervalOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n          </div>\n        }\n        closeButton={true}\n        placement=\"bottom-start\"\n      >\n        <button type=\"button\" className={styles.actionLink} onClick={() => setShowOptions(!showOptions)}>\n          Options {showOptions ? <Icon name=\"angle-right\" /> : <Icon name=\"angle-down\" />}\n        </button>\n      </Toggletip>\n\n      <div className={styles.staticValues}>\n        <span>{dateTime(timeRange?.from).locale('en').fromNow(true)}</span>\n        {queryOptions.maxDataPoints && <span>, MD = {queryOptions.maxDataPoints}</span>}\n        {queryOptions.minInterval && <span>, Min. Interval = {queryOptions.minInterval}</span>}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    queryOptions: css({\n      '> div': {\n        justifyContent: 'space-between',\n      },\n    }),\n\n    staticValues: css({\n      color: theme.colors.text.secondary,\n      marginRight: theme.spacing(1),\n    }),\n\n    actionLink: css(clearButton, {\n      color: theme.colors.text.link,\n      cursor: 'pointer',\n\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { GraphThresholdsStyleMode, Icon, InlineField, Input, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { logInfo } from 'app/features/alerting/unified/Analytics';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { msToSingleUnitDuration } from '../../utils/time';\nimport { ExpressionStatusIndicator } from '../expressions/ExpressionStatusIndicator';\n\nimport { QueryOptions } from './QueryOptions';\nimport { VizWrapper } from './VizWrapper';\n\nexport const DEFAULT_MAX_DATA_POINTS = 43200;\nexport const DEFAULT_MIN_INTERVAL = '1s';\n\nexport interface AlertQueryOptions {\n  maxDataPoints?: number | undefined;\n  minInterval?: string | undefined;\n}\n\ninterface Props {\n  data: PanelData;\n  error?: Error;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  thresholdsType?: GraphThresholdsStyleMode;\n  onChangeThreshold?: (thresholds: ThresholdsConfig, index: number) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n}\n\nexport const QueryWrapper = ({\n  data,\n  error,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  thresholdsType,\n  onChangeThreshold,\n  condition,\n  onSetCondition,\n  onChangeQueryOptions,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const [dsInstance, setDsInstance] = useState<DataSourceApi>();\n  const defaults = dsInstance?.getDefaultQuery ? dsInstance.getDefaultQuery(CoreApp.UnifiedAlerting) : {};\n\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isSwitchModeEnabled = config.featureToggles.alertingQueryAndExpressionsStepMode ?? false;\n  const isAdvancedMode = isSwitchModeEnabled ? getValues('editorSettings.simplifiedQueryEditor') !== true : true;\n\n  const queryWithDefaults = {\n    ...defaults,\n    ...cloneDeep(query.model),\n  };\n\n  if (queryWithDefaults.datasource && queryWithDefaults.datasource?.uid !== query.datasourceUid) {\n    logInfo('rule query datasource and datasourceUid mismatch', {\n      queryModelDatasourceUid: queryWithDefaults.datasource?.uid || '',\n      queryDatasourceUid: query.datasourceUid,\n      datasourceType: query.model.datasource?.type || 'unknown type',\n    });\n    // There are occasions when the rule query model datasource UID and the datasourceUid do not match\n    // It's unclear as to why this happens, but we need better visibility on why this happens,\n    // so we log when it does, and make the query model datasource UID match the datasource UID\n    // We already elsewhere work under the assumption that the datasource settings are fetched from the datasourceUid property\n\n    // This check is necessary for some few cases where the datasource might be an string instead of an object\n    // see: https://github.com/grafana/grafana/issues/96040 for more context\n    if (typeof queryWithDefaults.datasource === 'object' && Boolean(queryWithDefaults.datasource)) {\n      queryWithDefaults.datasource.uid = query.datasourceUid;\n    } else {\n      // if the datasource is a string, we need to convert it to an object, and populate the fields from the query model\n      queryWithDefaults.datasource = {};\n      queryWithDefaults.datasource.uid = query.datasourceUid;\n      queryWithDefaults.datasource.type = query.model.datasource?.type;\n      queryWithDefaults.datasource.apiVersion = query.model.datasource?.apiVersion;\n    }\n  }\n\n  function SelectingDataSourceTooltip() {\n    const styles = useStyles2(getStyles);\n    return (\n      <div className={styles.dsTooltip}>\n        <Tooltip\n          content={\n            <>\n              Not finding the data source you want? Some data sources are not supported for alerting. Click on the icon\n              for more information.\n            </>\n          }\n        >\n          <Icon\n            name=\"info-circle\"\n            onClick={() =>\n              window.open(\n                ' https://grafana.com/docs/grafana/latest/alerting/fundamentals/data-source-alerting/',\n                '_blank'\n              )\n            }\n          />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  // TODO add a warning label here too when the data looks like time series data and is used as an alert condition\n  function HeaderExtras({\n    query,\n    error,\n    index,\n    isAdvancedMode = true,\n  }: {\n    query: AlertQuery<AlertDataQuery>;\n    error?: Error;\n    index: number;\n    isAdvancedMode?: boolean;\n  }) {\n    const queryOptions: AlertQueryOptions = {\n      maxDataPoints: query.model.maxDataPoints,\n      minInterval: query.model.intervalMs ? msToSingleUnitDuration(query.model.intervalMs) : undefined,\n    };\n    const alertQueryOptions: AlertQueryOptions = {\n      maxDataPoints: queryOptions.maxDataPoints,\n      minInterval: queryOptions.minInterval,\n    };\n\n    const isAlertCondition = condition === query.refId;\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <SelectingDataSourceTooltip />\n        <QueryOptions\n          onChangeTimeRange={onChangeTimeRange}\n          query={query}\n          queryOptions={alertQueryOptions}\n          onChangeQueryOptions={onChangeQueryOptions}\n          index={index}\n        />\n        {isAdvancedMode && (\n          <ExpressionStatusIndicator\n            onSetCondition={() => onSetCondition(query.refId)}\n            isCondition={isAlertCondition}\n          />\n        )}\n      </Stack>\n    );\n  }\n\n  const showVizualisation = data.state !== LoadingState.NotStarted;\n  // ⚠️ the query editors want the entire array of queries passed as \"DataQuery\" NOT \"AlertQuery\"\n  // TypeScript isn't complaining here because the interfaces just happen to be compatible\n  const editorQueries = cloneDeep(queries.map((query) => query.model));\n\n  return (\n    <Stack direction=\"column\" gap={0.5}>\n      <div className={styles.wrapper}>\n        <QueryEditorRow<AlertDataQuery>\n          alerting\n          hideRefId={!isAdvancedMode}\n          hideActionButtons={!isAdvancedMode}\n          collapsable={false}\n          dataSource={dsSettings}\n          onDataSourceLoaded={setDsInstance}\n          onChangeDataSource={(settings) => onChangeDataSource(settings, index)}\n          id={query.refId}\n          index={index}\n          key={query.refId}\n          data={data}\n          query={queryWithDefaults}\n          onChange={(query) => onChangeQuery(query, index)}\n          onRemoveQuery={onRemoveQuery}\n          onAddQuery={() => onDuplicateQuery(cloneDeep(query))}\n          onRunQuery={onRunQueries}\n          queries={editorQueries}\n          renderHeaderExtras={() => (\n            <HeaderExtras query={query} index={index} error={error} isAdvancedMode={isAdvancedMode} />\n          )}\n          app={CoreApp.UnifiedAlerting}\n          hideHideQueryButton={true}\n        />\n      </div>\n      {showVizualisation && <VizWrapper data={data} thresholds={thresholds} thresholdsType={thresholdsType} />}\n    </Stack>\n  );\n};\n\nexport const EmptyQueryWrapper = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nexport function MaxDataPointsOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.maxDataPoints ?? '';\n\n  const onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const maxDataPointsNumber = parseInt(event.target.value, 10);\n\n    const maxDataPoints = isNaN(maxDataPointsNumber) || maxDataPointsNumber === 0 ? undefined : maxDataPointsNumber;\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      labelWidth={24}\n      label=\"Max data points\"\n      tooltip=\"The maximum data points per series. Used directly by some data sources and used in calculation of auto interval. With streaming data this value is used for the rolling buffer.\"\n    >\n      <Input\n        type=\"number\"\n        width={10}\n        placeholder={DEFAULT_MAX_DATA_POINTS.toString()}\n        spellCheck={false}\n        onBlur={onMaxDataPointsBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nexport function MinIntervalOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.minInterval ?? '';\n\n  const onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const minInterval = event.target.value;\n    if (minInterval !== value) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      label=\"Interval\"\n      labelWidth={24}\n      tooltip={\n        <>\n          Interval sent to the data source. Recommended to be set to write frequency, for example <code>1m</code> if\n          your data is written every minute.\n        </>\n      }\n    >\n      <Input\n        type=\"text\"\n        width={10}\n        placeholder={DEFAULT_MIN_INTERVAL}\n        spellCheck={false}\n        onBlur={onMinIntervalBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    label: 'AlertingQueryWrapper',\n    marginBottom: theme.spacing(1),\n    border: `1px solid ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n\n    button: {\n      overflow: 'visible',\n    },\n  }),\n  dsTooltip: css({\n    display: 'flex',\n    alignItems: 'center',\n    '&:hover': {\n      opacity: 0.85,\n      cursor: 'pointer',\n    },\n  }),\n});\n","import { DragDropContext, DropResult, Droppable } from '@hello-pangea/dnd';\nimport { omit } from 'lodash';\nimport { PureComponent, useState } from 'react';\n\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  getDataSourceRef,\n  rangeUtil,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Button, Card, Icon, Stack } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getInstantFromDataQuery } from '../../utils/rule-form';\n\nimport { AlertQueryOptions, EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { errorFromCurrentCondition, errorFromPreviewData, getThresholdsForQueries } from './util';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  data: Record<string, PanelData>;\n  onRunQueries: () => void;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport class QueryRows extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(queries.filter((q) => q.refId !== query.refId));\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeQueryOptions = (options: AlertQueryOptions, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          model: {\n            ...item.model,\n            maxDataPoints: options.maxDataPoints,\n            intervalMs: options.minInterval ? rangeUtil.intervalToMs(options.minInterval) : undefined,\n          },\n        };\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const updatedQueries = queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      const previousSettings = this.getDataSourceSettings(item);\n\n      // Copy model if changing to a datasource of same type.\n      if (settings.type === previousSettings?.type) {\n        return copyModel(item, settings);\n      }\n      return newModel(item, settings);\n    });\n\n    onQueriesChange(updatedQueries);\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return {\n          ...item,\n          refId: query.refId,\n          queryType: item.model.queryType ?? '',\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  render() {\n    const { queries, expressions, condition } = this.props;\n    const thresholdByRefId = getThresholdsForQueries([...queries, ...expressions], condition);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <Stack direction=\"column\">\n                  {queries.map((query, index) => {\n                    const isCondition = this.props.condition === query.refId;\n                    const data: PanelData = this.props.data?.[query.refId] ?? {\n                      series: [],\n                      state: LoadingState.NotStarted,\n                    };\n                    const dsSettings = this.getDataSourceSettings(query);\n                    let error: Error | undefined = undefined;\n                    if (data && isCondition) {\n                      error = errorFromCurrentCondition(data);\n                    } else if (data) {\n                      error = errorFromPreviewData(data);\n                    }\n\n                    if (!dsSettings) {\n                      return (\n                        <DatasourceNotFound\n                          key={`${query.refId}-${index}`}\n                          index={index}\n                          model={query.model}\n                          onUpdateDatasource={() => {\n                            const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n                            if (defaultDataSource) {\n                              this.onChangeDataSource(defaultDataSource, index);\n                            }\n                          }}\n                          onRemoveQuery={() => {\n                            this.onRemoveQuery(query);\n                          }}\n                        />\n                      );\n                    }\n\n                    return (\n                      <QueryWrapper\n                        index={index}\n                        key={query.refId}\n                        dsSettings={dsSettings}\n                        data={data}\n                        error={error}\n                        query={query}\n                        onChangeQuery={this.onChangeQuery}\n                        onRemoveQuery={this.onRemoveQuery}\n                        queries={[...queries, ...expressions]}\n                        onChangeDataSource={this.onChangeDataSource}\n                        onDuplicateQuery={this.props.onDuplicateQuery}\n                        onChangeTimeRange={this.onChangeTimeRange}\n                        onChangeQueryOptions={this.onChangeQueryOptions}\n                        thresholds={thresholdByRefId[query.refId]?.config}\n                        thresholdsType={thresholdByRefId[query.refId]?.mode}\n                        onRunQueries={this.props.onRunQueries}\n                        condition={this.props.condition}\n                        onSetCondition={this.props.onSetCondition}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </Stack>\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nfunction copyModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  return {\n    ...item,\n    model: {\n      ...omit(item.model, 'datasource'),\n      datasource: getDataSourceRef(settings),\n    },\n    datasourceUid: settings.uid,\n  };\n}\n\nfunction newModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  const isInstant = getInstantFromDataQuery(item.model, settings.type);\n  return {\n    refId: item.refId,\n    relativeTimeRange: item.relativeTimeRange,\n    queryType: '',\n    datasourceUid: settings.uid,\n    model: {\n      refId: item.refId,\n      hide: false,\n      datasource: getDataSourceRef(settings),\n      instant: isInstant,\n    },\n  };\n}\n\ninterface DatasourceNotFoundProps {\n  index: number;\n  model: AlertDataQuery;\n  onUpdateDatasource: () => void;\n  onRemoveQuery: () => void;\n}\n\nconst DatasourceNotFound = ({ index, onUpdateDatasource, onRemoveQuery, model }: DatasourceNotFoundProps) => {\n  const refId = model.refId;\n\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n\n  const toggleDetails = () => {\n    setShowDetails((show) => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return (\n    <EmptyQueryWrapper>\n      <QueryOperationRow title={refId} draggable index={index} id={refId} isOpen collapsable={false}>\n        <Card>\n          <Card.Heading>This datasource has been removed</Card.Heading>\n          <Card.Description>\n            The datasource for this query was not found, it was either removed or is not installed correctly.\n          </Card.Description>\n          <Card.Figure>\n            <Icon name=\"question-circle\" />\n          </Card.Figure>\n          <Card.Actions>\n            <Button key=\"update\" variant=\"secondary\" onClick={handleUpdateDatasource}>\n              Update datasource\n            </Button>\n            <Button key=\"remove\" variant=\"destructive\" onClick={onRemoveQuery}>\n              Remove query\n            </Button>\n          </Card.Actions>\n          <Card.SecondaryActions>\n            <Button\n              key=\"details\"\n              onClick={toggleDetails}\n              icon={showDetails ? 'angle-up' : 'angle-down'}\n              fill=\"text\"\n              size=\"sm\"\n            >\n              Show details\n            </Button>\n          </Card.SecondaryActions>\n        </Card>\n        {showDetails && (\n          <div>\n            <pre>\n              <code>{JSON.stringify(model, null, 2)}</code>\n            </pre>\n          </div>\n        )}\n      </QueryOperationRow>\n    </EmptyQueryWrapper>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { QueryRows } from './QueryRows';\n\ninterface Props {\n  panelData: Record<string, PanelData>;\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  onRunQueries: () => void;\n  onChangeQueries: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport const QueryEditor = ({\n  queries,\n  expressions,\n  panelData,\n  onRunQueries,\n  onChangeQueries,\n  onDuplicateQuery,\n  condition,\n  onSetCondition,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <QueryRows\n        data={panelData}\n        queries={queries}\n        expressions={expressions}\n        onRunQueries={onRunQueries}\n        onQueriesChange={onChangeQueries}\n        onDuplicateQuery={onDuplicateQuery}\n        condition={condition}\n        onSetCondition={onSetCondition}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    backgroundColor: theme.colors.background.primary,\n    height: '100%',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2, LoadingState, PanelData } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport { DataSourceType } from 'app/features/alerting/unified/utils/datasource';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { QueryErrorAlert } from 'app/features/query/components/QueryErrorAlert';\nimport { LokiQueryType } from 'app/plugins/datasource/loki/dataquery.gen';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isPromOrLokiQuery } from '../../utils/rule-form';\n\nimport { VizWrapper } from './VizWrapper';\n\nexport interface RecordingRuleEditorProps {\n  queries: AlertQuery[];\n  onChangeQuery: (updatedQueries: AlertQuery[]) => void;\n  runQueries: () => void;\n  panelData: Record<string, PanelData>;\n  dataSourceName: string;\n}\n\nexport const RecordingRuleEditor: FC<RecordingRuleEditorProps> = ({\n  queries,\n  onChangeQuery,\n  runQueries,\n  panelData,\n  dataSourceName,\n}) => {\n  const [data, setData] = useState<PanelData>({\n    series: [],\n    state: LoadingState.NotStarted,\n    timeRange: getTimeSrv().timeRange(),\n  });\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setData(panelData?.[queries[0]?.refId]);\n  }, [panelData, queries]);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const handleChangedQuery = useCallback(\n    (changedQuery: DataQuery) => {\n      if (!isPromOrLokiQuery(changedQuery) || !dataSource) {\n        return;\n      }\n\n      const [query] = queries;\n      const { uid: dataSourceId, type } = dataSource;\n      const isLoki = type === DataSourceType.Loki;\n      const expr = changedQuery.expr;\n\n      const merged = {\n        ...query,\n        ...changedQuery,\n        datasourceUid: dataSourceId,\n        expr,\n        model: {\n          expr,\n          datasource: changedQuery.datasource,\n          refId: changedQuery.refId,\n          editorMode: changedQuery.editorMode,\n          // Instant and range are used by Prometheus queries\n          instant: changedQuery.instant,\n          range: changedQuery.range,\n          // Query type is used by Loki queries\n          // On first render/when creating a recording rule, the query type is not set\n          // unless the user has changed it betwee range/instant. The cleanest way to handle this\n          // is to default to instant, or whatever the changed type is\n          queryType: isLoki ? changedQuery.queryType || LokiQueryType.Instant : changedQuery.queryType,\n          legendFormat: changedQuery.legendFormat,\n        },\n      };\n      onChangeQuery([merged]);\n    },\n    [dataSource, queries, onChangeQuery]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource.components.QueryEditor;\n\n  return (\n    <>\n      {queries.length && (\n        <>\n          <QueryEditor\n            query={queries[0]}\n            queries={queries}\n            app={CoreApp.UnifiedAlerting}\n            onChange={handleChangedQuery}\n            onRunQuery={runQueries}\n            datasource={dataSource}\n          />\n          {(data?.errors || []).map((err) => {\n            return <QueryErrorAlert key={err.message} error={err} />;\n          })}\n        </>\n      )}\n\n      {data && (\n        <div className={styles.vizWrapper}>\n          <VizWrapper data={data} />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  vizWrapper: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n","import { useCallback } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props {\n  disabled?: boolean;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, disabled, ...props }: Props): JSX.Element {\n  const { rulesSourcesWithRuler: dataSourcesWithRuler, isLoading } = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return dataSourcesWithRuler.some(({ uid }) => uid === ds.uid);\n    },\n    [dataSourcesWithRuler]\n  );\n\n  return (\n    <DataSourcePicker\n      disabled={isLoading || disabled}\n      noDefault\n      alerting\n      filter={dataSourceFilter}\n      current={value}\n      {...props}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Field, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { CloudRulesSourcePicker } from '../CloudRulesSourcePicker';\n\nexport interface CloudDataSourceSelectorProps {\n  disabled?: boolean;\n  onChangeCloudDatasource: (datasourceUid: string) => void;\n}\nexport const CloudDataSourceSelector = ({ disabled, onChangeCloudDatasource }: CloudDataSourceSelectorProps) => {\n  const {\n    control,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n  const ruleFormType = watch('type');\n\n  return (\n    <>\n      <div className={styles.flexRow}>\n        {(ruleFormType === RuleFormType.cloudAlerting || ruleFormType === RuleFormType.cloudRecording) && (\n          <Field\n            className={styles.formInput}\n            label={disabled ? 'Data source' : 'Select data source'}\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n          >\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  disabled={disabled}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset expression as they don't need to persist after changing datasources\n                    setValue('expression', '');\n                    onChange(ds?.name ?? null);\n                    onChangeCloudDatasource(ds?.uid ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css({\n    width: '330px',\n    '& + &': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-end',\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceJsonData } from '@grafana/schema';\nimport { RadioButtonGroup, Stack, Text } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/types';\nimport { AccessControlAction } from 'app/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nfunction getAvailableRuleTypes() {\n  const canCreateGrafanaRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleCreate);\n  const canCreateCloudRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalWrite);\n  const defaultRuleType = canCreateGrafanaRules ? RuleFormType.grafana : RuleFormType.cloudAlerting;\n\n  const enabledRuleTypes: RuleFormType[] = [];\n  if (canCreateGrafanaRules) {\n    enabledRuleTypes.push(RuleFormType.grafana);\n  }\n  if (canCreateCloudRules) {\n    enabledRuleTypes.push(RuleFormType.cloudAlerting, RuleFormType.cloudRecording);\n  }\n\n  return { enabledRuleTypes, defaultRuleType };\n}\n\nconst onlyOneDSInQueries = (queries: AlertQuery[]) => {\n  return queries.filter((q) => q.datasourceUid !== ExpressionDatasourceUID).length === 1;\n};\nconst getCanSwitch = ({\n  queries,\n  ruleFormType,\n  rulesSourcesWithRuler,\n}: {\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  ruleFormType: RuleFormType | undefined;\n}) => {\n  // get available rule types\n  const availableRuleTypes = getAvailableRuleTypes();\n\n  // check if we have only one query in queries and if it's a cloud datasource\n  const onlyOneDS = onlyOneDSInQueries(queries);\n  const dataSourceIdFromQueries = queries[0]?.datasourceUid ?? '';\n  const isRecordingRuleType = ruleFormType === RuleFormType.cloudRecording;\n\n  //let's check if we switch to cloud type\n  const canSwitchToCloudRule =\n    !isRecordingRuleType &&\n    onlyOneDS &&\n    rulesSourcesWithRuler.some((dsJsonData) => dsJsonData.uid === dataSourceIdFromQueries);\n\n  const canSwitchToGrafanaRule = !isRecordingRuleType;\n  // check for enabled types\n  const grafanaTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.grafana);\n  const cloudTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.cloudAlerting);\n\n  // can we switch to the other type? (cloud or grafana)\n  const canSwitchFromCloudToGrafana =\n    ruleFormType === RuleFormType.cloudAlerting && grafanaTypeEnabled && canSwitchToGrafanaRule;\n  const canSwitchFromGrafanaToCloud =\n    ruleFormType === RuleFormType.grafana && canSwitchToCloudRule && cloudTypeEnabled && canSwitchToCloudRule;\n\n  return canSwitchFromCloudToGrafana || canSwitchFromGrafanaToCloud;\n};\n\nexport interface SmartAlertTypeDetectorProps {\n  editingExistingRule: boolean;\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  onClickSwitch: () => void;\n}\n\nexport function SmartAlertTypeDetector({\n  editingExistingRule,\n  rulesSourcesWithRuler,\n  queries,\n  onClickSwitch,\n}: SmartAlertTypeDetectorProps) {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const [ruleFormType] = getValues(['type']);\n  const canSwitch = getCanSwitch({ queries, ruleFormType, rulesSourcesWithRuler });\n\n  const options = [\n    { label: 'Grafana-managed', value: RuleFormType.grafana },\n    { label: 'Data source-managed', value: RuleFormType.cloudAlerting },\n  ];\n\n  // if we can't switch to data-source managed, disable it\n  // TODO figure out how to show a popover to the user to indicate _why_ it's disabled\n  const disabledOptions = canSwitch ? [] : [RuleFormType.cloudAlerting];\n\n  return (\n    <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n      <Stack direction=\"column\" gap={0}>\n        <Text variant=\"h5\">Rule type</Text>\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            Select where the alert rule will be managed.\n          </Text>\n          <NeedHelpInfo\n            contentText={\n              <>\n                <Text color=\"primary\" variant=\"h6\">\n                  Grafana-managed alert rules\n                </Text>\n                <p>\n                  Grafana-managed alert rules allow you to create alerts that can act on data from any of our supported\n                  data sources, including having multiple data sources in the same rule. You can also add expressions to\n                  transform your data and set alert conditions. Using images in alert notifications is also supported.\n                </p>\n                <Text color=\"primary\" variant=\"h6\">\n                  Data source-managed alert rules\n                </Text>\n                <p>\n                  Data source-managed alert rules can be used for Grafana Mimir or Grafana Loki data sources which have\n                  been configured to support rule creation. The use of expressions or multiple queries is not supported.\n                </p>\n              </>\n            }\n            externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/alert-rule-types/\"\n            linkText=\"Read about alert rule types\"\n            title=\"Alert rule types\"\n          />\n        </Stack>\n      </Stack>\n      <RadioButtonGroup\n        options={options}\n        disabled={editingExistingRule}\n        disabledOptions={disabledOptions}\n        value={ruleFormType}\n        onChange={onClickSwitch}\n        data-testid=\"rule-type-radio-group\"\n      />\n      {/* editing an existing rule, we just show \"cannot be changed\" */}\n      {editingExistingRule && (\n        <Text color=\"secondary\">The alert rule type cannot be changed for an existing rule.</Text>\n      )}\n      {/* in regular alert creation we tell the user what options they have when using a cloud data source */}\n      {!editingExistingRule && (\n        <>\n          {canSwitch ? (\n            <Text color=\"secondary\">\n              {ruleFormType === RuleFormType.grafana\n                ? 'The data source selected in your query supports alert rule management. Switch to data source-managed if you want the alert rule to be managed by the data source instead of Grafana.'\n                : 'Switch to Grafana-managed to use expressions, multiple queries, images in notifications and various other features.'}\n            </Text>\n          ) : (\n            <Text color=\"secondary\">Based on the selected data sources this alert rule will be Grafana-managed.</Text>\n          )}\n        </>\n      )}\n    </Stack>\n  );\n}\n","import { RuleFormType } from '../../../types/rule-form';\n\ntype FormDescriptions = {\n  sectionTitle: string;\n  helpLabel: string;\n  helpContent: string;\n  helpLink: string;\n};\n\nexport const DESCRIPTIONS: Record<RuleFormType, FormDescriptions> = {\n  [RuleFormType.cloudRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-recording-rules/',\n  },\n  [RuleFormType.grafanaRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-recording-rules/',\n  },\n  [RuleFormType.grafana]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n  [RuleFormType.cloudAlerting]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n};\n","import { useEffect, useState } from 'react';\n\nimport { ReducerID } from '@grafana/data';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { ExpressionQuery } from 'app/features/expressions/types';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { areQueriesTransformableToSimpleCondition } from '../../../rule-editor/formProcessing';\n\nimport { SimpleCondition, getSimpleConditionFromExpressions } from './SimpleCondition';\n\nfunction initializeSimpleCondition(\n  isGrafanaAlertingType: boolean,\n  dataQueries: Array<AlertQuery<AlertDataQuery>>,\n  expressionQueries: Array<AlertQuery<ExpressionQuery>>\n) {\n  if (isGrafanaAlertingType && areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries)) {\n    return getSimpleConditionFromExpressions(expressionQueries);\n  } else {\n    return {\n      whenField: ReducerID.last,\n      evaluator: {\n        params: [0],\n        type: EvalFunction.IsAbove,\n      },\n    };\n  }\n}\nexport function determineAdvancedMode(simplifiedQueryEditor: boolean | undefined, isGrafanaAlertingType: boolean) {\n  return simplifiedQueryEditor === false || !isGrafanaAlertingType;\n}\n\n/*\n  This hook is used mantain the state of the advanced mode, and the simple condition,\n  depending on the editor settings, the alert type, and the queries.\n   */\nexport const useAdvancedMode = (\n  simplifiedQueryEditor: boolean | undefined,\n  isGrafanaAlertingType: boolean,\n  dataQueries: Array<AlertQuery<ExpressionQuery | AlertDataQuery>>,\n  expressionQueries: Array<AlertQuery<ExpressionQuery>>\n) => {\n  const isAdvancedMode = determineAdvancedMode(simplifiedQueryEditor, isGrafanaAlertingType);\n\n  const [simpleCondition, setSimpleCondition] = useState<SimpleCondition>(\n    initializeSimpleCondition(isGrafanaAlertingType, dataQueries, expressionQueries)\n  );\n\n  useEffect(() => {\n    if (isGrafanaAlertingType && !isAdvancedMode) {\n      setSimpleCondition(getSimpleConditionFromExpressions(expressionQueries));\n    }\n  }, [isAdvancedMode, expressionQueries, isGrafanaAlertingType]);\n\n  return { simpleCondition, setSimpleCondition };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { useEffectOnce } from 'react-use';\n\nimport { GrafanaTheme2, getDefaultRelativeTimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  ConfirmModal,\n  Dropdown,\n  Field,\n  Icon,\n  Menu,\n  MenuItem,\n  Stack,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport { Text } from '@grafana/ui/src/components/Text/Text';\nimport { Trans, t } from 'app/core/internationalization';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionDatasourceUID, ExpressionQueryType, expressionTypes } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { useRulesSourcesWithRuler } from '../../../hooks/useRuleSourcesWithRuler';\nimport {\n  areQueriesTransformableToSimpleCondition,\n  isExpressionQueryInAlert,\n} from '../../../rule-editor/formProcessing';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { getDefaultOrFirstCompatibleDataSource } from '../../../utils/datasource';\nimport { PromOrLokiQuery, isPromOrLokiQuery } from '../../../utils/rule-form';\nimport {\n  isCloudAlertingRuleByType,\n  isCloudRecordingRuleByType,\n  isDataSourceManagedRuleByType,\n  isGrafanaAlertingRuleByType,\n  isGrafanaManagedRuleByType,\n} from '../../../utils/rules';\nimport { ExpressionEditor } from '../ExpressionEditor';\nimport { ExpressionsEditor } from '../ExpressionsEditor';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\nimport { QueryEditor } from '../QueryEditor';\nimport { RecordingRuleEditor } from '../RecordingRuleEditor';\nimport { RuleEditorSection } from '../RuleEditorSection';\nimport { errorFromCurrentCondition, errorFromPreviewData, findRenamedDataQueryReferences, refIdExists } from '../util';\n\nimport { CloudDataSourceSelector } from './CloudDataSourceSelector';\nimport { SimpleConditionEditor, SimpleConditionIdentifier, getSimpleConditionFromExpressions } from './SimpleCondition';\nimport { SmartAlertTypeDetector } from './SmartAlertTypeDetector';\nimport { DESCRIPTIONS } from './descriptions';\nimport {\n  addExpressions,\n  addNewDataQuery,\n  addNewExpression,\n  duplicateQuery,\n  optimizeReduceExpression,\n  queriesAndExpressionsReducer,\n  removeExpression,\n  removeExpressions,\n  resetToSimpleCondition,\n  rewireExpressions,\n  setDataQueries,\n  setRecordingRulesQueries,\n  updateExpression,\n  updateExpressionRefId,\n  updateExpressionTimeRange,\n  updateExpressionType,\n} from './reducer';\nimport { useAdvancedMode } from './useAdvancedMode';\nimport { useAlertQueryRunner } from './useAlertQueryRunner';\n\ninterface Props {\n  editingExistingRule: boolean;\n  onDataChange: (error: string) => void;\n}\n\nexport const QueryAndExpressionsStep = ({ editingExistingRule, onDataChange }: Props) => {\n  const {\n    setValue,\n    getValues,\n    watch,\n    formState: { errors },\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const { queryPreviewData, runQueries, cancelQueries, isPreviewLoading, clearPreviewData } = useAlertQueryRunner();\n  const isSwitchModeEnabled = config.featureToggles.alertingQueryAndExpressionsStepMode ?? false;\n\n  const initialState = {\n    queries: getValues('queries'),\n  };\n\n  const [{ queries }, dispatch] = useReducer(queriesAndExpressionsReducer, initialState);\n  const isOptimizeReducerEnabled = config.featureToggles.alertingUIOptimizeReducer ?? false;\n\n  // data queries only\n  const dataQueries = useMemo(() => {\n    return queries.filter((query) => !isExpressionQuery(query.model));\n  }, [queries]);\n\n  // expression queries only\n  const expressionQueries = useMemo(() => {\n    return queries.filter((query) => isExpressionQueryInAlert(query));\n  }, [queries]);\n\n  useEffectOnce(() => {\n    // we only remove or add the reducer(optimize reducer) expression when creating a new alert.\n    // When editing an alert, we assume the user wants to manually adjust expressions and queries for more control and customization.\n\n    if (!editingExistingRule && isOptimizeReducerEnabled) {\n      dispatch(optimizeReduceExpression({ updatedQueries: dataQueries, expressionQueries }));\n    }\n  });\n\n  const [type, condition, dataSourceName, editorSettings] = watch([\n    'type',\n    'condition',\n    'dataSourceName',\n    'editorSettings',\n  ]);\n  //if its a new rule, look at the local storage\n\n  const isGrafanaAlertingType = isGrafanaAlertingRuleByType(type);\n  const isRecordingRuleType = isCloudRecordingRuleByType(type);\n  const isCloudAlertRuleType = isCloudAlertingRuleByType(type);\n  const [showResetModeModal, setShowResetModal] = useState(false);\n\n  const simplifiedQueryInForm = editorSettings?.simplifiedQueryEditor;\n\n  const { simpleCondition, setSimpleCondition } = useAdvancedMode(\n    simplifiedQueryInForm,\n    isGrafanaAlertingType,\n    dataQueries,\n    expressionQueries\n  );\n\n  const simplifiedQueryStep =\n    isSwitchModeEnabled && isGrafanaAlertingType ? getValues('editorSettings.simplifiedQueryEditor') : false;\n\n  // If we switch to simple mode we need to update the simple condition with the data in the queries reducer\n  useEffect(() => {\n    if (simplifiedQueryStep && isGrafanaAlertingType) {\n      setSimpleCondition(getSimpleConditionFromExpressions(expressionQueries));\n    }\n  }, [simplifiedQueryStep, expressionQueries, isGrafanaAlertingType, setSimpleCondition]);\n\n  const { rulesSourcesWithRuler } = useRulesSourcesWithRuler();\n\n  const runQueriesPreview = useCallback(\n    (condition?: string) => {\n      if (isCloudAlertRuleType) {\n        // we will skip preview for cloud rules, these do not have any time series preview\n        // Grafana Managed rules and recording rules do\n        return;\n      }\n      // we need to be sure the condition is set once we switch to simple mode\n      if (simplifiedQueryStep) {\n        setValue('condition', SimpleConditionIdentifier.thresholdId);\n        runQueries(getValues('queries'), SimpleConditionIdentifier.thresholdId);\n      } else {\n        runQueries(getValues('queries'), condition || (getValues('condition') ?? ''));\n      }\n    },\n    [isCloudAlertRuleType, runQueries, getValues, simplifiedQueryStep, setValue]\n  );\n\n  // whenever we update the queries we have to update the form too\n  useEffect(() => {\n    setValue('queries', queries, { shouldValidate: false });\n  }, [queries, runQueries, setValue]);\n\n  const noCompatibleDataSources = getDefaultOrFirstCompatibleDataSource() === undefined;\n\n  const emptyQueries = queries.length === 0;\n\n  // apply some validations and asserts to the results of the evaluation when creating or editing\n  // Grafana-managed alert rules and Grafa-managed recording rules\n  useEffect(() => {\n    if (type && !isGrafanaManagedRuleByType(type)) {\n      return;\n    }\n\n    const currentCondition = getValues('condition');\n    if (!currentCondition) {\n      return;\n    }\n\n    const previewData = queryPreviewData[currentCondition];\n    if (!previewData) {\n      return;\n    }\n\n    const error = errorFromPreviewData(previewData) ?? errorFromCurrentCondition(previewData);\n\n    onDataChange(error?.message || '');\n  }, [queryPreviewData, getValues, onDataChange, type]);\n\n  const handleSetCondition = useCallback(\n    (refId: string | null) => {\n      if (!refId) {\n        return;\n      }\n\n      runQueriesPreview(refId); //we need to run the queries to know if the condition is valid\n\n      setValue('condition', refId);\n    },\n    [runQueriesPreview, setValue]\n  );\n\n  const onUpdateRefId = useCallback(\n    (oldRefId: string, newRefId: string) => {\n      const newRefIdExists = refIdExists(queries, newRefId);\n      // TODO we should set an error and explain what went wrong instead of just refusing to update\n      if (newRefIdExists) {\n        return;\n      }\n\n      dispatch(updateExpressionRefId({ oldRefId, newRefId }));\n\n      // update condition too if refId was updated\n      if (condition === oldRefId) {\n        setValue('condition', newRefId);\n      }\n    },\n    [condition, queries, setValue]\n  );\n\n  const updateExpressionAndDatasource = useSetExpressionAndDataSource();\n\n  const onChangeQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      // Most data sources triggers onChange and onRunQueries consecutively\n      // It means our reducer state is always one step behind when runQueries is invoked\n      // Invocation cycle => onChange -> dispatch(setDataQueries) -> onRunQueries -> setDataQueries Reducer\n      // As a workaround we update form values as soon as possible to avoid stale state\n      // This way we can access up to date queries in runQueriesPreview without waiting for re-render\n      const previousQueries = getValues('queries');\n      const expressionQueries = previousQueries.filter((query) => isExpressionQuery(query.model));\n      setValue('queries', [...updatedQueries, ...expressionQueries], { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      // we only remove or add the reducer(optimize reducer) expression when creating a new alert.\n      // When editing an alert, we assume the user wants to manually adjust expressions and queries for more control and customization.\n      if (!editingExistingRule && isOptimizeReducerEnabled) {\n        dispatch(optimizeReduceExpression({ updatedQueries, expressionQueries }));\n      }\n\n      dispatch(setDataQueries(updatedQueries));\n      dispatch(updateExpressionTimeRange());\n\n      // check if we need to rewire expressions (and which ones)\n      const [oldRefId, newRefId] = findRenamedDataQueryReferences(queries, updatedQueries);\n      if (oldRefId && newRefId) {\n        dispatch(rewireExpressions({ oldRefId, newRefId }));\n      }\n    },\n    [queries, updateExpressionAndDatasource, getValues, setValue, editingExistingRule, isOptimizeReducerEnabled]\n  );\n\n  const onChangeRecordingRulesQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      const query = updatedQueries[0];\n\n      if (!isPromOrLokiQuery(query.model)) {\n        return;\n      }\n\n      const expression = query.model.expr;\n\n      setValue('queries', updatedQueries, { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: updatedQueries, expression }));\n      runQueriesPreview();\n    },\n    [runQueriesPreview, setValue, updateExpressionAndDatasource]\n  );\n\n  // Using dataSourcesWithRuler[0] gives incorrect types - no undefined\n  // Using at(0) provides a safe type with undefined\n  const recordingRuleDefaultDatasource = rulesSourcesWithRuler.at(0);\n\n  useEffect(() => {\n    clearPreviewData();\n    if (type === RuleFormType.cloudRecording) {\n      const expr = getValues('expression');\n\n      if (!recordingRuleDefaultDatasource) {\n        return;\n      }\n\n      const datasourceUid =\n        (editingExistingRule && getDataSourceSrv().getInstanceSettings(dataSourceName)?.uid) ||\n        recordingRuleDefaultDatasource.uid;\n\n      const defaultQuery = {\n        refId: 'A',\n        datasourceUid,\n        queryType: '',\n        relativeTimeRange: getDefaultRelativeTimeRange(),\n        expr,\n        instant: true,\n        model: {\n          refId: 'A',\n          hide: false,\n          expr,\n        },\n      };\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: [defaultQuery], expression: expr }));\n    }\n  }, [type, recordingRuleDefaultDatasource, editingExistingRule, getValues, dataSourceName, clearPreviewData]);\n\n  const onDuplicateQuery = useCallback((query: AlertQuery) => {\n    dispatch(duplicateQuery(query));\n  }, []);\n\n  // update the condition if it's been removed\n  useEffect(() => {\n    if (!refIdExists(queries, condition)) {\n      const lastRefId = queries.at(-1)?.refId ?? null;\n      handleSetCondition(lastRefId);\n    }\n  }, [condition, queries, handleSetCondition]);\n\n  const onClickType = useCallback(\n    (type: ExpressionQueryType) => {\n      dispatch(addNewExpression(type));\n    },\n    [dispatch]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  // Cloud alerts load data from form values\n  // whereas Grafana managed alerts load data from reducer\n  //when data source is changed in the cloud selector we need to update the queries in the reducer\n\n  const onChangeCloudDatasource = useCallback(\n    (datasourceUid: string) => {\n      const newQueries = cloneDeep(queries);\n      newQueries[0].datasourceUid = datasourceUid;\n      setValue('queries', newQueries, { shouldValidate: false });\n\n      updateExpressionAndDatasource(newQueries);\n\n      dispatch(setDataQueries(newQueries));\n    },\n    [queries, setValue, updateExpressionAndDatasource, dispatch]\n  );\n\n  // ExpressionEditor for cloud query needs to update queries in the reducer and in the form\n  // otherwise the value is not updated for Grafana managed alerts\n\n  const onChangeExpression = (value: string) => {\n    const newQueries = cloneDeep(queries);\n\n    if (newQueries[0].model) {\n      if (isPromOrLokiQuery(newQueries[0].model)) {\n        newQueries[0].model.expr = value;\n      } else {\n        // first time we come from grafana-managed type\n        // we need to convert the model to PromOrLokiQuery\n        const promLoki: PromOrLokiQuery = {\n          ...cloneDeep(newQueries[0].model),\n          expr: value,\n        };\n        newQueries[0].model = promLoki;\n      }\n    }\n\n    setValue('queries', newQueries, { shouldValidate: false });\n\n    updateExpressionAndDatasource(newQueries);\n\n    dispatch(setDataQueries(newQueries));\n    runQueriesPreview();\n  };\n\n  const removeExpressionsInQueries = useCallback(() => dispatch(removeExpressions()), [dispatch]);\n\n  const addExpressionsInQueries = useCallback(\n    (expressions: AlertQuery[]) => dispatch(addExpressions(expressions)),\n    [dispatch]\n  );\n\n  // we need to keep track of the previous expressions and condition reference to be able to restore them when switching back to grafana managed\n  const [prevExpressions, setPrevExpressions] = useState<AlertQuery[]>([]);\n  const [prevCondition, setPrevCondition] = useState<string | null>(null);\n\n  const restoreExpressionsInQueries = useCallback(() => {\n    addExpressionsInQueries(prevExpressions);\n  }, [prevExpressions, addExpressionsInQueries]);\n\n  const onClickSwitch = useCallback(() => {\n    const typeInForm = getValues('type');\n    if (typeInForm === RuleFormType.cloudAlerting) {\n      setValue('type', RuleFormType.grafana);\n      setValue('dataSourceName', null); // set data source name back to \"null\"\n\n      prevExpressions.length > 0 && restoreExpressionsInQueries();\n      prevCondition && setValue('condition', prevCondition);\n    } else {\n      setValue('type', RuleFormType.cloudAlerting);\n      // dataSourceName is used only by Mimir/Loki alerting and recording rules\n      // It should be empty for Grafana managed alert rules\n      const newDsName = getDataSourceSrv().getInstanceSettings(queries[0].datasourceUid)?.name;\n      if (newDsName) {\n        setValue('dataSourceName', newDsName);\n      }\n\n      updateExpressionAndDatasource(queries);\n\n      const expressions = queries.filter((query) => query.datasourceUid === ExpressionDatasourceUID);\n      setPrevExpressions(expressions);\n      removeExpressionsInQueries();\n      setPrevCondition(condition);\n    }\n  }, [\n    getValues,\n    setValue,\n    prevExpressions.length,\n    restoreExpressionsInQueries,\n    prevCondition,\n    updateExpressionAndDatasource,\n    queries,\n    removeExpressionsInQueries,\n    condition,\n  ]);\n\n  const { sectionTitle, helpLabel, helpContent, helpLink } = DESCRIPTIONS[type ?? RuleFormType.grafana];\n\n  if (!type) {\n    return null;\n  }\n  const switchMode =\n    isGrafanaAlertingType && isSwitchModeEnabled\n      ? {\n          isAdvancedMode: !simplifiedQueryStep,\n          setAdvancedMode: (isAdvanced: boolean) => {\n            if (!getValues('editorSettings.simplifiedQueryEditor')) {\n              if (!areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries)) {\n                setShowResetModal(true);\n                return;\n              }\n            }\n            setValue('editorSettings.simplifiedQueryEditor', !isAdvanced);\n          },\n        }\n      : undefined;\n\n  return (\n    <>\n      <RuleEditorSection\n        stepNo={2}\n        title={sectionTitle}\n        fullWidth={true}\n        description={\n          <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              {helpLabel}\n            </Text>\n            <NeedHelpInfo\n              contentText={helpContent}\n              externalLink={helpLink}\n              linkText={'Read more on our documentation website'}\n              title={helpLabel}\n            />\n          </Stack>\n        }\n        switchMode={switchMode}\n      >\n        {/* This is the cloud data source selector */}\n        {isDataSourceManagedRuleByType(type) && (\n          <CloudDataSourceSelector onChangeCloudDatasource={onChangeCloudDatasource} disabled={editingExistingRule} />\n        )}\n\n        {/* This is the PromQL Editor for recording rules */}\n        {isRecordingRuleType && dataSourceName && (\n          <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n            <RecordingRuleEditor\n              dataSourceName={dataSourceName}\n              queries={queries}\n              runQueries={() => runQueriesPreview()}\n              onChangeQuery={onChangeRecordingRulesQueries}\n              panelData={queryPreviewData}\n            />\n          </Field>\n        )}\n\n        {/* This is the PromQL Editor for Cloud rules */}\n        {isCloudAlertRuleType && dataSourceName && (\n          <Stack direction=\"column\">\n            <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n              <Controller\n                name=\"expression\"\n                render={({ field: { ref, ...field } }) => {\n                  return (\n                    <ExpressionEditor\n                      {...field}\n                      dataSourceName={dataSourceName}\n                      showPreviewAlertsButton={!isRecordingRuleType}\n                      onChange={onChangeExpression}\n                    />\n                  );\n                }}\n                control={control}\n                rules={{\n                  required: { value: true, message: 'A valid expression is required' },\n                }}\n              />\n            </Field>\n            <SmartAlertTypeDetector\n              editingExistingRule={editingExistingRule}\n              queries={queries}\n              rulesSourcesWithRuler={rulesSourcesWithRuler}\n              onClickSwitch={onClickSwitch}\n            />\n          </Stack>\n        )}\n\n        {/* This is the editor for Grafana managed rules and Grafana managed recording rules */}\n        {isGrafanaManagedRuleByType(type) && (\n          <Stack direction=\"column\">\n            {/* Data Queries */}\n            <QueryEditor\n              queries={dataQueries}\n              expressions={expressionQueries}\n              onRunQueries={() => runQueriesPreview()}\n              onChangeQueries={onChangeQueries}\n              onDuplicateQuery={onDuplicateQuery}\n              panelData={queryPreviewData}\n              condition={condition}\n              onSetCondition={handleSetCondition}\n            />\n            {!simplifiedQueryStep && (\n              <Tooltip content={'You appear to have no compatible data sources'} show={noCompatibleDataSources}>\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(addNewDataQuery());\n                  }}\n                  variant=\"secondary\"\n                  data-testid={selectors.components.QueryTab.addQuery}\n                  disabled={noCompatibleDataSources}\n                  className={styles.addQueryButton}\n                >\n                  Add query\n                </Button>\n              </Tooltip>\n            )}\n            {/* We only show Switch for Grafana managed alerts */}\n            {isGrafanaAlertingType && !simplifiedQueryStep && (\n              <SmartAlertTypeDetector\n                editingExistingRule={editingExistingRule}\n                rulesSourcesWithRuler={rulesSourcesWithRuler}\n                queries={queries}\n                onClickSwitch={onClickSwitch}\n              />\n            )}\n            {/* Expression Queries */}\n            {!simplifiedQueryStep && (\n              <>\n                <Stack direction=\"column\" gap={0}>\n                  <Text element=\"h5\">Expressions</Text>\n                  <Text variant=\"bodySmall\" color=\"secondary\">\n                    Manipulate data returned from queries with math and other operations.\n                  </Text>\n                </Stack>\n\n                <ExpressionsEditor\n                  queries={queries}\n                  panelData={queryPreviewData}\n                  condition={condition}\n                  onSetCondition={handleSetCondition}\n                  onRemoveExpression={(refId) => {\n                    dispatch(removeExpression(refId));\n                  }}\n                  onUpdateRefId={onUpdateRefId}\n                  onUpdateExpressionType={(refId, type) => {\n                    dispatch(updateExpressionType({ refId, type }));\n                  }}\n                  onUpdateQueryExpression={(model) => {\n                    dispatch(updateExpression(model));\n                  }}\n                />\n              </>\n            )}\n            {/* action buttons */}\n            <Stack direction=\"column\">\n              {simplifiedQueryStep && (\n                <SimpleConditionEditor\n                  simpleCondition={simpleCondition}\n                  onChange={setSimpleCondition}\n                  expressionQueriesList={expressionQueries}\n                  dispatch={dispatch}\n                  previewData={queryPreviewData[condition ?? '']}\n                />\n              )}\n              <Stack direction=\"row\">\n                {!simplifiedQueryStep && config.expressionsEnabled && <TypeSelectorButton onClickType={onClickType} />}\n\n                {isPreviewLoading && (\n                  <Button icon=\"spinner\" type=\"button\" variant=\"destructive\" onClick={cancelQueries}>\n                    <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n                  </Button>\n                )}\n                {!isPreviewLoading && (\n                  <Button\n                    data-testid={selectors.components.AlertRules.previewButton}\n                    icon=\"sync\"\n                    type=\"button\"\n                    onClick={() => runQueriesPreview()}\n                    disabled={emptyQueries}\n                  >\n                    {!simplifiedQueryStep\n                      ? t('alerting.queryAndExpressionsStep.preview', 'Preview')\n                      : t('alerting.queryAndExpressionsStep.previewCondition', 'Preview alert rule condition')}\n                  </Button>\n                )}\n              </Stack>\n            </Stack>\n\n            {/* No Queries */}\n            {emptyQueries && (\n              <Alert title=\"No queries or expressions have been configured\" severity=\"warning\">\n                Create at least one query or expression to be alerted on\n              </Alert>\n            )}\n          </Stack>\n        )}\n      </RuleEditorSection>\n\n      <ConfirmModal\n        isOpen={showResetModeModal}\n        title=\"Deactivate advanced options\"\n        body={\n          <div>\n            <Text element=\"p\">\n              <Trans i18nKey=\"alerting.queryAndExpressionsStep.disableAdvancedOptions.text\">\n                The selected queries and expressions cannot be converted to default. If you deactivate advanced options,\n                your query and condition will be reset to default settings.\n              </Trans>\n            </Text>\n            <br />\n          </div>\n        }\n        confirmText=\"Deactivate\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setValue('editorSettings.simplifiedQueryEditor', true);\n          setShowResetModal(false);\n          dispatch(resetToSimpleCondition());\n        }}\n        onDismiss={() => setShowResetModal(false)}\n      />\n    </>\n  );\n};\n\nfunction TypeSelectorButton({ onClickType }: { onClickType: (type: ExpressionQueryType) => void }) {\n  const newMenu = (\n    <Menu>\n      {expressionTypes.map((type) => (\n        <Tooltip key={type.value} content={type.description ?? ''} placement=\"right\">\n          <MenuItem\n            key={type.value}\n            onClick={() => onClickType(type.value ?? ExpressionQueryType.math)}\n            label={type.label ?? ''}\n          />\n        </Tooltip>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={newMenu}>\n      <Button variant=\"secondary\" data-testid={'add-expression-button'}>\n        Add expression\n        <Icon name=\"angle-down\" />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addQueryButton: css({\n    width: 'fit-content',\n  }),\n  helpInfo: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    width: 'fit-content',\n    fontWeight: theme.typography.fontWeightMedium,\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.size.sm,\n    cursor: 'pointer',\n  }),\n  helpInfoText: css({\n    marginLeft: theme.spacing(0.5),\n    textDecoration: 'underline',\n  }),\n  infoLink: css({\n    color: theme.colors.text.link,\n  }),\n});\n\nconst useSetExpressionAndDataSource = () => {\n  const { setValue } = useFormContext<RuleFormValues>();\n\n  return (updatedQueries: AlertQuery[]) => {\n    // update data source name and expression if it's been changed in the queries from the reducer when prom or loki query\n    const query = updatedQueries[0];\n    if (!query) {\n      return;\n    }\n\n    const dataSourceSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    if (!dataSourceSettings) {\n      throw new Error('The Data source has not been defined.');\n    }\n\n    if (isPromOrLokiQuery(query.model)) {\n      const expression = query.model.expr;\n      setValue('expression', expression);\n    }\n  };\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\n\ninterface AlertWarningProps {\n  title: string;\n  children: React.ReactNode;\n}\nexport function AlertWarning({ title, children }: AlertWarningProps) {\n  return (\n    <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n      <p>{children}</p>\n      <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n    </Alert>\n  );\n}\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css({\n    margin: theme.spacing(4),\n  }),\n});\n","import { produce } from 'immer';\nimport { isEqual } from 'lodash';\n\nimport { t } from 'app/core/internationalization';\nimport { EditableRuleIdentifier, RuleGroupIdentifier } from 'app/types/unified-alerting';\nimport { PostableRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { addRuleAction, updateRuleAction } from '../../reducers/ruler/ruleGroups';\nimport { isGrafanaRuleIdentifier, isGrafanaRulerRule } from '../../utils/rules';\nimport { useAsync } from '../useAsync';\n\nimport { useDeleteRuleFromGroup } from './useDeleteRuleFromGroup';\nimport { useProduceNewRuleGroup } from './useProduceNewRuleGroup';\n\n/**\n * This hook will add a single rule to a rule group – a new rule group will be created if it does not already exist.\n */\nexport function useAddRuleToRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  const successMessage = t('alerting.rules.add-rule.success', 'Rule added successfully');\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, rule: PostableRuleDTO, interval?: string) => {\n    const { namespaceName } = ruleGroup;\n\n    // the new rule might have to be created in a new group, pass name and interval (optional) to the action\n    const action = addRuleAction({ rule, interval, groupName: ruleGroup.groupName });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n    const result = upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage },\n    }).unwrap();\n\n    return result;\n  });\n}\n\n/**\n * This hook will update an existing rule within a rule group, does not support moving the rule to another namespace / group\n */\nexport function useUpdateRuleInRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [moveRuleToGroup] = useMoveRuleToRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  const successMessage = t('alerting.rules.update-rule.success', 'Rule updated successfully');\n\n  return useAsync(\n    async (\n      ruleGroup: RuleGroupIdentifier,\n      ruleIdentifier: EditableRuleIdentifier,\n      ruleDefinition: PostableRuleDTO,\n      targetRuleGroup?: RuleGroupIdentifier,\n      interval?: string\n    ) => {\n      const { namespaceName } = ruleGroup;\n      const finalRuleDefinition = copyGrafanaUID(ruleIdentifier, ruleDefinition);\n\n      // check if the existing rule and the form values have the same rule group identifier\n      const sameTargetRuleGroup = isEqual(ruleGroup, targetRuleGroup);\n      if (targetRuleGroup && !sameTargetRuleGroup) {\n        const result = moveRuleToGroup.execute(ruleGroup, targetRuleGroup, ruleIdentifier, ruleDefinition, interval);\n        return result;\n      }\n\n      const action = updateRuleAction({ identifier: ruleIdentifier, rule: finalRuleDefinition });\n      const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n      return upsertRuleGroup({\n        rulerConfig,\n        namespace: namespaceName,\n        payload: newRuleGroupDefinition,\n        notificationOptions: { successMessage },\n      }).unwrap();\n    }\n  );\n}\n\n/**\n * This hook will move an existing rule to another namespace or group. The rule definition can also be modified.\n * For Grafana-managed rules we can perform a single atomic move operation by copying the rule UID from the previous rule definition.\n */\nexport function useMoveRuleToRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [deleteRuleFromGroup] = useDeleteRuleFromGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  const successMessage = t('alerting.rules.update-rule.success', 'Rule updated successfully');\n\n  return useAsync(\n    async (\n      currentRuleGroup: RuleGroupIdentifier,\n      targetRuleGroup: RuleGroupIdentifier,\n      ruleIdentifier: EditableRuleIdentifier,\n      ruleDefinition: PostableRuleDTO,\n      interval?: string\n    ) => {\n      const finalRuleDefinition = copyGrafanaUID(ruleIdentifier, ruleDefinition);\n\n      // 1. add the rule to the new namespace / group / ruler target\n      const addRuleToGroup = addRuleAction({ rule: finalRuleDefinition, interval });\n      const { newRuleGroupDefinition: newTargetGroup, rulerConfig: targetGroupRulerConfig } = await produceNewRuleGroup(\n        targetRuleGroup,\n        addRuleToGroup\n      );\n\n      const result = await upsertRuleGroup({\n        rulerConfig: targetGroupRulerConfig,\n        namespace: targetRuleGroup.namespaceName,\n        payload: newTargetGroup,\n        notificationOptions: { successMessage },\n      }).unwrap();\n\n      // 2. if not Grafana-managed: remove the rule from the existing namespace / group / ruler\n      if (!isGrafanaRuleIdentifier(ruleIdentifier)) {\n        await deleteRuleFromGroup.execute(currentRuleGroup, ruleIdentifier);\n      }\n\n      return result;\n    }\n  );\n}\n\nfunction copyGrafanaUID(ruleIdentifier: EditableRuleIdentifier, ruleDefinition: PostableRuleDTO) {\n  const isGrafanaManagedRuleIdentifier = isGrafanaRuleIdentifier(ruleIdentifier);\n\n  // by copying over the rule UID the backend will perform an atomic move operation\n  // so there is no need for us to manually remove it from the previous group\n  return produce(ruleDefinition, (draft) => {\n    const isGrafanaManagedRuleDefinition = isGrafanaRulerRule(draft);\n\n    if (isGrafanaManagedRuleIdentifier && isGrafanaManagedRuleDefinition) {\n      draft.grafana_alert.uid = ruleIdentifier.uid;\n    }\n  });\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleExportPreviewProps {\n  alertUid: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaRuleExportPreview = ({ alertUid, exportFormat, onClose }: GrafanaRuleExportPreviewProps) => {\n  const { currentData: ruleTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    ruleUid: alertUid,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `${alertUid}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleTextDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRulerExporterProps {\n  onClose: () => void;\n  alertUid: string;\n}\n\nexport const GrafanaRuleExporter = ({ onClose, alertUid }: GrafanaRulerExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleExportPreview alertUid={alertUid} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, VirtualizedSelect, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { useAlertRuleSuggestions } from './useAlertRuleSuggestions';\n\ninterface Props {\n  rulesSourceName: string;\n}\n\nexport const GroupAndNamespaceFields = ({ rulesSourceName }: Props) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n  const { namespaceGroups, isLoading } = useAlertRuleSuggestions(rulesSourceName);\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions: Array<SelectableValue<string>> = useMemo(\n    () =>\n      Array.from(namespaceGroups.keys()).map((namespace) => ({\n        label: namespace,\n        value: namespace,\n      })),\n    [namespaceGroups]\n  );\n\n  const groupOptions: Array<SelectableValue<string>> = useMemo(\n    () => (namespace && namespaceGroups.get(namespace)?.map((group) => ({ label: group, value: group }))) || [],\n    [namespace, namespaceGroups]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value.value);\n              }}\n              options={namespaceOptions}\n              width={42}\n              isLoading={isLoading}\n              disabled={isLoading}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <Controller\n          render={({ field: { ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              options={groupOptions}\n              width={42}\n              onChange={(value) => {\n                setValue('group', value.value ?? '');\n              }}\n              className={style.input}\n              isLoading={isLoading}\n              disabled={isLoading}\n            />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  input: css({\n    width: '330px !important',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, Select, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const CloudEvaluationBehavior = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\">\n      <Field\n        label=\"Pending period\"\n        description='Period during which the threshold condition must be met to trigger an alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n      >\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <Controller\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      {type === RuleFormType.cloudAlerting && dataSourceName && (\n        <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n      )}\n\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n  }),\n  timeUnit: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport function RecordingRulesNameSpaceAndGroupStep() {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const dataSourceName = watch('dataSourceName');\n\n  if (!dataSourceName) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={3}\n      title={'Add namespace and group'}\n      description=\"Select the Namespace and Group for your recording rule.\"\n    >\n      <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n    </RuleEditorSection>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { FormProvider, SubmitErrorHandler, UseFormWatch, useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, ConfirmModal, Spinner, Stack, useStyles2 } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport InfoPausedRule from 'app/features/alerting/unified/components/InfoPausedRule';\nimport {\n  getRuleGroupLocationFromFormValues,\n  getRuleGroupLocationFromRuleWithLocation,\n  isCloudAlertingRuleByType,\n  isCloudRecordingRuleByType,\n  isCloudRulerRule,\n  isGrafanaManagedRuleByType,\n  isGrafanaRulerRule,\n  isGrafanaRulerRulePaused,\n  isRecordingRuleByType,\n} from 'app/features/alerting/unified/utils/rules';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { RuleGroupIdentifier, RuleIdentifier, RuleWithLocation } from 'app/types/unified-alerting';\nimport { PostableRuleGrafanaRuleDTO, RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  LogMessages,\n  logInfo,\n  trackAlertRuleFormCancelled,\n  trackAlertRuleFormError,\n  trackAlertRuleFormSaved,\n  trackNewGrafanaAlertRuleFormCancelled,\n  trackNewGrafanaAlertRuleFormError,\n  trackNewGrafanaAlertRuleFormSavedSuccess,\n} from '../../../Analytics';\nimport { shouldUsePrometheusRulesPrimary } from '../../../featureToggles';\nimport { useDeleteRuleFromGroup } from '../../../hooks/ruleGroup/useDeleteRuleFromGroup';\nimport { useAddRuleToRuleGroup, useUpdateRuleInRuleGroup } from '../../../hooks/ruleGroup/useUpsertRuleFromRuleGroup';\nimport { useReturnTo } from '../../../hooks/useReturnTo';\nimport {\n  defaultFormValuesForRuleType,\n  formValuesFromExistingRule,\n  formValuesFromPrefill,\n  translateRouteParamToRuleType,\n} from '../../../rule-editor/formDefaults';\nimport {\n  areQueriesTransformableToSimpleCondition,\n  isExpressionQueryInAlert,\n} from '../../../rule-editor/formProcessing';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport {\n  MANUAL_ROUTING_KEY,\n  SIMPLIFIED_QUERY_EDITOR_KEY,\n  formValuesToRulerGrafanaRuleDTO,\n  formValuesToRulerRuleDTO,\n} from '../../../utils/rule-form';\nimport * as ruleId from '../../../utils/rule-id';\nimport { fromRulerRule, fromRulerRuleAndRuleGroupIdentifier, stringifyIdentifier } from '../../../utils/rule-id';\nimport { createRelativeUrl } from '../../../utils/url';\nimport { GrafanaRuleExporter } from '../../export/GrafanaRuleExporter';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { CloudEvaluationBehavior } from '../CloudEvaluationBehavior';\nimport { GrafanaEvaluationBehaviorStep } from '../GrafanaEvaluationBehavior';\nimport { GrafanaFolderAndLabelsStep } from '../GrafanaFolderAndLabelsStep';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { RecordingRulesNameSpaceAndGroupStep } from '../RecordingRulesNameSpaceAndGroupStep';\nimport { RuleInspector } from '../RuleInspector';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\n\ntype Props = {\n  existing?: RuleWithLocation;\n  prefill?: Partial<RuleFormValues>; // Existing implies we modify existing rule. Prefill only provides default form values\n};\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\n\nexport const AlertRuleForm = ({ existing, prefill }: Props) => {\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [showEditYaml, setShowEditYaml] = useState(false);\n\n  const [deleteRuleFromGroup] = useDeleteRuleFromGroup();\n  const [addRuleToRuleGroup] = useAddRuleToRuleGroup();\n  const [updateRuleInRuleGroup] = useUpdateRuleInRuleGroup();\n\n  const { returnTo } = useReturnTo();\n  const routeParams = useParams<{ type: string; id: string }>();\n  const ruleType = translateRouteParamToRuleType(routeParams.type);\n\n  const uidFromParams = routeParams.id || '';\n\n  const [showDeleteModal, setShowDeleteModal] = useState<boolean>(false);\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    if (existing) {\n      return formValuesFromExistingRule(existing);\n    }\n\n    if (prefill) {\n      return formValuesFromPrefill(prefill);\n    }\n\n    const defaultRuleType = ruleType || RuleFormType.grafana;\n\n    return defaultFormValuesForRuleType(defaultRuleType);\n  }, [existing, prefill, ruleType]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const {\n    handleSubmit,\n    watch,\n    formState: { isSubmitting },\n  } = formAPI;\n\n  const type = watch('type');\n  const grafanaTypeRule = isGrafanaManagedRuleByType(type ?? RuleFormType.grafana);\n\n  const dataSourceName = watch('dataSourceName');\n\n  const showDataSourceDependantStep = Boolean(type && (isGrafanaManagedRuleByType(type) || !!dataSourceName));\n\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  // @todo why is error not propagated to form?\n  const submit = async (values: RuleFormValues, exitOnSave: boolean) => {\n    const { type, evaluateEvery } = values;\n\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      if (!existing && grafanaTypeRule) {\n        // new Grafana-managed rule\n        trackNewGrafanaAlertRuleFormError();\n      }\n      return;\n    }\n\n    trackAlertRuleFormSaved({ formAction: existing ? 'update' : 'create', ruleType: type });\n\n    const ruleDefinition = grafanaTypeRule ? formValuesToRulerGrafanaRuleDTO(values) : formValuesToRulerRuleDTO(values);\n\n    const ruleGroupIdentifier = existing\n      ? getRuleGroupLocationFromRuleWithLocation(existing)\n      : getRuleGroupLocationFromFormValues(values);\n\n    const targetRuleGroupIdentifier = getRuleGroupLocationFromFormValues(values);\n    // @TODO move this to a hook too to make sure the logic here is tested for regressions?\n    if (!existing) {\n      // when creating a new rule, we save the manual routing setting , and editorSettings.simplifiedQueryEditor to the local storage\n      storeInLocalStorageValues(values);\n      // save the rule to the rule group\n      await addRuleToRuleGroup.execute(ruleGroupIdentifier, ruleDefinition, evaluateEvery);\n      // track the new Grafana-managed rule creation in the analytics\n      if (grafanaTypeRule) {\n        const dataQueries = values.queries.filter((query) => !isExpressionQuery(query.model));\n        const expressionQueries = values.queries.filter((query) => isExpressionQueryInAlert(query));\n        trackNewGrafanaAlertRuleFormSavedSuccess({\n          simplifiedQueryEditor: values.editorSettings?.simplifiedQueryEditor ?? false,\n          simplifiedNotificationEditor: values.editorSettings?.simplifiedNotificationEditor ?? false,\n          canBeTransformedToSimpleQuery: areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries),\n        });\n      }\n    } else {\n      // when updating an existing rule\n      const ruleIdentifier = fromRulerRuleAndRuleGroupIdentifier(ruleGroupIdentifier, existing.rule);\n      await updateRuleInRuleGroup.execute(\n        ruleGroupIdentifier,\n        ruleIdentifier,\n        ruleDefinition,\n        targetRuleGroupIdentifier,\n        evaluateEvery\n      );\n    }\n\n    const { dataSourceName, namespaceName, groupName } = targetRuleGroupIdentifier;\n    if (exitOnSave) {\n      const returnToUrl = returnTo || getReturnToUrl(targetRuleGroupIdentifier, ruleDefinition);\n\n      locationService.push(returnToUrl);\n      return;\n    } else {\n      // we stay in the same page\n\n      // Cloud Ruler rules identifier changes on update due to containing rule name and hash components\n      // After successful update we need to update the URL to avoid displaying 404 errors\n      if (isCloudRulerRule(ruleDefinition)) {\n        const updatedRuleIdentifier = fromRulerRule(dataSourceName, namespaceName, groupName, ruleDefinition);\n        locationService.replace(`/alerting/${encodeURIComponent(stringifyIdentifier(updatedRuleIdentifier))}/edit`);\n      }\n    }\n  };\n\n  const deleteRule = async () => {\n    if (existing) {\n      const ruleGroupIdentifier = getRuleGroupLocationFromRuleWithLocation(existing);\n      const ruleIdentifier = fromRulerRuleAndRuleGroupIdentifier(ruleGroupIdentifier, existing.rule);\n\n      await deleteRuleFromGroup.execute(ruleGroupIdentifier, ruleIdentifier);\n      locationService.replace(returnTo ?? '/alerting/list');\n    }\n  };\n\n  const onInvalid: SubmitErrorHandler<RuleFormValues> = (errors): void => {\n    trackAlertRuleFormError({\n      grafana_version: config.buildInfo.version,\n      org_id: contextSrv.user.orgId,\n      user_id: contextSrv.user.id,\n      error: Object.keys(errors).toString(),\n      formAction: existing ? 'update' : 'create',\n    });\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const cancelRuleCreation = () => {\n    logInfo(LogMessages.cancelSavingAlertRule);\n    trackAlertRuleFormCancelled({ formAction: existing ? 'update' : 'create' });\n    if (!existing && grafanaTypeRule) {\n      // new Grafana-managed rule\n      trackNewGrafanaAlertRuleFormCancelled();\n    }\n    locationService.getHistory().goBack();\n  };\n\n  const actionButtons = (\n    <Stack justifyContent=\"flex-end\" alignItems=\"center\">\n      {existing && (\n        <Button\n          data-testid=\"save-rule\"\n          variant=\"primary\"\n          type=\"button\"\n          size=\"sm\"\n          onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n          disabled={isSubmitting}\n        >\n          {isSubmitting && <Spinner className={styles.buttonSpinner} inline={true} />}\n          Save rule\n        </Button>\n      )}\n      <Button\n        data-testid=\"save-rule-and-exit\"\n        variant=\"primary\"\n        type=\"button\"\n        size=\"sm\"\n        onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n        disabled={isSubmitting}\n      >\n        {isSubmitting && <Spinner className={styles.buttonSpinner} inline={true} />}\n        Save rule and exit\n      </Button>\n      <Button variant=\"secondary\" disabled={isSubmitting} type=\"button\" onClick={cancelRuleCreation} size=\"sm\">\n        <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n      </Button>\n      {existing ? (\n        <Button fill=\"outline\" variant=\"destructive\" type=\"button\" onClick={() => setShowDeleteModal(true)} size=\"sm\">\n          Delete\n        </Button>\n      ) : null}\n      {existing && isCortexLokiOrRecordingRule(watch) && (\n        <Button\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => setShowEditYaml(true)}\n          disabled={isSubmitting}\n          size=\"sm\"\n        >\n          Edit YAML\n        </Button>\n      )}\n    </Stack>\n  );\n\n  const isPaused = existing && isGrafanaRulerRule(existing.rule) && isGrafanaRulerRulePaused(existing.rule);\n  if (!type) {\n    return null;\n  }\n  return (\n    <FormProvider {...formAPI}>\n      <AppChromeUpdate actions={actionButtons} />\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <div className={styles.contentOuter}>\n          {isPaused && <InfoPausedRule />}\n          <Stack direction=\"column\" gap={3}>\n            {/* Step 1 */}\n            <AlertRuleNameAndMetric />\n            {/* Step 2 */}\n            <QueryAndExpressionsStep editingExistingRule={!!existing} onDataChange={checkAlertCondition} />\n            {/* Step 3-4-5 */}\n            {showDataSourceDependantStep && (\n              <>\n                {/* Step 3 */}\n                {isGrafanaManagedRuleByType(type) && <GrafanaFolderAndLabelsStep />}\n\n                {isCloudAlertingRuleByType(type) && <CloudEvaluationBehavior />}\n\n                {isCloudRecordingRuleByType(type) && <RecordingRulesNameSpaceAndGroupStep />}\n\n                {/* Step 4 & 5 & 6*/}\n                {isGrafanaManagedRuleByType(type) && (\n                  <GrafanaEvaluationBehaviorStep existing={Boolean(existing)} enableProvisionedGroups={false} />\n                )}\n                {/* Notifications step*/}\n                <NotificationsStep alertUid={uidFromParams} />\n                {/* Annotations only for alerting rules */}\n                {!isRecordingRuleByType(type) && <AnnotationsStep />}\n              </>\n            )}\n          </Stack>\n        </div>\n      </form>\n      {showDeleteModal ? (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete rule\"\n          body=\"Deleting this rule will permanently remove it. Are you sure you want to delete this rule?\"\n          confirmText=\"Yes, delete\"\n          icon=\"exclamation-triangle\"\n          onConfirm={deleteRule}\n          onDismiss={() => setShowDeleteModal(false)}\n        />\n      ) : null}\n      {showEditYaml ? (\n        isGrafanaManagedRuleByType(type) ? (\n          <GrafanaRuleExporter alertUid={uidFromParams} onClose={() => setShowEditYaml(false)} />\n        ) : (\n          <RuleInspector onClose={() => setShowEditYaml(false)} />\n        )\n      ) : null}\n    </FormProvider>\n  );\n};\n\nfunction getReturnToUrl(groupId: RuleGroupIdentifier, rule: RulerRuleDTO | PostableRuleGrafanaRuleDTO) {\n  const { dataSourceName, namespaceName, groupName } = groupId;\n\n  if (prometheusRulesPrimary && isCloudRulerRule(rule)) {\n    const ruleIdentifier = fromRulerRule(dataSourceName, namespaceName, groupName, rule);\n    return createViewLinkFromIdentifier(ruleIdentifier);\n  }\n\n  // TODO We could add namespace and group filters but for GMA the namespace = uid which doesn't work with the filters\n  return '/alerting/list';\n}\n\n// The result of this function is passed to locationService.push()\n// Hence it cannot contain the subpath prefix, so we cannot use createRelativeUrl for it\nfunction createViewLinkFromIdentifier(identifier: RuleIdentifier, returnTo?: string) {\n  const paramId = encodeURIComponent(ruleId.stringifyIdentifier(identifier));\n  const paramSource = encodeURIComponent(identifier.ruleSourceName);\n\n  return createRelativeUrl(`/alerting/${paramSource}/${paramId}/view`, returnTo ? { returnTo } : {});\n}\n\nconst isCortexLokiOrRecordingRule = (watch: UseFormWatch<RuleFormValues>) => {\n  const [ruleType, dataSourceName] = watch(['type', 'dataSourceName']);\n\n  return (ruleType === RuleFormType.cloudAlerting || ruleType === RuleFormType.cloudRecording) && dataSourceName !== '';\n};\n\nfunction storeInLocalStorageValues(values: RuleFormValues) {\n  const { manualRouting, editorSettings } = values;\n\n  if (manualRouting) {\n    localStorage.setItem(MANUAL_ROUTING_KEY, 'true');\n  } else {\n    localStorage.setItem(MANUAL_ROUTING_KEY, 'false');\n  }\n\n  if (editorSettings) {\n    if (editorSettings.simplifiedQueryEditor) {\n      localStorage.setItem(SIMPLIFIED_QUERY_EDITOR_KEY, 'true');\n    } else {\n      localStorage.setItem(SIMPLIFIED_QUERY_EDITOR_KEY, 'false');\n    }\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonSpinner: css({\n    marginRight: theme.spacing(1),\n  }),\n  form: css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  contentOuter: css({\n    background: theme.colors.background.primary,\n    overflow: 'hidden',\n    maxWidth: theme.breakpoints.values.xl,\n    flex: 1,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n  }),\n});\n","import { cloneDeep } from 'lodash';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { RuleIdentifier, RuleWithLocation } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from '../hooks/useCombinedRule';\nimport { generateCopiedName } from '../utils/duplicate';\nimport { stringifyErrorLike } from '../utils/misc';\nimport { rulerRuleToFormValues } from '../utils/rule-form';\nimport { getRuleName, isAlertingRulerRule, isGrafanaRulerRule, isRecordingRulerRule } from '../utils/rules';\nimport { createRelativeUrl } from '../utils/url';\n\nexport function CloneRuleEditor({ sourceRuleId }: { sourceRuleId: RuleIdentifier }) {\n  const { loading, result: rule, error } = useRuleWithLocation({ ruleIdentifier: sourceRuleId });\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading the rule...\" />;\n  }\n\n  if (rule) {\n    const ruleClone = cloneRuleDefinition(rule);\n    const formPrefill = rulerRuleToFormValues(ruleClone);\n\n    return <AlertRuleForm prefill={formPrefill} />;\n  }\n\n  if (error) {\n    return (\n      <Alert title=\"Error\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert\n      title=\"Cannot copy the rule. The rule does not exist\"\n      buttonContent=\"Go back to alert list\"\n      onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n    />\n  );\n}\n\nfunction changeRuleName(rule: RulerRuleDTO, newName: string) {\n  if (isGrafanaRulerRule(rule)) {\n    rule.grafana_alert.title = newName;\n  }\n  if (isAlertingRulerRule(rule)) {\n    rule.alert = newName;\n  }\n\n  if (isRecordingRulerRule(rule)) {\n    rule.record = newName;\n  }\n}\n\nexport function cloneRuleDefinition(rule: RuleWithLocation<RulerRuleDTO>) {\n  const ruleClone = cloneDeep(rule);\n  changeRuleName(\n    ruleClone.rule,\n    generateCopiedName(getRuleName(ruleClone.rule), ruleClone.group.rules.map(getRuleName))\n  );\n\n  if (isGrafanaRulerRule(ruleClone.rule)) {\n    ruleClone.rule.grafana_alert.uid = '';\n\n    // Provisioned alert rules have provisioned alert group which cannot be used in UI\n    if (Boolean(ruleClone.rule.grafana_alert.provenance)) {\n      ruleClone.group = { name: '', rules: ruleClone.group.rules };\n    }\n  }\n\n  return ruleClone;\n}\n","import { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from '../AlertWarning';\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from '../hooks/useCombinedRule';\nimport { useIsRuleEditable } from '../hooks/useIsRuleEditable';\nimport { stringifyErrorLike } from '../utils/misc';\nimport * as ruleId from '../utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n}\n\nexport function ExistingRuleEditor({ identifier }: ExistingRuleEditorProps) {\n  const {\n    loading: loadingAlertRule,\n    result: ruleWithLocation,\n    error,\n  } = useRuleWithLocation({ ruleIdentifier: identifier });\n\n  const ruleSourceName = ruleId.ruleIdentifierToRuleSourceName(identifier);\n\n  const { isEditable, loading: loadingEditable } = useIsRuleEditable(ruleSourceName, ruleWithLocation?.rule);\n\n  const loading = loadingAlertRule || loadingEditable;\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading rule...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to load rule\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!ruleWithLocation) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n\n  return <AlertRuleForm existing={ruleWithLocation} />;\n}\n","import { useCallback } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { NavModelItem } from '@grafana/data';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from '../AlertWarning';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useURLSearchParams } from '../hooks/useURLSearchParams';\nimport { useRulesAccess } from '../utils/accessControlHooks';\nimport * as ruleId from '../utils/rule-id';\nimport { withPageErrorBoundary } from '../withPageErrorBoundary';\n\nimport { CloneRuleEditor } from './CloneRuleEditor';\nimport { ExistingRuleEditor } from './ExistingRuleEditor';\nimport { formValuesFromQueryParams, translateRouteParamToRuleType } from './formDefaults';\n\ntype RuleEditorPathParams = {\n  id?: string;\n  type?: 'recording' | 'alerting' | 'grafana-recording';\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\n// sadly we only get the \"type\" when a new rule is being created, when editing an existing recording rule we can't actually know it from the URL\nconst getPageNav = (identifier?: RuleIdentifier, type?: RuleEditorPathParams['type']) => {\n  if (type === 'recording' || type === 'grafana-recording') {\n    if (identifier) {\n      // this branch should never trigger actually, the type param isn't used when editing rules\n      return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit recording rule' };\n    } else {\n      return { ...defaultPageNav, id: 'alert-rule-add', text: 'New recording rule' };\n    }\n  }\n\n  if (identifier) {\n    // keep this one ambiguous, don't mentiond a specific alert type here\n    return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit rule' };\n  } else {\n    return { ...defaultPageNav, id: 'alert-rule-add', text: 'New alert rule' };\n  }\n};\n\nconst RuleEditor = () => {\n  const { identifier, type } = useRuleEditorPathParams();\n  const { copyFromIdentifier, queryDefaults } = useRuleEditorQueryParams();\n\n  const { canCreateGrafanaRules, canCreateCloudRules, canEditRules } = useRulesAccess();\n\n  const getContent = useCallback(() => {\n    if (!identifier && !canCreateGrafanaRules && !canCreateCloudRules) {\n      return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n    }\n\n    if (identifier && !canEditRules(identifier.ruleSourceName)) {\n      return <AlertWarning title=\"Cannot edit rules\">Sorry! You are not allowed to edit rules.</AlertWarning>;\n    }\n\n    if (identifier) {\n      return <ExistingRuleEditor key={JSON.stringify(identifier)} identifier={identifier} />;\n    }\n\n    if (copyFromIdentifier) {\n      return <CloneRuleEditor sourceRuleId={copyFromIdentifier} />;\n    }\n    // new alert rule\n    return <AlertRuleForm prefill={queryDefaults} />;\n  }, [canCreateCloudRules, canCreateGrafanaRules, canEditRules, copyFromIdentifier, identifier, queryDefaults]);\n\n  return (\n    <AlertingPageWrapper navId=\"alert-list\" pageNav={getPageNav(identifier, type)}>\n      {getContent()}\n    </AlertingPageWrapper>\n  );\n};\n\n// The pageNav property makes it difficult to only rely on AlertingPageWrapper\n// to catch errors.\nexport default withPageErrorBoundary(RuleEditor);\n\nfunction useRuleEditorPathParams() {\n  const params = useParams<RuleEditorPathParams>();\n  const { type } = params;\n  const id = ruleId.getRuleIdFromPathname(params);\n  const identifier = ruleId.tryParse(id, true);\n\n  return { identifier, type };\n}\n\nfunction useRuleEditorQueryParams() {\n  const { type } = useParams<RuleEditorPathParams>();\n\n  const [searchParams] = useURLSearchParams();\n  const copyFromId = searchParams.get('copyFrom') ?? undefined;\n  const copyFromIdentifier = ruleId.tryParse(copyFromId);\n\n  const ruleType = translateRouteParamToRuleType(type);\n\n  const queryDefaults = searchParams.has('defaults')\n    ? formValuesFromQueryParams(searchParams.get('defaults') ?? '', ruleType)\n    : undefined;\n\n  return { copyFromIdentifier, queryDefaults };\n}\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["mapMuteTiming","name","time_intervals","interval","alertmanager","selectProps","data","muteTimingOptions","value","ExportNewGrafanaRulePage","GrafanaModifyExport","id","ruleIdentifier","RuleModifyExport","loading","error","rulerRule","GrafanaModifyExportPage","addTagTypes","timeIntervalsApi","build","queryArg","useLazyGetAlertmanagerConfigurationQuery","useGetMuteTimingListQuery","alertmanagerApi","useLazyListNamespacedTimeIntervalQuery","useCreateNamespacedTimeIntervalMutation","useReplaceNamespacedTimeIntervalMutation","useDeleteNamespacedTimeIntervalMutation","parseK8sTimeInterval","item","metadata","spec","parseAmTimeInterval","provenance","useAlertmanagerIntervals","rest","alertmanager_config","muteTimingsProvenances","useGrafanaAlertmanagerIntervals","useMuteTimings","skip","useK8sApi","getGrafanaTimeIntervals","intervalsResponse","getAlertmanagerTimeIntervals","configApiResponse","namespace","useCreateMuteTiming","createGrafanaTimeInterval","updateConfiguration","useProduceNewAlertmanagerConfig","addToK8sAPI","useAsync","addToAlertmanagerConfiguration","action","useGetMuteTiming","nameToFind","getGrafanaTimeInterval","k8sResponse","getAlertmanagerTimeInterval","amConfigApiResponse","timing","entityName","useUpdateMuteTiming","replaceGrafanaTimeInterval","updateToK8sAPI","originalName","updateToAlertmanagerConfiguration","useDeleteMuteTiming","_updateConfigurationRequestState","deleteGrafanaTimeInterval","deleteFromAlertmanagerAPI","deleteFromK8sAPI","useValidateMuteTiming","getIntervals","skipValidation","config","useSelectableMuteTimings","useDeprecatedEndpoint","deprecatedMuteTimingsResponse","fetchMuteTimings","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","mergeTimeIntervals","alertManagerConfig","isValidStartAndEndTime","startTime","endTime","timeUnit","startDate","endDate","renderTimeIntervals","muteTiming","intervals","index","times","weekdays","days_of_month","months","years","location","weekdayString","daysString","monthsString","yearsString","PromDurationDocs","styles","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","theme","PromDurationInput","props","ref","Input","Icon","getFormStyles","routeTimingsFields","TIMING_OPTIONS_DEFAULTS","recordingRuleNameValidationPattern","type","AlertRuleNameAndMetric","register","watch","errors","ruleFormType","isRecording","isGrafanaRecordingRule","isCloudRecordingRule","recordingLabel","namePlaceholder","FolderSelector","setValue","resetGroup","isCreatingFolder","setIsCreatingFolder","folder","onOpenFolderCreationModal","handleFolderCreation","Stack","Field","Label","field","NestedFolderPicker","uid","title","Text","Button","selectors","FolderCreationModal","onClose","onCreate","getStyles","notifyApp","setTitle","createFolder","onSubmit","Modal","e","GrafanaFolderAndLabelsStep","getValues","showLabelsEditor","setShowLabelsEditor","onCloseLabelsEditor","labelsToUpdate","SectionDescription","NeedHelpInfo","RuleEditorSection","LabelsFieldInForm","LabelsEditorModal","ContactPointDetails","receivers","receiver","pluginMetadata","key","ContactPoint","alertManager","onSelectContactPoint","control","trigger","contactPointInForm","validateContactPoint","onChange","ContactPointSelector","_","LinkToContactPoints","FieldValidationMessage","TextLink","MuteTimingFields","MuteTimingsSelector","RouteTimings","formStyles","groupInterval","REQUIRED_FIELDS_IN_GROUPBY","DEFAULTS_TIMINGS","DISABLE_GROUPING","RoutingSettings","groupByOptions","setGroupByOptions","groupIntervalValue","groupWaitValue","repeatIntervalValue","overrideGrouping","overrideTimings","groupByCount","InlineField","Switch","opt","opts","MultiValue","AlertManagerManualRouting","alertManagerName","selectedContactPointWithMetadata","setSelectedContactPointWithMetadata","contactPoints","useContactPoints","contactPointWithMetadata","cp","contactPoint","hasRouteSettings","CollapsableSection","SimplifiedRouting","contactPointsInAlert","alertManagersDataSourcesWithConfigAPI","am","selectedContactPoint","alertManagerContactPoint","NotificationPreviewByAlertManager","NotificationPreview","alertQueries","customLabels","condition","alertName","alertUid","disabled","previewEndpoint","alertRuleApi","isLoading","previewUninitialized","potentialInstances","label","onPreview","alertManagerDataSources","onlyOneAM","LoadingPlaceholder","alertManagerSource","RoutingOptions","useHasInternalAlertmanagerEnabled","useGetGrafanaAlertingConfigurationStatusQuery","amChoiceStatus","NotificationsStep","manualRouting","dataSourceName","isGrafanaManaged","simplifiedRoutingToggleEnabled","simplifiedModeInNotificationsStepEnabled","shouldRenderpreview","hasInternalAlertmanagerEnabled","shouldAllowSimplifiedRouting","step","switchMode","isAdvanced","ManualAndAutomaticRoutingSimplified","ManualAndAutomaticRouting","AutomaticRooting","routingOptions","onRoutingOptionChange","option","RadioButtonGroup","RoutingOptionDescription","labels","queries","NeedHelpInfoForNotificationPolicy","NeedHelpInfoForContactpoint","isCloudPreviewRequest","request","isGrafanaPreviewRequest","previewAlertRule","fetchAlertRulePreview","dataSourceUid","ruleType","withLoadingIndicator","createResponse","map","catchError","of","toDataQueryError","share","PreviewRuleResult","preview","fieldConfig","width","height","PanelRenderer","fields","PreviewRule","usePreview","allDataSourcesAvailable","useAlertQueriesStatus","isPreviewAvailable","Alert","setPreview","isMounted","useMountedState","values","createPreviewRequest","takeWhile","response","isCompleted","expression","dsSettings","ModifyExportRuleForm","ruleForm","defaultValuesForNewRule","defaultRuleType","formAPI","existing","returnTo","exportData","setExportData","conditionErrorMsg","setConditionErrorMsg","onInvalid","checkAlertCondition","msg","submit","actionButtons","formValues","GrafanaRuleDesignExporter","useGetGroup","nameSpaceUID","group","dsFeatures","rulerConfig","getPayloadToExport","existingGroup","ruleUid","grafanaRuleDto","updatedRule","alreadyExistsInGroup","updatedRules","rule","useGetPayloadToExport","rulerGroupDto","GrafanaRuleDesignExportPreview","exportFormat","exportValues","getExport","loadingGroup","payload","downloadFileName","exportingNewRule","initialTab","activeTab","setActiveTab","formatProviders","isOpen","initialLabels","onEditClick","text","hasLabels","useLazyDiscoverDsFeaturesQuery","featureDiscoveryApi","useRulesSourcesWithRuler","rulesSourcesWithRuler","setRulesSourcesWithRuler","discoverDsFeatures","ds","prev","mapDataFrameToAlertPreview","labelFields","stateFieldIndex","infoFieldIndex","labelIndexes","labelField","instanceStatusCount","instances","labelValues","labelIndex","state","info","CloudAlertPreview","alertPreview","instanceTags","AlertStateTag","TagList","Tooltip","ExpressionEditor","showPreviewAlertsButton","mapToValue","mapToQuery","useQueryMappers","dataQuery","dataSource","onChangeQuery","query","onRunQueriesClick","dsi","errorMessage","previewLoaded","QueryEditor","previewDataFrame","s","previewHasAlerts","DataSourcePluginContextProvider","ExpressionsEditor","onSetCondition","panelData","onUpdateRefId","onRemoveExpression","onUpdateExpressionType","onUpdateQueryExpression","expressionQueries","acc","isAlertCondition","errorFromCondition","warning","Expression","QueryOptions","queryOptions","onChangeTimeRange","onChangeQueryOptions","showOptions","setShowOptions","timeRange","Toggletip","RelativeTimeRangePicker","range","MaxDataPointsOption","options","MinIntervalOption","clearButton","DEFAULT_MAX_DATA_POINTS","DEFAULT_MIN_INTERVAL","QueryWrapper","onChangeDataSource","onRunQueries","onRemoveQuery","onDuplicateQuery","thresholds","thresholdsType","onChangeThreshold","dsInstance","setDsInstance","defaults","isAdvancedMode","queryWithDefaults","SelectingDataSourceTooltip","HeaderExtras","alertQueryOptions","ExpressionStatusIndicator","showVizualisation","editorQueries","QueryEditorRow","settings","VizWrapper","EmptyQueryWrapper","children","onMaxDataPointsBlur","event","maxDataPointsNumber","maxDataPoints","onMinIntervalBlur","minInterval","QueryRows","onQueriesChange","q","itemIndex","updatedQueries","previousSettings","copyModel","newModel","result","startIndex","endIndex","update","removed","expressions","thresholdByRefId","provided","isCondition","DatasourceNotFound","defaultDataSource","isInstant","onUpdateDatasource","model","refId","showDetails","setShowDetails","toggleDetails","show","handleUpdateDatasource","QueryOperationRow","Card","onChangeQueries","RecordingRuleEditor","runQueries","setData","handleChangedQuery","changedQuery","dataSourceId","isLoki","expr","merged","err","QueryErrorAlert","CloudRulesSourcePicker","dataSourcesWithRuler","dataSourceFilter","DataSourcePicker","CloudDataSourceSelector","onChangeCloudDatasource","getAvailableRuleTypes","canCreateGrafanaRules","canCreateCloudRules","enabledRuleTypes","onlyOneDSInQueries","getCanSwitch","availableRuleTypes","onlyOneDS","dataSourceIdFromQueries","isRecordingRuleType","canSwitchToCloudRule","dsJsonData","canSwitchToGrafanaRule","grafanaTypeEnabled","cloudTypeEnabled","canSwitchFromCloudToGrafana","canSwitchFromGrafanaToCloud","SmartAlertTypeDetector","editingExistingRule","onClickSwitch","canSwitch","disabledOptions","DESCRIPTIONS","initializeSimpleCondition","isGrafanaAlertingType","dataQueries","determineAdvancedMode","simplifiedQueryEditor","useAdvancedMode","simpleCondition","setSimpleCondition","QueryAndExpressionsStep","onDataChange","queryPreviewData","cancelQueries","isPreviewLoading","clearPreviewData","useAlertQueryRunner","isSwitchModeEnabled","initialState","dispatch","isOptimizeReducerEnabled","useEffectOnce","editorSettings","isCloudAlertRuleType","showResetModeModal","setShowResetModal","simplifiedQueryInForm","simplifiedQueryStep","runQueriesPreview","SimpleCondition","noCompatibleDataSources","emptyQueries","currentCondition","previewData","handleSetCondition","oldRefId","newRefId","updateExpressionAndDatasource","useSetExpressionAndDataSource","onChangeRecordingRulesQueries","recordingRuleDefaultDatasource","defaultQuery","lastRefId","onClickType","datasourceUid","newQueries","onChangeExpression","promLoki","removeExpressionsInQueries","addExpressionsInQueries","prevExpressions","setPrevExpressions","prevCondition","setPrevCondition","restoreExpressionsInQueries","newDsName","sectionTitle","helpLabel","helpContent","helpLink","TypeSelectorButton","ConfirmModal","newMenu","Menu","MenuItem","Dropdown","AlertWarning","warningStyles","useAddRuleToRuleGroup","produceNewRuleGroup","useProduceNewRuleGroup","upsertRuleGroup","successMessage","ruleGroup","namespaceName","newRuleGroupDefinition","useUpdateRuleInRuleGroup","moveRuleToGroup","useMoveRuleToRuleGroup","ruleDefinition","targetRuleGroup","finalRuleDefinition","copyGrafanaUID","sameTargetRuleGroup","deleteRuleFromGroup","useDeleteRuleFromGroup","currentRuleGroup","addRuleToGroup","newTargetGroup","targetGroupRulerConfig","isGrafanaManagedRuleIdentifier","draft","isGrafanaManagedRuleDefinition","GrafanaRuleExportPreview","ruleTextDefinition","isFetching","FileExportPreview","GrafanaRuleExporter","GrafanaExportDrawer","GroupAndNamespaceFields","rulesSourceName","style","getStyle","namespaceGroups","useAlertRuleSuggestions","namespaceOptions","groupOptions","CloudEvaluationBehavior","Select","time","RecordingRulesNameSpaceAndGroupStep","prometheusRulesPrimary","AlertRuleForm","prefill","showEditYaml","setShowEditYaml","addRuleToRuleGroup","updateRuleInRuleGroup","useReturnTo","routeParams","uidFromParams","showDeleteModal","setShowDeleteModal","defaultValues","handleSubmit","isSubmitting","grafanaTypeRule","showDataSourceDependantStep","exitOnSave","evaluateEvery","ruleGroupIdentifier","targetRuleGroupIdentifier","storeInLocalStorageValues","groupName","returnToUrl","getReturnToUrl","updatedRuleIdentifier","deleteRule","cancelRuleCreation","Spinner","isCortexLokiOrRecordingRule","isPaused","AppChromeUpdate","InfoPausedRule","GrafanaEvaluationBehavior","AnnotationsStep","RuleInspector","groupId","createViewLinkFromIdentifier","identifier","paramId","paramSource","CloneRuleEditor","sourceRuleId","ruleClone","cloneRuleDefinition","formPrefill","changeRuleName","newName","ExistingRuleEditor","loadingAlertRule","ruleWithLocation","ruleSourceName","isEditable","loadingEditable","useIsRuleEditable","defaultPageNav","getPageNav","RuleEditor","useRuleEditorPathParams","copyFromIdentifier","queryDefaults","useRuleEditorQueryParams","canEditRules","getContent","AlertingPageWrapper","withPageErrorBoundary","params","searchParams","useURLSearchParams","copyFromId","generateCopiedName","exisitingNames","nonDuplicateName","i"],"sourceRoot":""}