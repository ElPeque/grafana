{"version":3,"file":"influxdbPlugin.d6baf57e0c604cc21899.js","mappings":"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ACA,OACA,YACA,QACA,UACA,SACA,YACA,aACA,WACA,UACA,SACA,QACA,OACA,YACA,eACA,eACA,oBACA,eACA,SACA,WACA,YACA,WACA,kBACA,aACA,aACA,MACA,UACA,UACA,UACA,UACA,SACA,aACA,OACA,WACA,gBACA,WACA,cACA,MACA,SACA,OACA,OACA,OACA,OACA,SACA,QACA,WACA,UACA,SACA,SACA,OACA,UACA,QACA,QACA,cACA,QACA,SACA,SACA,MACA,QACA,UACA,OACA,WACA,WACA,YACA,MACA,QACA,QACA,WACA,SACA,SACA,gBACA,mBACA,cACA,cACA,KACA,SACA,KACA,QACA,SACA,QACA,QACA,cACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,YACA,WACA,OACA,iBACA,kBACA,KACA,UACA,OACA,aACA,MACA,OACA,OACA,MACA,aACA,UACA,OACA,UACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,YACA,iBACA,OACA,OACA,WACA,WACA,OACA,eACA,cACA,gCACA,QACA,WACA,aACA,YACA,aACA,YACA,qBACA,gBACA,MACA,WACA,UACA,MACA,qBACA,YACA,QACA,OACA,UACA,KACA,KACA,WACA,kBACA,SACA,aACA,KACA,QACA,MACA,QACA,UACA,OACA,YACA,eACA,YACA,UACA,YACA,QACA,QACA,OACA,OACA,QACA,aACA,OACA,YACA,aACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,QACA,QACA,MACA,OACA,aACA,SACA,UACA,qBACA,SACA,YACA,YACA,MACA,OACA,SACA,WACA,UACA,WACA,MACA,eACA,WACA,aACA,iBACA,sBACA,mBACA,MACA,WACA,SACA,gBACA,SACA,QACA,aACA,OACA,WACA,UACA,WACA,KACA,WACA,UACA,OACA,OACA,QACA,SACA,SACA,WACA,SACA,QACA,MACA,QACA,WACA,WACA,gBACA,SACA,YACA,UACA,eACA,UACA,UACA,OACA,QACA,QA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","sources":["webpack://grafana/./packages/grafana-sql/src/components/QueryEditorFeatureFlag.utils.ts","webpack://grafana/./packages/grafana-sql/src/defaults.ts","webpack://grafana/./packages/grafana-sql/src/expressions.ts","webpack://grafana/./packages/grafana-sql/src/types.ts","webpack://grafana/./packages/grafana-sql/src/utils/sql.utils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/types.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxFluxConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxInfluxQLConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxSQLConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_part.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/flux/FluxQueryEditor.tsx","webpack://grafana/./packages/grafana-sql/src/constants.ts","webpack://grafana/./packages/grafana-sql/src/ResponseParser.ts","webpack://grafana/./packages/grafana-sql/src/components/QueryEditorLazy.tsx","webpack://grafana/./packages/grafana-sql/src/utils/migration.ts","webpack://grafana/./packages/grafana-sql/src/datasource/SqlDatasource.ts","webpack://grafana/./packages/grafana-sql/src/components/configuration/NumberInput.tsx","webpack://grafana/./packages/grafana-sql/src/components/configuration/ConnectionLimits.tsx","webpack://grafana/./packages/grafana-sql/src/components/configuration/Divider.tsx","webpack://grafana/./packages/grafana-sql/src/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./packages/grafana-sql/src/utils/logging.ts","webpack://grafana/./packages/grafana-sql/src/components/configuration/useMigrateDatabaseFields.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/fields.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/flightsqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/datasource.flightsql.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/fsql/FSQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/QueryEditorModeSwitcher.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/hooks/useShadowedState.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/code/RawInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influxql_query_builder.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influxql_metadata_query.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/filterTags.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/toSelectableValue.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/unwrap.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/partListUtils.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/getTemplateVariableOptions.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/withTemplateVariableOptions.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/wrapper.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/styles.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/FormatAsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/Seg.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/FromSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/InputSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/OrderByTimeSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/AddButton.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/PartListSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/tagUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/VisualInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/InfluxCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/InfluxStartPage.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/annotation/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_series.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/variable/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/variables.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/module.ts","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/types.js"],"sourcesContent":["import { config } from '@grafana/runtime';\n\nexport const isSqlDatasourceDatabaseSelectionFeatureFlagEnabled = () => {\n  return !!config.featureToggles.sqlDatasourceDatabaseSelection;\n};\n","import { EditorMode } from '@grafana/plugin-ui';\n\nimport { QueryFormat, SQLQuery } from './types';\nimport { createFunctionField, setGroupByField } from './utils/sql.utils';\n\nexport function applyQueryDefaults(q?: SQLQuery): SQLQuery {\n  let editorMode = q?.editorMode || EditorMode.Builder;\n\n  // Switching to code editor if the query was created before visual query builder was introduced.\n  if (q?.editorMode === undefined && q?.rawSql !== undefined) {\n    editorMode = EditorMode.Code;\n  }\n\n  const result: SQLQuery = {\n    ...q,\n    refId: q?.refId || 'A',\n    format: q?.format !== undefined ? q.format : QueryFormat.Table,\n    rawSql: q?.rawSql || '',\n    editorMode,\n    sql: q?.sql ?? {\n      columns: [createFunctionField()],\n      groupBy: [setGroupByField()],\n      limit: 50,\n    },\n  };\n\n  return result;\n}\n\nexport type QueryWithDefaults = ReturnType<typeof applyQueryDefaults>;\n","export enum QueryEditorPropertyType {\n  String = 'string',\n}\n\nexport interface QueryEditorProperty {\n  type: QueryEditorPropertyType;\n  name?: string;\n}\n\nexport type QueryEditorOperatorType = string | boolean | number;\ntype QueryEditorOperatorValueType = QueryEditorOperatorType | QueryEditorOperatorType[];\n\nexport interface QueryEditorOperator<T extends QueryEditorOperatorValueType> {\n  name?: string;\n  value?: T;\n}\n\nexport interface QueryEditorOperatorExpression {\n  type: QueryEditorExpressionType.Operator;\n  property: QueryEditorProperty;\n  operator: QueryEditorOperator<QueryEditorOperatorValueType>;\n}\n\nexport interface QueryEditorArrayExpression {\n  type: QueryEditorExpressionType.And | QueryEditorExpressionType.Or;\n  expressions: QueryEditorExpression[] | QueryEditorArrayExpression[];\n}\n\nexport interface QueryEditorPropertyExpression {\n  type: QueryEditorExpressionType.Property;\n  property: QueryEditorProperty;\n}\n\nexport enum QueryEditorExpressionType {\n  Property = 'property',\n  Operator = 'operator',\n  Or = 'or',\n  And = 'and',\n  GroupBy = 'groupBy',\n  Function = 'function',\n  FunctionParameter = 'functionParameter',\n}\n\nexport type QueryEditorExpression =\n  | QueryEditorArrayExpression\n  | QueryEditorPropertyExpression\n  | QueryEditorGroupByExpression\n  | QueryEditorFunctionExpression\n  | QueryEditorFunctionParameterExpression\n  | QueryEditorOperatorExpression;\n\nexport interface QueryEditorGroupByExpression {\n  type: QueryEditorExpressionType.GroupBy;\n  property: QueryEditorProperty;\n}\n\nexport interface QueryEditorFunctionExpression {\n  type: QueryEditorExpressionType.Function;\n  name?: string;\n  alias?: string;\n  parameters?: QueryEditorFunctionParameterExpression[];\n}\n\nexport interface QueryEditorFunctionParameterExpression {\n  type: QueryEditorExpressionType.FunctionParameter;\n  name?: string;\n}\n","import { JsonTree } from '@react-awesome-query-builder/ui';\n\nimport {\n  DataFrame,\n  DataQuery,\n  DataSourceJsonData,\n  MetricFindValue,\n  SelectableValue,\n  TimeRange,\n  toOption as toOptionFromData,\n} from '@grafana/data';\nimport { CompletionItemKind, EditorMode, LanguageDefinition } from '@grafana/plugin-ui';\n\nimport { QueryWithDefaults } from './defaults';\nimport {\n  QueryEditorFunctionExpression,\n  QueryEditorGroupByExpression,\n  QueryEditorPropertyExpression,\n} from './expressions';\n\nexport interface SqlQueryForInterpolation {\n  dataset?: string;\n  alias?: string;\n  format?: QueryFormat;\n  rawSql?: string;\n  refId: string;\n  hide?: boolean;\n}\n\nexport interface SQLConnectionLimits {\n  maxOpenConns: number;\n  maxIdleConns: number;\n  maxIdleConnsAuto: boolean;\n  connMaxLifetime: number;\n}\n\nexport interface SQLOptions extends SQLConnectionLimits, DataSourceJsonData {\n  tlsAuth: boolean;\n  tlsAuthWithCACert: boolean;\n  timezone: string;\n  tlsSkipVerify: boolean;\n  user: string;\n  database: string;\n  url: string;\n  timeInterval: string;\n}\n\nexport enum QueryFormat {\n  Timeseries = 'time_series',\n  Table = 'table',\n}\n\nexport interface SQLQuery extends DataQuery {\n  alias?: string;\n  format?: QueryFormat;\n  rawSql?: string;\n  dataset?: string;\n  table?: string;\n  sql?: SQLExpression;\n  editorMode?: EditorMode;\n  rawQuery?: boolean;\n}\n\nexport interface NameValue {\n  name: string;\n  value: string;\n}\n\nexport type SQLFilters = NameValue[];\n\nexport interface SQLExpression {\n  columns?: QueryEditorFunctionExpression[];\n  whereJsonTree?: JsonTree;\n  whereString?: string;\n  filters?: SQLFilters;\n  groupBy?: QueryEditorGroupByExpression[];\n  orderBy?: QueryEditorPropertyExpression;\n  orderByDirection?: 'ASC' | 'DESC';\n  limit?: number;\n  offset?: number;\n}\n\nexport interface TableSchema {\n  name?: string;\n  schema?: TableFieldSchema[];\n}\n\nexport interface TableFieldSchema {\n  name: string;\n  description?: string;\n  type: string;\n  repeated: boolean;\n  schema: TableFieldSchema[];\n}\n\nexport interface QueryRowFilter {\n  filter: boolean;\n  group: boolean;\n  order: boolean;\n  preview: boolean;\n}\n\nexport const QUERY_FORMAT_OPTIONS = [\n  { label: 'Time series', value: QueryFormat.Timeseries },\n  { label: 'Table', value: QueryFormat.Table },\n];\n\nconst backWardToOption = (value: string) => ({ label: value, value });\n\nexport const toOption = toOptionFromData ?? backWardToOption;\n\nexport interface ResourceSelectorProps {\n  disabled?: boolean;\n  className?: string;\n  applyDefault?: boolean;\n}\n// React Awesome Query builder field types.\n// These are responsible for rendering the correct UI for the field.\nexport type RAQBFieldTypes = 'text' | 'number' | 'boolean' | 'datetime' | 'date' | 'time';\n\nexport interface SQLSelectableValue extends SelectableValue {\n  type?: string;\n  raqbFieldType?: RAQBFieldTypes;\n}\n\nexport interface DB {\n  init?: (datasourceId?: string) => Promise<boolean>;\n  datasets: () => Promise<string[]>;\n  tables: (dataset?: string) => Promise<string[]>;\n  fields: (query: SQLQuery, order?: boolean) => Promise<SQLSelectableValue[]>;\n  validateQuery: (query: SQLQuery, range?: TimeRange) => Promise<ValidationResults>;\n  dsID: () => number;\n  dispose?: (dsID?: string) => void;\n  lookup?: (path?: string) => Promise<Array<{ name: string; completion: string }>>;\n  getEditorLanguageDefinition: () => LanguageDefinition;\n  toRawSql: (query: SQLQuery) => string;\n  functions: () => Func[];\n}\n\nexport interface FuncParameter {\n  name: string;\n  required?: boolean;\n  options?: (query: SQLQuery) => Promise<SelectableValue[]>;\n}\nexport interface Func {\n  name: string;\n  parameters?: FuncParameter[];\n  description?: string;\n}\n\nexport interface QueryEditorProps {\n  db: DB;\n  query: QueryWithDefaults;\n  onChange: (query: SQLQuery) => void;\n  range?: TimeRange;\n}\n\nexport interface ValidationResults {\n  query: SQLQuery;\n  rawSql?: string;\n  error: string;\n  isError: boolean;\n  isValid: boolean;\n  statistics?: {\n    TotalBytesProcessed: number;\n  } | null;\n}\n\nexport interface SqlQueryModel {\n  quoteLiteral: (v: string) => string;\n}\n\nexport interface ResponseParser {\n  transformMetricFindResponse: (frame: DataFrame) => MetricFindValue[];\n}\n\nexport interface MetaDefinition {\n  name: string;\n  completion?: string;\n  kind: CompletionItemKind;\n}\n\nexport type SQLDialect = 'postgres' | 'influx' | 'other';\n","import { SelectableValue, toOption } from '@grafana/data';\n\nimport {\n  QueryEditorExpressionType,\n  QueryEditorFunctionExpression,\n  QueryEditorFunctionParameterExpression,\n  QueryEditorGroupByExpression,\n  QueryEditorPropertyExpression,\n  QueryEditorPropertyType,\n} from '../expressions';\nimport { SQLExpression } from '../types';\n\nexport function createSelectClause(sqlColumns: NonNullable<SQLExpression['columns']>): string {\n  const columns = sqlColumns.map((c) => {\n    let rawColumn = '';\n    if (c.name && c.alias) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)}) AS ${c.alias}`;\n    } else if (c.name) {\n      rawColumn += `${c.name}(${c.parameters?.map((p) => `${p.name}`)})`;\n    } else if (c.alias) {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)} AS ${c.alias}`;\n    } else {\n      rawColumn += `${c.parameters?.map((p) => `${p.name}`)}`;\n    }\n    return rawColumn;\n  });\n  return `SELECT ${columns.join(', ')} `;\n}\n\nexport const haveColumns = (columns: SQLExpression['columns']): columns is NonNullable<SQLExpression['columns']> => {\n  if (!columns) {\n    return false;\n  }\n\n  const haveColumn = columns.some((c) => c.parameters?.length || c.parameters?.some((p) => p.name));\n  const haveFunction = columns.some((c) => c.name);\n  return haveColumn || haveFunction;\n};\n\n/**\n * Creates a GroupByExpression for a specified field\n */\nexport function setGroupByField(field?: string): QueryEditorGroupByExpression {\n  return {\n    type: QueryEditorExpressionType.GroupBy,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n\n/**\n * Creates a PropertyExpression for a specified field\n */\nexport function setPropertyField(field?: string): QueryEditorPropertyExpression {\n  return {\n    type: QueryEditorExpressionType.Property,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n\nexport function createFunctionField(functionName?: string): QueryEditorFunctionExpression {\n  return {\n    type: QueryEditorExpressionType.Function,\n    name: functionName,\n    parameters: [],\n  };\n}\n\n/**\n * Retrieves the column value from a QueryEditorFunctionParameterExpression object.\n *\n * @param column - The QueryEditorFunctionParameterExpression object representing the column.\n * @returns The column value as a SelectableValue<string> or null if the column is undefined or null.\n */\nexport function getColumnValue(\n  column?: QueryEditorFunctionParameterExpression | QueryEditorFunctionExpression\n): SelectableValue<string> | null {\n  if (column?.name) {\n    return toOption(column.name);\n  }\n  return null;\n}\n","export const BROWSER_MODE_DISABLED_MESSAGE =\n  'Direct browser access in the InfluxDB datasource is no longer available. Switch to server access mode.';\n","import { AdHocVariableFilter, DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport const DEFAULT_POLICY = 'default';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n  SQL = 'SQL',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval?: string;\n  httpMode?: string;\n\n  dbName?: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n\n  // With SQL\n  metadata?: Array<Record<string, string>>;\n  insecureGrpc?: boolean;\n}\n\n/**\n * @deprecated\n */\nexport interface InfluxOptionsV1 extends InfluxOptions {\n  user?: string;\n  database?: string;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxVariableQuery extends DataQuery {\n  query: string;\n  maxDataPoints?: number;\n}\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n  // for migrated InfluxQL annotations\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  matchAny?: boolean;\n  type?: string;\n\n  textEditor?: boolean;\n  adhocFilters?: AdHocVariableFilter[];\n}\n\nexport type MetadataQueryType = 'TAG_KEYS' | 'TAG_VALUES' | 'MEASUREMENTS' | 'FIELDS' | 'RETENTION_POLICIES';\n","export const WIDTH_SHORT = 20;\n","import { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, SecretInput } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxFluxConfig = (props: Props) => {\n  const {\n    options: { jsonData, secureJsonData, secureJsonFields },\n  } = props;\n  const htmlPrefix = uniqueId('influxdb-flux-config');\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Organization\" htmlFor={`${htmlPrefix}-org`}>\n          <Input\n            id={`${htmlPrefix}-org`}\n            className=\"width-20\"\n            value={jsonData.organization || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'organization')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Token\">\n          <SecretInput\n            isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n            value={secureJsonData?.token || ''}\n            label=\"Token\"\n            aria-label=\"Token\"\n            className=\"width-20\"\n            onReset={() => updateDatasourcePluginResetOption(props, 'token')}\n            onChange={onUpdateDatasourceSecureJsonDataOption(props, 'token')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Default Bucket\">\n          <Input\n            className=\"width-20\"\n            placeholder=\"default bucket\"\n            value={jsonData.defaultBucket || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'defaultBucket')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          labelWidth={WIDTH_SHORT}\n          label=\"Min time interval\"\n          tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n        >\n          <Input\n            className=\"width-20\"\n            placeholder=\"10s\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, Field, InlineLabel, Input, SecretInput, Select, useStyles2 } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nconst httpModes: SelectableValue[] = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxInfluxQLConfig = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { database, jsonData, secureJsonData, secureJsonFields } = options;\n  const styles = useStyles2(getStyles);\n\n  const htmlPrefix = uniqueId('influxdb-influxql-config');\n\n  return (\n    <>\n      <Alert severity=\"info\" title=\"Database Access\">\n        <p>\n          Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n          allows switching the database in the query. For example:\n          <code>SHOW MEASUREMENTS ON _internal</code> or\n          <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n          <br />\n          <br />\n          To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n        </p>\n      </Alert>\n\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Database</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-db`}\n      >\n        <Input\n          id={`${htmlPrefix}-db`}\n          className=\"width-20\"\n          value={jsonData.dbName ?? database}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              database: '',\n              jsonData: {\n                ...jsonData,\n                dbName: event.currentTarget.value,\n              },\n            });\n          }}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>User</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-user`}\n      >\n        <Input\n          id={`${htmlPrefix}-user`}\n          className=\"width-20\"\n          value={options.user || ''}\n          onChange={onUpdateDatasourceOption(props, 'user')}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Password</InlineLabel>}\n        className={styles.horizontalField}\n      >\n        <SecretInput\n          isConfigured={Boolean(secureJsonFields && secureJsonFields.password)}\n          value={secureJsonData?.password || ''}\n          label=\"Password\"\n          aria-label=\"Password\"\n          className=\"width-20\"\n          onReset={() => updateDatasourcePluginResetOption(props, 'password')}\n          onChange={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={\n          <InlineLabel\n            width={WIDTH_SHORT}\n            tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n          >\n            HTTP Method\n          </InlineLabel>\n        }\n        htmlFor={`${htmlPrefix}-http-method`}\n        className={styles.horizontalField}\n      >\n        <Select\n          inputId={`${htmlPrefix}-http-method`}\n          className=\"width-20\"\n          value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n          options={httpModes}\n          defaultValue={options.jsonData.httpMode}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'httpMode')}\n        />\n      </Field>\n\n      <Field\n        horizontal\n        label={\n          <InlineLabel\n            width={WIDTH_SHORT}\n            tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example 1m if your data is written every minute.\"\n          >\n            Min time interval\n          </InlineLabel>\n        }\n        className={styles.horizontalField}\n      >\n        <Input\n          className=\"width-20\"\n          placeholder=\"10s\"\n          value={options.jsonData.timeInterval || ''}\n          onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n        />\n      </Field>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  horizontalField: css({\n    justifyContent: 'initial',\n    margin: `0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0`,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Field, InlineLabel, InlineSwitch, Input, SecretInput, useStyles2 } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxSqlConfig = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { jsonData, secureJsonData, secureJsonFields } = options;\n  const styles = useStyles2(getStyles);\n  const htmlPrefix = uniqueId('influxdb-sql-config');\n\n  return (\n    <div>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Database</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-dbName`}\n      >\n        <Input\n          id={`${htmlPrefix}-dbName`}\n          className=\"width-20\"\n          aria-label=\"Database or bucket name\"\n          value={jsonData.dbName}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...jsonData,\n                dbName: event.currentTarget.value,\n              },\n            });\n          }}\n        />\n      </Field>\n      <Field horizontal label={<InlineLabel width={WIDTH_SHORT}>Token</InlineLabel>} className={styles.horizontalField}>\n        <SecretInput\n          label=\"Token\"\n          aria-label=\"Token\"\n          className=\"width-20\"\n          value={secureJsonData?.token || ''}\n          onReset={() => updateDatasourcePluginResetOption(props, 'token')}\n          onChange={onUpdateDatasourceSecureJsonDataOption(props, 'token')}\n          isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Insecure Connection</InlineLabel>}\n        className={styles.horizontalField}\n      >\n        <InlineSwitch\n          id={`${htmlPrefix}-insecure-grpc`}\n          value={jsonData.insecureGrpc ?? false}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...jsonData,\n                insecureGrpc: event.currentTarget.checked,\n              },\n            });\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  horizontalField: css({\n    justifyContent: 'initial',\n    margin: `0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0`,\n  }),\n});\n","import { uniqueId } from 'lodash';\nimport { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, DataSourceHttpSettings, InlineField, Select, Field, Input, FieldSet } from '@grafana/ui';\n\nimport { BROWSER_MODE_DISABLED_MESSAGE } from '../../../constants';\nimport { InfluxOptions, InfluxOptionsV1, InfluxVersion } from '../../../types';\n\nimport { InfluxFluxConfig } from './InfluxFluxConfig';\nimport { InfluxInfluxQLConfig } from './InfluxInfluxQLConfig';\nimport { InfluxSqlConfig } from './InfluxSQLConfig';\n\nconst versionMap: Record<InfluxVersion, SelectableValue<InfluxVersion>> = {\n  [InfluxVersion.InfluxQL]: {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  [InfluxVersion.SQL]: {\n    label: 'SQL',\n    value: InfluxVersion.SQL,\n    description: 'Native SQL language. Supported in InfluxDB 3.0',\n  },\n  [InfluxVersion.Flux]: {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Supported in InfluxDB 2.x and 1.8+',\n  },\n};\n\nconst versions: Array<SelectableValue<InfluxVersion>> = [\n  versionMap[InfluxVersion.InfluxQL],\n  versionMap[InfluxVersion.SQL],\n  versionMap[InfluxVersion.Flux],\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  htmlPrefix: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  }\n\n  versionNotice = {\n    Flux: 'Support for Flux in Grafana is currently in beta',\n    SQL: 'Support for SQL in Grafana is currently in alpha',\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: DataSourceSettings<InfluxOptionsV1, {}> = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      const { user, database, ...rest } = copy;\n\n      onOptionsChange(rest as DataSourceSettings<InfluxOptions, {}>);\n    } else {\n      onOptionsChange(copy);\n    }\n  };\n\n  renderJsonDataOptions() {\n    switch (this.props.options.jsonData.version) {\n      case InfluxVersion.InfluxQL:\n        return <InfluxInfluxQLConfig {...this.props} />;\n      case InfluxVersion.Flux:\n        return <InfluxFluxConfig {...this.props} />;\n      case InfluxVersion.SQL:\n        return <InfluxSqlConfig {...this.props} />;\n      default:\n        return <InfluxInfluxQLConfig {...this.props} />;\n    }\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const isDirectAccess = options.access === 'direct';\n\n    return (\n      <>\n        <FieldSet>\n          <h3 className=\"page-heading\">Query language</h3>\n          <Field>\n            <Select\n              aria-label=\"Query language\"\n              className=\"width-30\"\n              value={versionMap[options.jsonData.version ?? InfluxVersion.InfluxQL]}\n              options={versions}\n              defaultValue={versionMap[InfluxVersion.InfluxQL]}\n              onChange={this.onVersionChanged}\n            />\n          </Field>\n        </FieldSet>\n\n        {options.jsonData.version !== InfluxVersion.InfluxQL && (\n          <Alert severity=\"info\" title={this.versionNotice[options.jsonData.version!]}>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </Alert>\n        )}\n\n        {isDirectAccess && (\n          <Alert title=\"Error\" severity=\"error\">\n            {BROWSER_MODE_DISABLED_MESSAGE}\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={isDirectAccess}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n          secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n        />\n        <FieldSet>\n          <h3 className=\"page-heading\">InfluxDB Details</h3>\n          {this.renderJsonDataOptions()}\n          <InlineField\n            labelWidth={20}\n            label=\"Max series\"\n            tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n          >\n            <Input\n              placeholder=\"1000\"\n              type=\"number\"\n              className=\"width-20\"\n              value={this.state.maxSeries}\n              onChange={(event: { currentTarget: { value: string } }) => {\n                // We duplicate this state so that we allow to write freely inside the input. We don't have\n                // any influence over saving so this seems to be only way to do this.\n                this.setState({ maxSeries: event.currentTarget.value });\n                const val = parseInt(event.currentTarget.value, 10);\n                updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n              }}\n            />\n          </InlineField>\n        </FieldSet>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { clone, map } from 'lodash';\n\nimport { functionRenderer, QueryPart, QueryPartDef, suffixRenderer } from 'app/features/alerting/state/query_part';\n\nconst index: any[] = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any) {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }) {\n  const param = part.params[0];\n\n  if (param === '*') {\n    return '*';\n  }\n\n  let escapedParam = `\"${param}\"`;\n\n  if (param.endsWith('::tag')) {\n    escapedParam = `\"${param.slice(0, -5)}\"::tag`;\n  }\n\n  if (param.endsWith('::field')) {\n    escapedParam = `\"${param.slice(0, -7)}\"::field`;\n  }\n\n  return escapedParam;\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { filter, find, indexOf, map } from 'lodash';\n\nimport { AdHocVariableFilter, escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { QueryPart } from 'app/features/alerting/state/query_part';\n\nimport { removeRegexWrapper } from './queryUtils';\nimport queryPart from './query_part';\nimport { DEFAULT_POLICY, InfluxQuery, InfluxQueryTag } from './types';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: QueryPart[][] = [];\n  groupByParts: QueryPart[] = [];\n  templateSrv: any;\n  scopedVars: ScopedVars | undefined;\n  refId?: string;\n\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || DEFAULT_POLICY;\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s) => {\n        return filter(s, (part) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: QueryPart[], part: QueryPart) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: QueryPart[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private isOperatorTypeHandler(operator: string, value: string, fieldName: string) {\n    let textValue;\n    if (operator === 'Is Not') {\n      operator = '!=';\n    } else {\n      operator = '=';\n    }\n\n    // Tags should always quote\n    if (fieldName.endsWith('::tag')) {\n      textValue = \"'\" + removeRegexWrapper(value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\")) + \"'\";\n      return {\n        operator: operator,\n        value: textValue,\n      };\n    }\n\n    let lowerValue = value.toLowerCase();\n\n    // Try and discern type\n    if (!isNaN(parseFloat(value))) {\n      // Integer or float, don't quote\n      textValue = value;\n    } else if (['true', 'false'].includes(lowerValue)) {\n      // It's a boolean, don't quite\n      textValue = lowerValue;\n    } else {\n      // String or unrecognised: quote\n      textValue = \"'\" + removeRegexWrapper(value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\")) + \"'\";\n    }\n    return {\n      operator: operator,\n      value: textValue,\n    };\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    // FIXME: merge this function with query_builder/renderTagCondition\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      value = removeRegexWrapper(value);\n      if (operator.startsWith('Is')) {\n        let r = this.isOperatorTypeHandler(operator, value, tag.key);\n        operator = r.operator;\n        value = r.value;\n      } else if ((!operator.startsWith('>') && !operator.startsWith('<')) || operator === '<>') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    let escapedKey = `\"${tag.key}\"`;\n\n    if (tag.key.endsWith('::tag')) {\n      escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n    }\n\n    if (tag.key.endsWith('::field')) {\n      escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n    }\n\n    return str + escapedKey + ' ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate?: boolean) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== DEFAULT_POLICY) {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: string | string[], variable: { multi: boolean; includeAll: boolean }) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return escapeRegex(value);\n    }\n\n    const escapedValues = map(value, escapeRegex);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: AdHocVariableFilter[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types'; // FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n\nexport function removeRegexWrapper(str: string) {\n  const regex = /\\/\\^(.*?)\\$\\//; // match any string that starts with \"/^\" and ends with \"$/\", capturing the characters in between\n  const match = str.match(regex);\n\n  if (match && match.length > 1) {\n    return match[1];\n  }\n\n  return str;\n}\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data/src';\nimport { getTemplateSrv } from '@grafana/runtime/src';\nimport {\n  CodeEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n  InlineFormLabel,\n  LinkButton,\n  MonacoEditor,\n  Segment,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../../datasource';\nimport { InfluxQuery } from '../../../../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n}\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nclass UnthemedFluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query, theme } = this.props;\n    const styles = getStyles(theme);\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'100%'}\n          containerStyles={styles.editorContainerStyles}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment\n            options={samples}\n            value=\"Sample query\"\n            onChange={this.onSampleChange}\n            className={css({\n              marginTop: theme.spacing(-0.5),\n              marginLeft: theme.spacing(0.5),\n            })}\n          />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css({\n    height: '200px',\n    maxWidth: '100%',\n    resize: 'vertical',\n    overflow: 'auto',\n    backgroundColor: theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary,\n    paddingBottom: theme.spacing(1),\n  }),\n  editorActions: css({\n    marginTop: '6px',\n  }),\n});\n\nexport const FluxQueryEditor = withTheme2(UnthemedFluxQueryEditor);\n","import { Func, FuncParameter } from './types';\n\nexport const COMMON_FNS: Func[] = [\n  { name: 'AVG' },\n  { name: 'COUNT' },\n  { name: 'MAX' },\n  { name: 'MIN' },\n  { name: 'SUM' },\n];\n\nconst intervalParam: FuncParameter = {\n  name: 'Interval',\n  required: true,\n  options: () => {\n    return Promise.resolve([{ label: '$__interval', value: '$__interval' }]);\n  },\n};\nconst fillParam: FuncParameter = {\n  name: 'Fill',\n  required: false,\n  options: () =>\n    Promise.resolve([\n      { label: '0', value: '0' },\n      { label: 'NULL', value: 'NULL' },\n      { label: 'previous', value: 'previous' },\n    ]),\n};\n\nexport const MACRO_FUNCTIONS = (columnParam: FuncParameter) => [\n  {\n    name: '$__timeGroup',\n    description: 'Time grouping function',\n    parameters: [columnParam, intervalParam, fillParam],\n  },\n  {\n    name: '$__timeGroupAlias',\n    description: 'Time grouping function with time as alias',\n    parameters: [columnParam, intervalParam, fillParam],\n  },\n  {\n    name: '$__time',\n    description: 'An expression to rename the column to time',\n    parameters: [columnParam],\n  },\n  {\n    name: '$__timeEpoch',\n    parameters: [columnParam],\n  },\n  {\n    name: '$__unixEpochGroup',\n    parameters: [columnParam, intervalParam, fillParam],\n  },\n  {\n    name: '$__unixEpochGroupAlias',\n    parameters: [columnParam, intervalParam, fillParam],\n  },\n];\n\nexport const MACRO_NAMES = [\n  '$__time',\n  '$__timeEpoch',\n  '$__timeFilter',\n  '$__timeFrom',\n  '$__timeTo',\n  '$__timeGroup',\n  '$__timeGroupAlias',\n  '$__unixEpochFilter',\n  '$__unixEpochNanoFilter',\n  '$__unixEpochNanoFrom',\n  '$__unixEpochNanoTo',\n  '$__unixEpochGroup',\n  '$__unixEpochGroupAlias',\n];\n","import { uniqBy } from 'lodash';\n\nimport { DataFrame, MetricFindValue } from '@grafana/data';\n\nimport type { ResponseParser as ResponseParserType } from './types';\n\nexport class ResponseParser implements ResponseParserType {\n  transformMetricFindResponse(frame: DataFrame): MetricFindValue[] {\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values[i], value: '' + valueField.values[i] });\n      }\n    } else {\n      for (const field of frame.fields) {\n        for (const value of field.values) {\n          values.push({ text: value });\n        }\n      }\n    }\n\n    return uniqBy(values, 'text');\n  }\n}\n","import { css } from '@emotion/css';\nimport { lazy, Suspense } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport type { SqlQueryEditorProps } from './QueryEditor';\nconst QueryEditor = lazy(() => import(/* webpackChunkName: \"sql-query-editor\" */ './QueryEditor'));\n\nexport function SqlQueryEditorLazy(props: SqlQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Suspense fallback={<LoadingPlaceholder text={'Loading editor'} className={styles.container} />}>\n      <QueryEditor {...props} />\n    </Suspense>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      marginBottom: 'unset',\n      marginLeft: theme.spacing(1),\n    }),\n  };\n};\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { applyQueryDefaults } from '../defaults';\nimport { SQLQuery } from '../types';\n\nexport default function migrateAnnotation(annotation: AnnotationQuery<SQLQuery>) {\n  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;\n\n  if (!oldQuery) {\n    return annotation;\n  }\n\n  const newQuery = applyQueryDefaults({ refId: 'Annotation', ...(annotation.target ?? {}), rawSql: oldQuery });\n\n  return {\n    ...annotation,\n    rawQuery: undefined,\n    workspace: undefined,\n    subscription: undefined,\n    queryType: undefined,\n    target: newQuery,\n  };\n}\n","import { lastValueFrom, Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  getDefaultTimeRange,\n  DataFrame,\n  DataFrameView,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  ScopedVars,\n  CoreApp,\n  getSearchFilterScopedVar,\n  LegacyMetricFindQueryOptions,\n  VariableWithMultiSupport,\n  TimeRange,\n} from '@grafana/data';\nimport { EditorMode } from '@grafana/plugin-ui';\nimport {\n  BackendDataSourceResponse,\n  DataSourceWithBackend,\n  FetchResponse,\n  getBackendSrv,\n  getTemplateSrv,\n  toDataQueryResponse,\n  TemplateSrv,\n  reportInteraction,\n} from '@grafana/runtime';\n\nimport { ResponseParser } from '../ResponseParser';\nimport { SqlQueryEditorLazy } from '../components/QueryEditorLazy';\nimport { MACRO_NAMES } from '../constants';\nimport { DB, SQLQuery, SQLOptions, SqlQueryModel, QueryFormat } from '../types';\nimport migrateAnnotation from '../utils/migration';\n\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './../components/QueryEditorFeatureFlag.utils';\n\nexport abstract class SqlDatasource extends DataSourceWithBackend<SQLQuery, SQLOptions> {\n  id: number;\n  responseParser: ResponseParser;\n  name: string;\n  interval: string;\n  db: DB;\n  preconfiguredDatabase: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<SQLOptions>,\n    protected readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.responseParser = new ResponseParser();\n    this.id = instanceSettings.id;\n    const settingsData = instanceSettings.jsonData || {};\n    this.interval = settingsData.timeInterval || '1m';\n    this.db = this.getDB();\n    /*\n      The `settingsData.database` will be defined if a default database has been defined in either\n      1) the ConfigurationEditor.tsx, OR 2) the provisioning config file, either under `jsondata.database`, or simply `database`.\n    */\n    this.preconfiguredDatabase = settingsData.database ?? '';\n    this.annotations = {\n      prepareAnnotation: migrateAnnotation,\n      QueryEditor: SqlQueryEditorLazy,\n    };\n  }\n\n  abstract getDB(dsID?: number): DB;\n\n  abstract getQueryModel(target?: SQLQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): SqlQueryModel;\n\n  getResponseParser() {\n    return this.responseParser;\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: VariableWithMultiSupport) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.getQueryModel().quoteLiteral(value);\n      } else {\n        return String(value).replace(/'/g, \"''\");\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if (Array.isArray(value)) {\n      const quotedValues = value.map((v) => this.getQueryModel().quoteLiteral(v));\n      return quotedValues.join(',');\n    }\n\n    return value;\n  };\n\n  interpolateVariablesInQueries(queries: SQLQuery[], scopedVars: ScopedVars): SQLQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: SQLQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: SQLQuery, scopedVars: ScopedVars) {\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(target.rawSql, scopedVars, this.interpolateVariable),\n      format: target.format,\n    };\n  }\n\n  query(request: DataQueryRequest<SQLQuery>): Observable<DataQueryResponse> {\n    // This logic reenables the previous SQL behavior regarding what databases are available for the user to query.\n    if (isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      const databaseIssue = this.checkForDatabaseIssue(request);\n\n      if (!!databaseIssue) {\n        const error = new Error(databaseIssue);\n        return throwError(() => error);\n      }\n    }\n\n    request.targets.forEach((target) => {\n      if (request.app === CoreApp.Dashboard || request.app === CoreApp.PanelViewer) {\n        return;\n      }\n\n      reportInteraction('grafana_sql_query_executed', {\n        datasource: target.datasource?.type,\n        editorMode: target.editorMode,\n        format: target.format,\n        app: request.app,\n      });\n    });\n\n    return super.query(request);\n  }\n\n  private checkForDatabaseIssue(request: DataQueryRequest<SQLQuery>) {\n    // If the datasource is Postgres and there is no default database configured - either never configured or removed - return a database issue.\n    if (this.type === 'postgres' && !this.preconfiguredDatabase) {\n      return `You do not currently have a default database configured for this data source. Postgres requires a default\n             database with which to connect. Please configure one through the Data Sources Configuration page, or if you\n             are using a provisioning file, update that configuration file with a default database.`;\n    }\n\n    // No need to check for database change/update issues if the datasource is being used in Explore.\n    if (request.app !== CoreApp.Explore) {\n      /*\n        If a preconfigured datasource database has been added/updated - and the user has built ANY number of queries using a\n        database OTHER than the preconfigured one, return a database issue - since those databases are no longer available.\n        The user will need to update their queries to use the preconfigured database.\n      */\n      if (!!this.preconfiguredDatabase) {\n        for (const target of request.targets) {\n          // Test for database configuration change only if query was made in `builder` mode.\n          if (target.editorMode === EditorMode.Builder && target.dataset !== this.preconfiguredDatabase) {\n            return `The configuration for this panel's data source has been modified. The previous database used in this panel's\n                   saved query is no longer available. Please update the query to use the new database option.\n                   Previous query parameters will be preserved until the query is updated.`;\n          }\n        }\n      }\n    }\n\n    return;\n  }\n\n  async metricFindQuery(query: string, options?: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const range = options?.range;\n    if (range == null) {\n      // i cannot create a scenario where this happens, we handle it just to be sure.\n      return [];\n    }\n\n    let refId = 'tempvar';\n    if (options && options.variable && options.variable.name) {\n      refId = options.variable.name;\n    }\n\n    const scopedVars = {\n      ...options?.scopedVars,\n      ...getSearchFilterScopedVar({ query, wildcardChar: '%', options }),\n    };\n\n    const rawSql = this.templateSrv.replace(query, scopedVars, this.interpolateVariable);\n\n    const interpolatedQuery: SQLQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql,\n      format: QueryFormat.Table,\n    };\n\n    // NOTE: we can remove this try-catch when https://github.com/grafana/grafana/issues/82250\n    // is fixed.\n    let response;\n    try {\n      response = await this.runMetaQuery(interpolatedQuery, range);\n    } catch (error) {\n      console.error(error);\n      throw new Error('error when executing the sql query');\n    }\n    return this.getResponseParser().transformMetricFindResponse(response);\n  }\n\n  // NOTE: this always runs with the `@grafana/data/getDefaultTimeRange` time range\n  async runSql<T extends object>(query: string, options?: RunSQLOptions) {\n    const range = getDefaultTimeRange();\n    const frame = await this.runMetaQuery({ rawSql: query, format: QueryFormat.Table, refId: options?.refId }, range);\n    return new DataFrameView<T>(frame);\n  }\n\n  private runMetaQuery(request: Partial<SQLQuery>, range: TimeRange): Promise<DataFrame> {\n    const refId = request.refId || 'meta';\n    const queries: DataQuery[] = [{ ...request, datasource: request.datasource || this.getRef(), refId }];\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          headers: this.getRequestHeaders(),\n          data: {\n            from: range.from.valueOf().toString(),\n            to: range.to.valueOf().toString(),\n            queries,\n          },\n          requestId: refId,\n        })\n        .pipe(\n          map((res: FetchResponse<BackendDataSourceResponse>) => {\n            const rsp = toDataQueryResponse(res, queries);\n            return rsp.data[0] ?? { fields: [] };\n          })\n        )\n    );\n  }\n\n  targetContainsTemplate(target: SQLQuery) {\n    let queryWithoutMacros = target.rawSql;\n    MACRO_NAMES.forEach((value) => {\n      queryWithoutMacros = queryWithoutMacros?.replace(value, '') || '';\n    });\n    return this.templateSrv.containsTemplate(queryWithoutMacros);\n  }\n}\n\ninterface RunSQLOptions extends LegacyMetricFindQueryOptions {\n  refId?: string;\n}\n","import { useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\ntype NumberInputProps = {\n  value: number;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  width: number;\n};\n\nexport function NumberInput({ value, defaultValue, onChange, width }: NumberInputProps) {\n  const [isEmpty, setIsEmpty] = useState(false);\n  return (\n    <Input\n      type=\"number\"\n      placeholder={String(defaultValue)}\n      value={isEmpty ? '' : value}\n      onChange={(e) => {\n        if (e.currentTarget.value?.trim() === '') {\n          setIsEmpty(true);\n          onChange(defaultValue);\n        } else {\n          setIsEmpty(false);\n          const newVal = Number(e.currentTarget.value);\n          if (!Number.isNaN(newVal)) {\n            onChange(newVal);\n          }\n        }\n      }}\n      width={width}\n    />\n  );\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { ConfigSubSection } from '@grafana/plugin-ui';\nimport { config } from '@grafana/runtime';\nimport { Field, Icon, InlineLabel, Label, Stack, Switch, Tooltip } from '@grafana/ui';\n\nimport { SQLConnectionLimits, SQLOptions } from '../../types';\n\nimport { NumberInput } from './NumberInput';\n\ninterface Props<T> {\n  onOptionsChange: Function;\n  options: DataSourceSettings<SQLOptions>;\n}\n\nexport const ConnectionLimits = <T extends SQLConnectionLimits>(props: Props<T>) => {\n  const { onOptionsChange, options } = props;\n  const jsonData = options.jsonData;\n  const autoIdle = jsonData.maxIdleConnsAuto !== undefined ? jsonData.maxIdleConnsAuto : false;\n\n  // Update JSON data with new values\n  const updateJsonData = (values: {}) => {\n    const newOpts = {\n      ...options,\n      jsonData: {\n        ...jsonData,\n        ...values,\n      },\n    };\n\n    return onOptionsChange(newOpts);\n  };\n\n  // For the case of idle connections and connection lifetime\n  // use a shared function to update respective properties\n  const onJSONDataNumberChanged = (property: keyof SQLConnectionLimits) => {\n    return (number?: number) => {\n      updateJsonData({ [property]: number });\n    };\n  };\n\n  // When the maximum number of connections is changed\n  // see if we have the automatic idle option enabled\n  const onMaxConnectionsChanged = (number?: number) => {\n    if (autoIdle && number) {\n      updateJsonData({\n        maxOpenConns: number,\n        maxIdleConns: number,\n      });\n    } else {\n      updateJsonData({\n        maxOpenConns: number,\n      });\n    }\n  };\n\n  // Update auto idle setting when control is toggled\n  // and set minimum idle connections if automatic\n  // is selected\n  const onConnectionIdleAutoChanged = () => {\n    let idleConns = undefined;\n    let maxConns = undefined;\n\n    // If the maximum number of open connections is undefined\n    // and we're setting auto idle then set the default amount\n    // otherwise take the numeric amount and get the value from that\n    if (!autoIdle) {\n      if (jsonData.maxOpenConns !== undefined) {\n        maxConns = jsonData.maxOpenConns;\n        idleConns = jsonData.maxOpenConns;\n      }\n    } else {\n      maxConns = jsonData.maxOpenConns;\n      idleConns = jsonData.maxIdleConns;\n    }\n\n    updateJsonData({\n      maxIdleConnsAuto: !autoIdle,\n      maxIdleConns: idleConns,\n      maxOpenConns: maxConns,\n    });\n  };\n\n  const labelWidth = 40;\n\n  return (\n    <ConfigSubSection title=\"Connection limits\">\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max open</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of open connections to the database. If <i>Max idle connections</i> is greater\n                    than 0 and the <i>Max open connections</i> is less than <i>Max idle connections</i>, then\n                    <i>Max idle connections</i> will be reduced to match the <i>Max open connections</i> limit. If set\n                    to 0, there is no limit on the number of open connections.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <NumberInput\n          value={jsonData.maxOpenConns}\n          defaultValue={config.sqlConnectionLimits.maxOpenConns}\n          onChange={(value) => {\n            onMaxConnectionsChanged(value);\n          }}\n          width={labelWidth}\n        />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Auto max idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    If enabled, automatically set the number of <i>Maximum idle connections</i> to the same value as\n                    <i> Max open connections</i>. If the number of maximum open connections is not set it will be set to\n                    the default ({config.sqlConnectionLimits.maxIdleConns}).\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <Switch value={autoIdle} onChange={onConnectionIdleAutoChanged} />\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max idle</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum number of connections in the idle connection pool.If <i>Max open connections</i> is\n                    greater than 0 but less than the <i>Max idle connections</i>, then the <i>Max idle connections</i>{' '}\n                    will be reduced to match the <i>Max open connections</i> limit. If set to 0, no idle connections are\n                    retained.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        {autoIdle ? (\n          <InlineLabel width={labelWidth}>{options.jsonData.maxIdleConns}</InlineLabel>\n        ) : (\n          <NumberInput\n            value={jsonData.maxIdleConns}\n            defaultValue={config.sqlConnectionLimits.maxIdleConns}\n            onChange={(value) => {\n              onJSONDataNumberChanged('maxIdleConns')(value);\n            }}\n            width={labelWidth}\n          />\n        )}\n      </Field>\n\n      <Field\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Max lifetime</span>\n              <Tooltip\n                content={\n                  <span>\n                    The maximum amount of time in seconds a connection may be reused. If set to 0, connections are\n                    reused forever.\n                  </span>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n      >\n        <NumberInput\n          value={jsonData.connMaxLifetime}\n          defaultValue={config.sqlConnectionLimits.connMaxLifetime}\n          onChange={(value) => {\n            onJSONDataNumberChanged('connMaxLifetime')(value);\n          }}\n          width={labelWidth}\n        />\n      </Field>\n    </ConfigSubSection>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\n// this custom component is necessary because the Grafana UI <Divider /> component is not backwards compatible with Grafana < 10.1.0\nexport const Divider = () => {\n  const styles = useStyles2(getStyles);\n  return <hr className={styles.horizontalDivider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    horizontalDivider: css({\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      margin: theme.spacing(2, 0),\n      width: '100%',\n    }),\n  };\n};\n","import {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Field, Icon, Label, SecretTextArea, Tooltip, Stack } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Client Certificate</span>\n                <Tooltip\n                  content={\n                    <span>\n                      To authenticate with an TLS/SSL client certificate, provide the client certificate here.\n                    </span>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          />\n        </Field>\n      ) : null}\n      {showCACert ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Root Certificate</span>\n                <Tooltip\n                  content={\n                    <span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>\n                  }\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          />\n        </Field>\n      ) : null}\n      {showKeyPair ? (\n        <Field\n          label={\n            <Label>\n              <Stack gap={0.5}>\n                <span>TLS/SSL Client Key</span>\n                <Tooltip\n                  content={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n                >\n                  <Icon name=\"info-circle\" size=\"sm\" />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <SecretTextArea\n            placeholder=\"-----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          />\n        </Field>\n      ) : null}\n    </>\n  );\n};\n","import { createMonitoringLogger } from '@grafana/runtime';\n\nexport const sqlPluginLogger = createMonitoringLogger('features.plugins.sql');\n","import { useEffect } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { SQLOptions } from '../../types';\nimport { sqlPluginLogger } from '../../utils/logging';\n\n/**\n * 1. Moves the database field from the options object to jsonData.database and empties the database field.\n * 2. If max open connections, max idle connections, and auto idle are all undefined set these to default values.\n */\nexport function useMigrateDatabaseFields<T extends SQLOptions, S = {}>({\n  onOptionsChange,\n  options,\n}: DataSourcePluginOptionsEditorProps<T, S>) {\n  useEffect(() => {\n    const jsonData = options.jsonData;\n    let newOptions = { ...options };\n    let optionsUpdated = false;\n\n    // Migrate the database field from the column into the jsonData object\n    if (options.database) {\n      sqlPluginLogger.logDebug(`Migrating from options.database with value ${options.database} for ${options.name}`);\n      newOptions.database = '';\n      newOptions.jsonData = { ...jsonData, database: options.database };\n      optionsUpdated = true;\n    }\n\n    // Set default values for max open connections, max idle connection,\n    // and auto idle if they're all undefined\n    if (\n      jsonData.maxOpenConns === undefined &&\n      jsonData.maxIdleConns === undefined &&\n      jsonData.maxIdleConnsAuto === undefined\n    ) {\n      const { maxOpenConns, maxIdleConns } = config.sqlConnectionLimits;\n\n      sqlPluginLogger.logDebug(\n        `Setting default max open connections to ${maxOpenConns} and setting max idle connection to ${maxIdleConns}`\n      );\n\n      // Spread from the jsonData in new options in case\n      // the database field was migrated as well\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        maxOpenConns: maxOpenConns,\n        maxIdleConns: maxIdleConns,\n        maxIdleConnsAuto: true,\n      };\n\n      // Make sure we issue an update if options changed\n      optionsUpdated = true;\n    }\n\n    // If the maximum connection lifetime hasn't been\n    // otherwise set fill in with the default from configuration\n    if (jsonData.connMaxLifetime === undefined) {\n      const { connMaxLifetime } = config.sqlConnectionLimits;\n\n      // Spread new options and add our value\n      newOptions.jsonData = {\n        ...newOptions.jsonData,\n        connMaxLifetime: connMaxLifetime,\n      };\n\n      // Note that we've updated the options\n      optionsUpdated = true;\n    }\n\n    // Only issue an update if we changed options\n    if (optionsUpdated) {\n      onOptionsChange(newOptions);\n    }\n  }, [onOptionsChange, options]);\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from '@grafana/sql';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'TIMESTAMP(NANOSECOND, NONE)':\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import { isEmpty } from 'lodash';\n\nimport { createSelectClause, haveColumns, SQLQuery } from '@grafana/sql';\n\n// remove identifier quoting from identifier to use in metadata queries\nexport function unquoteIdentifier(value: string) {\n  if (value[0] === '\"' && value[value.length - 1] === '\"') {\n    return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n  } else if (value[0] === '`' && value[value.length - 1] === '`') {\n    return value.substring(1, value.length - 1);\n  } else {\n    return value;\n  }\n}\n\nexport function quoteLiteral(value: string) {\n  return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n}\n\nexport function toRawSql({ sql, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  // wrapping the column name with quotes\n  const sc = sql.columns.map((c) => ({\n    ...c,\n    parameters: c.parameters?.map((p) => ({ ...p, name: formatTableName(p.name) })),\n  }));\n  rawQuery += createSelectClause(sc);\n\n  if (table) {\n    rawQuery += `FROM \"${table}\" `;\n  }\n\n  // $__timeFrom and $__timeTo will be interpolated on the backend\n  rawQuery += `WHERE \"time\" >= $__timeFrom AND \"time\" <= $__timeTo `;\n  if (sql.whereString) {\n    // whereString is generated by the react-awesome-query-builder\n    // we use SQLWhereRow as a common component\n    // in order to not mess with common component here we just modify the string\n    const wherePattern = new RegExp('(\\\\s?)([^\\\\(]\\\\S+)(\\\\s?=)', 'g');\n    const subst = `$1\"$2\"$3`;\n    const whereString = sql.whereString.replace(wherePattern, subst);\n    rawQuery += `AND ${whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => `\"${g.property.name}\"`).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY \"${sql.orderBy.property.name}\" `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  // Although LIMIT 0 doesn't make sense, it is still possible to have LIMIT 0\n  if (isLimit(sql.limit)) {\n    rawQuery += `LIMIT ${sql.limit}`;\n  }\n\n  return rawQuery;\n}\n\n// When the column name is *, do not wrap the column name in double-quotes.\n// See: https://github.com/grafana/grafana/issues/88008\nfunction formatTableName(parameter: string | undefined): string {\n  if (parameter === '*') {\n    return parameter;\n  }\n\n  return `\"${parameter}\"`;\n}\n\nconst isLimit = (limit: number | undefined): boolean => limit !== undefined && limit >= 0;\n\n// Puts double quotes (\") around the identifier if it is necessary.\nexport function quoteIdentifierIfNecessary(value: string) {\n  return isValidIdentifier(value) ? value : `\\\"${value}\\\"`;\n}\n\n/**\n * Validates the identifier from MySql and returns true if it\n * doesn't need to be escaped.\n */\nexport function isValidIdentifier(identifier: string): boolean {\n  const isValidName = /^[a-zA-Z_][a-zA-Z0-9_$]*$/g.test(identifier);\n  const isReservedWord = RESERVED_WORDS.includes(identifier.toUpperCase());\n  return !isReservedWord && isValidName;\n}\n\nconst RESERVED_WORDS = [\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DENSE_RANK',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DOUBLE',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FIRST_VALUE',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'FUNCTION',\n  'GENERATED',\n  'GET',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'IO_AFTER_GTIDS',\n  'IO_BEFORE_GTIDS',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'JSON_TABLE',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LAG',\n  'LAST_VALUE',\n  'LATERAL',\n  'LEAD',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_BIND',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NTH_VALUE',\n  'NTILE',\n  'NULL',\n  'NUMERIC',\n  'OF',\n  'ON',\n  'OPTIMIZE',\n  'OPTIMIZER_COSTS',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PARTITION',\n  'PERCENT_RANK',\n  'PRECISION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'REAL',\n  'RECURSIVE',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'ROW_NUMBER',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SMALLINT',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STORED',\n  'STRAIGHT_JOIN',\n  'SYSTEM',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'VIRTUAL',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n","import { quoteLiteral, unquoteIdentifier } from './sqlUtil';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? quoteIdentAsLiteral(dataset) : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(table: string, dbName?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(table, dbName);\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(table: string, dbName?: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(parts[1]);\n    return query;\n  } else {\n    const database = dbName !== undefined ? quoteIdentAsLiteral(dbName) : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(value: string) {\n  return quoteLiteral(unquoteIdentifier(value));\n}\n","import {\n  CompletionItemKind,\n  CompletionItemPriority,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  LinkedToken,\n  PositionContext,\n  StatementPlacementProvider,\n  SuggestionKind,\n  SuggestionKindProvider,\n  TableDefinition,\n  TableIdentifier,\n  TokenType,\n} from '@grafana/plugin-ui';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: (t?: TableIdentifier) => Promise<TableDefinition[]>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    customStatementPlacement: customStatementPlacementProvider,\n    customSuggestionKinds: customSuggestionKinds(getMeta),\n  });\n\nconst customStatementPlacement = {\n  afterDatabase: 'afterDatabase',\n};\n\nconst customSuggestionKind = {\n  tablesWithinDatabase: 'tablesWithinDatabase',\n};\n\nconst FROMKEYWORD = 'FROM';\n\nexport const customStatementPlacementProvider: StatementPlacementProvider = () => [\n  {\n    id: customStatementPlacement.afterDatabase,\n    resolve: (currentToken, previousKeyword, previousNonWhiteSpace) => {\n      return Boolean(\n        currentToken?.is(TokenType.Delimiter, '.') &&\n          previousKeyword?.value === FROMKEYWORD &&\n          (previousNonWhiteSpace?.is(TokenType.IdentifierQuote) || previousNonWhiteSpace?.isIdentifier()) &&\n          // don't match after table name\n          currentToken\n            ?.getPreviousUntil(TokenType.Keyword, [TokenType.IdentifierQuote], FROMKEYWORD)\n            ?.filter((t) => t.isIdentifier()).length === 1\n      );\n    },\n  },\n];\n\nexport const customSuggestionKinds: (getMeta: CompletionProviderGetterArgs['getMeta']) => SuggestionKindProvider =\n  (getMeta) => () => [\n    {\n      id: SuggestionKind.Tables,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: SuggestionKind.Columns,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseToken = getDatabaseToken(ctx.currentToken);\n        const databaseName = getDatabaseName(databaseToken);\n        const tableName = getTableName(databaseToken);\n\n        if (!databaseName || !tableName) {\n          return [];\n        }\n\n        const suggestions = await getMeta({ schema: databaseName, table: tableName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: customSuggestionKind.tablesWithinDatabase,\n      applyTo: [customStatementPlacement.afterDatabase],\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n  ];\n\nfunction mapToSuggestion(ctx: PositionContext) {\n  return function (tableDefinition: TableDefinition) {\n    return {\n      label: tableDefinition.name,\n      insertText: tableDefinition.completion ?? tableDefinition.name,\n      command: { id: 'editor.action.triggerSuggest', title: '' },\n      kind: CompletionItemKind.Field,\n      sortText: CompletionItemPriority.High,\n      range: {\n        ...ctx.range,\n        startColumn: ctx.range.endColumn,\n        endColumn: ctx.range.endColumn,\n      },\n    };\n  };\n}\n\nfunction getDatabaseName(token: LinkedToken | null | undefined) {\n  if (token?.isIdentifier() && token.value[token.value.length - 1] !== '.') {\n    return token.value;\n  }\n\n  if (token?.is(TokenType.Delimiter, '.')) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value;\n  }\n\n  if (token?.is(TokenType.IdentifierQuote)) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value || token.getNextOfType(TokenType.Identifier)?.value;\n  }\n  return;\n}\n\nfunction getTableName(token: LinkedToken | null | undefined) {\n  const identifier = token?.getNextOfType(TokenType.Identifier);\n  return identifier?.value;\n}\n\nconst getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = currentToken?.getPreviousOfType(TokenType.Keyword, 'SELECT') ?? null;\n  return selectToken?.getNextOfType(TokenType.Keyword, FROMKEYWORD);\n};\n\nconst getDatabaseToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextIdentifier = fromToken?.getNextOfType(TokenType.Identifier);\n  if (nextIdentifier?.isKeyword() && nextIdentifier.next?.is(TokenType.Parenthesis, '(')) {\n    return null;\n  } else {\n    return nextIdentifier;\n  }\n};\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { DataSourceInstanceSettings, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/plugin-ui';\nimport { TemplateSrv, getTemplateSrv } from '@grafana/runtime';\nimport { COMMON_FNS, DB, FuncParameter, SQLQuery, SqlDatasource, formatSQL } from '@grafana/sql';\n\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery } from './flightsqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { quoteIdentifierIfNecessary, quoteLiteral, toRawSql } from './sqlUtil';\nimport { FlightSQLOptions } from './types';\n\nexport class FlightSQLDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<FlightSQLOptions>,\n    protected readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n  }\n\n  getQueryModel() {\n    return { quoteLiteral };\n  }\n\n  getSqlLanguageDefinition(): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: (identifier?: TableIdentifier) => this.fetchMeta(identifier),\n    };\n    this.sqlLanguageDefinition = {\n      id: 'flightsql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    return Promise.resolve(['iox']);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const query = buildTableQuery(dataset);\n    const tables = await this.runSql<string[]>(query, { refId: 'tables' });\n    const tableNames = tables.map((t) => quoteIdentifierIfNecessary(t[0]));\n    tableNames.unshift(...this.getTemplateVariables());\n    return tableNames;\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const interpolatedTable = this.templateSrv.replace(query.table);\n    const queryString = buildColumnQuery(interpolatedTable, query.dataset);\n    const frame = await this.runSql<string[]>(queryString, { refId: `fields-${uuidv4}` });\n    const fields = frame.map((f) => ({\n      name: f[0],\n      text: f[0],\n      value: quoteIdentifierIfNecessary(f[0]),\n      type: f[1],\n      label: f[0],\n    }));\n    fields.unshift(\n      ...this.getTemplateVariables().map((v) => ({\n        name: v,\n        text: v,\n        value: quoteIdentifierIfNecessary(v),\n        type: '',\n        label: v,\n      }))\n    );\n    return mapFieldsToTypes(fields);\n  }\n\n  getTemplateVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && (!defaultDB || identifier?.schema)) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.name, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getFunctions = (): ReturnType<DB['functions']> => {\n    const fns = [...COMMON_FNS, { name: 'VARIANCE' }, { name: 'STDDEV' }];\n    const columnParam: FuncParameter = {\n      name: 'Column',\n      required: true,\n      options: (query) => this.fetchFields(query),\n    };\n    const intervalParam: FuncParameter = {\n      name: 'Interval',\n      required: true,\n      options: () => {\n        return Promise.resolve([{ label: '$__interval', value: '$__interval' }]);\n      },\n    };\n\n    return [\n      ...fns.map((fn) => ({ ...fn, parameters: [columnParam] })),\n      {\n        name: '$__timeGroup',\n        description: 'Time grouping function',\n        parameters: [columnParam, intervalParam],\n      },\n      {\n        name: '$__timeGroupAlias',\n        description: 'Time grouping function with time as alias',\n        parameters: [columnParam, intervalParam],\n      },\n    ];\n  };\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      toRawSql,\n      functions: () => this.getFunctions(),\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(),\n    };\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { SQLQuery, SqlQueryEditorLazy, applyQueryDefaults } from '@grafana/sql';\nimport { InlineFormLabel, LinkButton, Themeable2, withTheme2 } from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../../datasource';\nimport { FlightSQLDatasource } from '../../../../fsql/datasource.flightsql';\nimport { InfluxQuery } from '../../../../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  datasource: InfluxDatasource;\n}\n\nclass UnthemedSQLQueryEditor extends PureComponent<Props> {\n  datasource: FlightSQLDatasource;\n\n  constructor(props: Props) {\n    super(props);\n    const { datasource: influxDatasource } = props;\n\n    this.datasource = new FlightSQLDatasource(\n      {\n        url: influxDatasource.urls[0],\n        access: influxDatasource.access,\n        id: influxDatasource.id,\n\n        jsonData: {\n          // TODO Clean this\n          allowCleartextPasswords: false,\n          tlsAuth: false,\n          tlsAuthWithCACert: false,\n          tlsSkipVerify: false,\n          maxIdleConns: 1,\n          maxOpenConns: 1,\n          maxIdleConnsAuto: true,\n          connMaxLifetime: 1,\n          timezone: '',\n          user: '',\n          database: '',\n          url: influxDatasource.urls[0],\n          timeInterval: '',\n        },\n        meta: influxDatasource.meta,\n        name: influxDatasource.name,\n        readOnly: false,\n        type: influxDatasource.type,\n        uid: influxDatasource.uid,\n      },\n      influxDatasource.templateSrv\n    );\n  }\n\n  transformQuery(query: InfluxQuery & SQLQuery): SQLQuery {\n    const defaultQuery = applyQueryDefaults(query);\n    return {\n      ...defaultQuery,\n      dataset: 'iox',\n      sql: {\n        ...defaultQuery.sql,\n        limit: undefined,\n      },\n    };\n  }\n\n  render() {\n    const { query, theme, onRunQuery, onChange } = this.props;\n    const styles = getStyles(theme);\n\n    const onRunSQLQuery = () => {\n      return onRunQuery();\n    };\n\n    const onSQLChange = (query: SQLQuery) => {\n      // query => rawSql for now\n      onChange({ ...query });\n    };\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <SqlQueryEditorLazy\n          datasource={this.datasource}\n          query={this.transformQuery(query)}\n          onRunQuery={onRunSQLQuery}\n          onChange={onSQLChange}\n          queryHeaderProps={{ dialect: 'influx' }}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/cloud-serverless/query-data/sql/\"\n          >\n            SQL language syntax\n          </LinkButton>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css({\n    height: '200px',\n    maxWidth: '100%',\n    resize: 'vertical',\n    overflow: 'auto',\n    backgroundColor: theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary,\n    paddingBottom: theme.spacing(1),\n  }),\n  editorActions: css({\n    marginTop: '6px',\n  }),\n});\n\nexport const FSQLEditor = withTheme2(UnthemedSQLQueryEditor);\n","import { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import { SelectableValue } from '@grafana/data/src';\n\nimport { ResultFormat } from '../../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import { useId } from 'react';\n\nimport { Stack, InlineField, Input, Select, TextArea } from '@grafana/ui';\n\nimport { InfluxQuery } from '../../../../../types';\nimport { DEFAULT_RESULT_FORMAT, RESULT_FORMATS } from '../../../constants';\nimport { useShadowedState } from '../hooks/useShadowedState';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useId();\n  const selectElementId = useId();\n\n  const resultFormat = query.resultFormat ?? DEFAULT_RESULT_FORMAT;\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n      resultFormat,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <Stack direction={'column'}>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <Stack>\n        <InlineField htmlFor={selectElementId} label=\"Format as\">\n          <Select\n            inputId={selectElementId}\n            onChange={(v) => {\n              onChange({ ...query, resultFormat: v.value });\n              onRunQuery();\n            }}\n            value={resultFormat}\n            options={RESULT_FORMATS}\n          />\n        </InlineField>\n        <InlineField htmlFor={aliasElementId} label=\"Alias by\">\n          <Input\n            id={aliasElementId}\n            type=\"text\"\n            spellCheck={false}\n            placeholder=\"Naming pattern\"\n            onBlur={applyDelayedChangesAndRunQuery}\n            onChange={(e) => {\n              setCurrentAlias(e.currentTarget.value);\n            }}\n            value={currentAlias ?? ''}\n          />\n        </InlineField>\n      </Stack>\n    </Stack>\n  );\n};\n","import { reduce } from 'lodash';\n\nimport { escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { DEFAULT_POLICY, InfluxQueryTag, MetadataQueryType } from './types';\n\nexport const buildMetadataQuery = (params: {\n  type: MetadataQueryType;\n  templateService: TemplateSrv;\n  scopedVars?: ScopedVars;\n  database?: string;\n  measurement?: string;\n  retentionPolicy?: string;\n  tags?: InfluxQueryTag[];\n  withKey?: string;\n  withMeasurementFilter?: string;\n}): string => {\n  let query = '';\n  let {\n    type,\n    templateService,\n    scopedVars,\n    database,\n    measurement,\n    retentionPolicy,\n    tags,\n    withKey,\n    withMeasurementFilter,\n  } = params;\n\n  switch (type) {\n    case 'RETENTION_POLICIES':\n      return 'SHOW RETENTION POLICIES on \"' + database + '\"';\n    case 'FIELDS':\n      if (!measurement || measurement === '') {\n        return 'SHOW FIELD KEYS';\n      }\n\n      // If there is a measurement and it is not empty string\n      if (measurement && !measurement.match(/^\\/.*\\/|^$/)) {\n        measurement = '\"' + measurement + '\"';\n\n        if (retentionPolicy && retentionPolicy !== DEFAULT_POLICY) {\n          retentionPolicy = '\"' + retentionPolicy + '\"';\n          measurement = retentionPolicy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    case 'TAG_KEYS':\n      query = 'SHOW TAG KEYS';\n      break;\n    case 'TAG_VALUES':\n      query = 'SHOW TAG VALUES';\n      break;\n    case 'MEASUREMENTS':\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + escapeRegex(withMeasurementFilter) + '/';\n      }\n      break;\n    default:\n      return query;\n  }\n  if (measurement) {\n    if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n      measurement = '\"' + measurement + '\"';\n    }\n\n    if (retentionPolicy && retentionPolicy !== DEFAULT_POLICY) {\n      retentionPolicy = '\"' + retentionPolicy + '\"';\n      measurement = retentionPolicy + '.' + measurement;\n    }\n\n    if (measurement !== '') {\n      query += ' FROM ' + measurement;\n    }\n  }\n\n  if (withKey) {\n    let keyIdentifier = withKey;\n\n    if (keyIdentifier.endsWith('::tag')) {\n      keyIdentifier = keyIdentifier.slice(0, -5);\n    }\n\n    query += ' WITH KEY = \"' + keyIdentifier + '\"';\n  }\n\n  if (tags && tags.length > 0) {\n    const whereConditions = reduce<InfluxQueryTag, string[]>(\n      tags,\n      (memo, tag) => {\n        // do not add a condition for the key we want to explore for\n        if (tag.key && tag.key === withKey) {\n          return memo;\n        }\n\n        // value operators not supported in these types of queries\n        if (tag.operator === '>' || tag.operator === '<') {\n          return memo;\n        }\n\n        memo.push(renderTagCondition(tag, memo.length, templateService, scopedVars, true));\n        return memo;\n      },\n      []\n    );\n\n    if (whereConditions.length > 0) {\n      query += ' WHERE ' + whereConditions.join(' ');\n    }\n  }\n\n  if (type === 'MEASUREMENTS') {\n    query += ' LIMIT 100';\n    //Solve issue #2524 by limiting the number of measurements returned\n    //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n    //This also could be used for TAG KEYS and TAG VALUES, if desired\n  }\n\n  return query;\n};\n\n// A merge of query_builder/renderTagCondition and influx_query_model/renderTagCondition\nexport function renderTagCondition(\n  tag: InfluxQueryTag,\n  index: number,\n  templateSrv: TemplateSrv,\n  scopedVars?: ScopedVars,\n  interpolate?: boolean\n) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or empty-string\n  // Influx versions before 0.13 had inconsistent requirements on if (numeric) tags are quoted or not.\n  if (value === '' || (operator !== '=~' && operator !== '!~')) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  // quote value unless regex\n  if (operator !== '=~' && operator !== '!~') {\n    if (interpolate) {\n      value = templateSrv.replace(value, scopedVars);\n    } else if (operator !== '>' && operator !== '<') {\n      value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n    }\n  } else if (interpolate) {\n    value = templateSrv.replace(value, scopedVars, 'regex');\n  }\n\n  let escapedKey = `\"${tag.key}\"`;\n\n  if (tag.key.endsWith('::tag')) {\n    escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n  }\n\n  if (tag.key.endsWith('::field')) {\n    escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n  }\n\n  return str + escapedKey + ' ' + operator + ' ' + value;\n}\n","import { ScopedVars } from '@grafana/data/src';\nimport config from 'app/core/config';\n\nimport InfluxDatasource from './datasource';\nimport { buildMetadataQuery } from './influxql_query_builder';\nimport { InfluxQuery, InfluxQueryTag, MetadataQueryType } from './types';\n\ntype MetadataQueryOptions = {\n  type: MetadataQueryType;\n  datasource: InfluxDatasource;\n  scopedVars?: ScopedVars;\n  measurement?: string;\n  retentionPolicy?: string;\n  tags?: InfluxQueryTag[];\n  withKey?: string;\n  withMeasurementFilter?: string;\n};\n\nconst runExploreQuery = async (options: MetadataQueryOptions): Promise<Array<{ text: string }>> => {\n  const { type, datasource, scopedVars, measurement, retentionPolicy, tags, withKey, withMeasurementFilter } = options;\n  const query = buildMetadataQuery({\n    type,\n    scopedVars,\n    measurement,\n    retentionPolicy,\n    tags,\n    withKey,\n    withMeasurementFilter,\n    templateService: datasource.templateSrv,\n    database: datasource.database,\n  });\n  const policy = retentionPolicy ? datasource.templateSrv.replace(retentionPolicy, {}, 'regex') : '';\n  const target: InfluxQuery = {\n    query,\n    policy,\n    rawQuery: true,\n    refId: 'metadataQuery',\n  };\n  if (config.featureToggles.influxdbBackendMigration) {\n    return datasource.runMetadataQuery(target);\n  } else {\n    const options = { policy: target.policy };\n    return datasource.metricFindQuery({ refId: 'run-explore-query', query }, options);\n  }\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'RETENTION_POLICIES', datasource });\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurements(\n  datasource: InfluxDatasource,\n  tags: InfluxQueryTag[],\n  withMeasurementFilter?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'MEASUREMENTS', datasource, tags, withMeasurementFilter });\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeys(\n  datasource: InfluxDatasource,\n  measurement?: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'TAG_KEYS', datasource, measurement, retentionPolicy });\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  datasource: InfluxDatasource,\n  tags: InfluxQueryTag[],\n  withKey: string,\n  measurement?: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  if (withKey.endsWith('::field')) {\n    return [];\n  }\n  const data = await runExploreQuery({\n    type: 'TAG_VALUES',\n    tags,\n    withKey,\n    datasource,\n    measurement,\n    retentionPolicy,\n  });\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeys(\n  datasource: InfluxDatasource,\n  measurement: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'FIELDS', datasource, measurement, retentionPolicy });\n  return data.map((item) => item.text);\n}\n","// it is possible to add fields into the `InfluxQueryTag` structures, and they do work,\n// but in some cases, when we do metadata queries, we have to remove them from the queries.\nimport { InfluxQueryTag } from '../../../../../types';\n\nexport function filterTags(parts: InfluxQueryTag[], allTagKeys: Set<string>): InfluxQueryTag[] {\n  return parts.filter((t) => t.key.endsWith('::tag') || allTagKeys.has(t.key + '::tag'));\n}\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { QueryPartDef } from 'app/features/alerting/state/query_part';\n\nimport InfluxQueryModel from '../../../../../influx_query_model';\nimport queryPart from '../../../../../query_part';\nimport { InfluxQuery, InfluxQueryPart } from '../../../../../types';\nimport { PartParams } from '../visual/PartListSection';\n\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import { TypedVariableModel } from '@grafana/data/src';\nimport { getTemplateSrv } from '@grafana/runtime/src';\n\nexport function getTemplateVariableOptions(wrapper: (v: TypedVariableModel) => string) {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map(wrapper)\n  );\n}\n","// helper function to make it easy to call this from the widget-render-code\nimport { TypedVariableModel } from '@grafana/data/src';\n\nimport { getTemplateVariableOptions } from './getTemplateVariableOptions';\n\nexport function withTemplateVariableOptions(\n  optionsPromise: Promise<string[]>,\n  wrapper: (v: TypedVariableModel) => string,\n  filter?: string\n): Promise<string[]> {\n  let templateVariableOptions = getTemplateVariableOptions(wrapper);\n  if (filter) {\n    templateVariableOptions = templateVariableOptions.filter((tvo) => tvo.indexOf(filter) > -1);\n  }\n  return optionsPromise.then((options) => [...templateVariableOptions, ...options]);\n}\n","import { TypedVariableModel } from '@grafana/data/src';\n\nexport function wrapRegex(v: TypedVariableModel): string {\n  return `/^$${v.name}$/`;\n}\n\nexport function wrapPure(v: TypedVariableModel): string {\n  return `$${v.name}`;\n}\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import { cx } from '@emotion/css';\n\nimport { Select } from '@grafana/ui';\n\nimport { ResultFormat } from '../../../../../types';\nimport { RESULT_FORMATS } from '../../../constants';\nimport { unwrap } from '../utils/unwrap';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  inputId?: string;\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, inputId, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      inputId={inputId}\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport debouncePromise from 'debounce-promise';\nimport { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineLabel, Input, Select } from '@grafana/ui';\n\nimport { useShadowedState } from '../hooks/useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad('');\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen={!loadState.loading}\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { AccessoryButton } from '@grafana/plugin-ui';\n\nimport { DEFAULT_POLICY } from '../../../../../types';\nimport { toSelectableValue } from '../utils/toSelectableValue';\n\nimport { Seg } from './Seg';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === DEFAULT_POLICY)\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n      {measurement && (\n        <AccessoryButton\n          style={{ marginRight: '4px' }}\n          aria-label=\"remove\"\n          icon=\"times\"\n          variant=\"secondary\"\n          onClick={() => {\n            onChange(policy, undefined);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\n\nimport { Input } from '@grafana/ui';\n\nimport { useShadowedState } from '../hooks/useShadowedState';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx((isWide ?? false) ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { unwrap } from '../utils/unwrap';\n\nimport { paddingRightClass } from './styles';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n  inputId?: string;\n};\n\nexport const OrderByTimeSection = ({ value, onChange, inputId }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        inputId={inputId}\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { unwrap } from '../utils/unwrap';\n\nimport { Seg } from './Seg';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { Fragment, useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/plugin-ui';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { toSelectableValue } from '../utils/toSelectableValue';\nimport { unwrap } from '../utils/unwrap';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <button className={cx('gf-form-label', noRightMarginPaddingClass)}>{name}</button>(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Fragment key={index}>\n          <Part\n            name={part.name}\n            params={part.params}\n            onRemove={() => {\n              onRemovePart(index);\n            }}\n            onChange={(pars) => {\n              onChange(index, pars);\n            }}\n          />\n          <AccessoryButton\n            style={{ marginRight: '4px' }}\n            aria-label=\"remove\"\n            icon=\"times\"\n            variant=\"secondary\"\n            onClick={() => {\n              onRemovePart(index);\n            }}\n          />\n        </Fragment>\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../../../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : (tag.condition ?? 'AND');\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/plugin-ui';\n\nimport { InfluxQueryTag } from '../../../../../types';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from '../utils/tagUtils';\nimport { toSelectableValue } from '../utils/toSelectableValue';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '>=' | '<=' | '=~' | '!~' | 'Is' | 'Is Not';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '>=', '<=', '=~', '!~', 'Is', 'Is Not'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => tags.map(toSelectableValue));\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n      <AccessoryButton\n        style={{ marginRight: '4px' }}\n        aria-label=\"remove\"\n        icon=\"times\"\n        variant=\"secondary\"\n        onClick={() => {\n          onRemove();\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useId, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { InlineLabel, SegmentSection, useStyles2 } from '@grafana/ui';\n\nimport InfluxDatasource from '../../../../../datasource';\nimport {\n  getAllMeasurements,\n  getAllPolicies,\n  getFieldKeys,\n  getTagKeys,\n  getTagValues,\n} from '../../../../../influxql_metadata_query';\nimport {\n  addNewGroupByPart,\n  addNewSelectPart,\n  changeGroupByPart,\n  changeSelectPart,\n  normalizeQuery,\n  removeGroupByPart,\n  removeSelectPart,\n} from '../../../../../queryUtils';\nimport { InfluxQuery, InfluxQueryTag } from '../../../../../types';\nimport { DEFAULT_RESULT_FORMAT } from '../../../constants';\nimport { filterTags } from '../utils/filterTags';\nimport { getNewGroupByPartOptions, getNewSelectPartOptions, makePartList } from '../utils/partListUtils';\nimport { withTemplateVariableOptions } from '../utils/withTemplateVariableOptions';\nimport { wrapPure, wrapRegex } from '../utils/wrapper';\n\nimport { FormatAsSection } from './FormatAsSection';\nimport { FromSection } from './FromSection';\nimport { InputSection } from './InputSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { PartListSection } from './PartListSection';\nimport { TagsSection } from './TagsSection';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nexport const VisualInfluxQLEditor = (props: Props): JSX.Element => {\n  const uniqueId = useId();\n  const formatAsId = `influxdb-qe-format-as-${uniqueId}`;\n  const orderByTimeId = `influxdb-qe-order-by${uniqueId}`;\n\n  const styles = useStyles2(getStyles);\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const allTagKeys = useMemo(async () => {\n    const tagKeys = (await getTagKeys(datasource, measurement, policy)).map((tag) => `${tag}::tag`);\n\n    const fieldKeys = (await getFieldKeys(datasource, measurement || '', policy)).map((field) => `${field}::field`);\n\n    return new Set([...tagKeys, ...fieldKeys]);\n  }, [measurement, policy, datasource]);\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined ? getFieldKeys(datasource, measurement, policy) : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getMemoizedTagKeys = useMemo(\n    () => async () => {\n      return [...(await allTagKeys)];\n    },\n    [allTagKeys]\n  );\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getMemoizedTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getMemoizedTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SegmentSection label=\"FROM\" fill={true}>\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => withTemplateVariableOptions(getAllPolicies(datasource), wrapPure)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getAllMeasurements(datasource, filterTags(query.tags ?? [], keys), filter === '' ? undefined : filter)\n              ),\n              wrapRegex,\n              filter\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          WHERE\n        </InlineLabel>\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getMemoizedTagKeys}\n          getTagValueOptions={(key) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) => getTagValues(datasource, filterTags(query.tags ?? [], keys), key, measurement)),\n              wrapRegex\n            )\n          }\n        />\n      </SegmentSection>\n      {selectLists.map((sel, index) => (\n        <SegmentSection key={index} label={index === 0 ? 'SELECT' : ''} fill={true}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SegmentSection>\n      ))}\n      <SegmentSection label=\"GROUP BY\" fill={true}>\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getMemoizedTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"TIMEZONE\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <InlineLabel htmlFor={orderByTimeId} width=\"auto\" className={styles.inlineLabel}>\n          ORDER BY TIME\n        </InlineLabel>\n        <OrderByTimeSection\n          inputId={orderByTimeId}\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SegmentSection>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be applied,\n          as long as you do not edit that query. */}\n      <SegmentSection label=\"LIMIT\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          SLIMIT\n        </InlineLabel>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection htmlFor={formatAsId} label=\"FORMAT AS\" fill={true}>\n        <FormatAsSection\n          inputId={formatAsId}\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n              ALIAS\n            </InlineLabel>\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SegmentSection>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    inlineLabel: css({\n      color: theme.colors.primary.text,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { QueryEditorProps } from '@grafana/data/src';\n\nimport InfluxDatasource from '../../../datasource';\nimport { buildRawQuery } from '../../../queryUtils';\nimport { InfluxOptions, InfluxQuery, InfluxVersion } from '../../../types';\n\nimport { FluxQueryEditor } from './flux/FluxQueryEditor';\nimport { FSQLEditor } from './fsql/FSQLEditor';\nimport { QueryEditorModeSwitcher } from './influxql/QueryEditorModeSwitcher';\nimport { RawInfluxQLEditor } from './influxql/code/RawInfluxQLEditor';\nimport { VisualInfluxQLEditor as VisualInfluxQLEditor } from './influxql/visual/VisualInfluxQLEditor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  switch (datasource.version) {\n    case InfluxVersion.Flux:\n      return (\n        <div className=\"gf-form-query-content\">\n          <FluxQueryEditor query={query} onChange={onChange} datasource={datasource} />\n        </div>\n      );\n    case InfluxVersion.SQL:\n      return <FSQLEditor datasource={datasource} query={query} onChange={onChange} onRunQuery={onRunQuery} />;\n    case InfluxVersion.InfluxQL:\n    default:\n      return (\n        <div className={css({ display: 'flex' })}>\n          <div className={css({ flexGrow: 1 })}>\n            {query.rawQuery ? (\n              <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n            ) : (\n              <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n            )}\n          </div>\n          <QueryEditorModeSwitcher\n            isRaw={query.rawQuery ?? false}\n            onChange={(value) => {\n              onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n              onRunQuery();\n            }}\n          />\n        </div>\n      );\n  }\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nexport const InfluxCheatSheet = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>InfluxDB Cheat Sheet</h2>\n      {CHEAT_SHEET_ITEMS.map((item) => (\n        <div className={styles.cheatSheetItem} key={item.title}>\n          <div className={styles.cheatSheetItemTitle}>{item.title}</div>\n          {item.label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  cheatSheetItem: css({\n    margin: theme.spacing(3, 0),\n  }),\n  cheatSheetItemTitle: css({\n    fontSize: theme.typography.h3.fontSize,\n  }),\n});\n","import { InfluxCheatSheet } from './InfluxCheatSheet';\n\nexport function InfluxStartPage() {\n  return <InfluxCheatSheet />;\n}\n","import { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data/src';\nimport { InlineFormLabel, Input, Stack } from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../datasource';\nimport { InfluxOptions, InfluxQuery } from '../../../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>) => {\n  const { query, onChange } = props;\n  const [eventQuery, setEventQuery] = useState<string>(query.query ?? '');\n\n  const [textColumn, setTextColumn] = useState<string>(query.textColumn ?? '');\n  const [tagsColumn, setTagsColumn] = useState<string>(query.tagsColumn ?? '');\n  const [timeEndColumn, setTimeEndColumn] = useState<string>(query?.timeEndColumn ?? '');\n  const [titleColumn] = useState<string>(query?.titleColumn ?? '');\n  const updateValue = <K extends keyof InfluxQuery, V extends InfluxQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      rawQuery: true,\n      fromAnnotations: true,\n      textEditor: true,\n    });\n  };\n  return (\n    <Stack gap={5} direction=\"column\">\n      <Stack gap={0.5} direction=\"column\">\n        <Stack gap={0}>\n          <InlineFormLabel width={12}>InfluxQL Query</InlineFormLabel>\n          <Input\n            value={eventQuery}\n            onChange={(e) => setEventQuery(e.currentTarget.value ?? '')}\n            onBlur={() => updateValue('query', eventQuery)}\n            placeholder=\"select text from events where $timeFilter limit 1000\"\n          />\n        </Stack>\n        <InlineFormLabel\n          width={12}\n          tooltip={\n            <div>\n              If your influxdb query returns more than one field you need to specify the column names below. An\n              annotation event is composed of a title, tags, and an additional text field. Optionally you can map the\n              timeEnd column for region annotation usage.\n            </div>\n          }\n        >\n          Field mappings\n        </InlineFormLabel>\n        <Stack gap={0.5} alignItems={'flex-start'} wrap={'wrap'}>\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>Text</InlineFormLabel>\n            <Input\n              value={textColumn}\n              onChange={(e) => setTextColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('textColumn', textColumn)}\n            />\n          </Stack>\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>Tags</InlineFormLabel>\n            <Input\n              value={tagsColumn}\n              onChange={(e) => setTagsColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('tagsColumn', tagsColumn)}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>TimeEnd</InlineFormLabel>\n            <Input\n              value={timeEndColumn}\n              onChange={(e) => setTimeEndColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('timeEndColumn', timeEndColumn)}\n            />\n          </Stack>\n          <div className=\"gf-form ng-hide\">\n            <InlineFormLabel width={12}>Title</InlineFormLabel>\n            <Input defaultValue={titleColumn} />\n          </div>\n        </Stack>\n      </Stack>\n      {/*Empty div to preserve the bottom margin */}\n      <div />\n    </Stack>\n  );\n};\n","import { each, map, includes, flatten, keys } from 'lodash';\n\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\nimport TableModel from 'app/core/TableModel';\n\nimport { InfluxQuery } from './types';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias?: string;\n  annotation?: InfluxQuery;\n  meta?: QueryResultMeta;\n\n  constructor(options: {\n    series: any;\n    alias?: string;\n    annotation?: InfluxQuery;\n    meta?: QueryResultMeta;\n    refId?: string;\n  }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({\n          title: seriesName,\n          target: seriesName,\n          datapoints: datapoints,\n          tags: series.tags,\n          meta: this.meta,\n          refId: this.refId,\n        });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias?.replace(regex, (match, g1, g2) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex] ?? match;\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: string[] = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation?.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation?.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation?.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation?.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t) => {\n                return value[t];\n              })\n              .map((t) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    // the order is:\n    // - first the first item from the value-array (this is often (always?) the timestamp)\n    // - then all the tag-values\n    // - then the rest of the value-array\n    //\n    // we have to keep this order both in table.columns and table.rows\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        const firstCol = series.columns[0];\n        // Check the first column's name, if it is `time`, we\n        // mark it as having the type time\n        const firstTableCol = firstCol === 'time' ? { text: 'Time', type: FieldType.time } : { text: firstCol };\n        table.columns.push(firstTableCol);\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (j = 1; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import { AnnotationQuery, AnnotationSupport } from '@grafana/data';\n\nimport { InfluxQuery, InfluxQueryTag } from './types';\n\ntype LegacyAnnotation = {\n  query?: string;\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  target?: {\n    limit?: string | number | undefined;\n    matchAny?: boolean;\n    tags?: InfluxQueryTag[];\n    type?: string;\n  };\n};\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // eslint-ignore-next-line\n  const target: InfluxQuery = {\n    refId: '',\n    query: json.query ?? '',\n    queryType: 'tags',\n    fromAnnotations: true,\n    tagsColumn: json.tagsColumn ?? '',\n    textColumn: json.textColumn ?? '',\n    timeEndColumn: json.timeEndColumn ?? '',\n    titleColumn: json.titleColumn ?? '',\n    name: json.name ?? '',\n  };\n\n  // handle json target fields\n  if (json.target && json.target.limit) {\n    target.limit = json.target.limit;\n  }\n\n  if (json.target && json.target.matchAny) {\n    target.matchAny = json.target.matchAny;\n  }\n\n  if (json.target && json.target.tags) {\n    target.tags = json.target.tags;\n  }\n\n  if (json.target && json.target.type) {\n    target.type = json.target.type;\n  }\n\n  return target;\n};\n\nexport const prepareAnnotation: AnnotationSupport<InfluxQuery, AnnotationQuery<InfluxQuery>>['prepareAnnotation'] = (\n  json\n) => {\n  // make sure that any additional target fields are migrated\n  json.target = json.target && !json.target?.query ? migrateLegacyAnnotation(json) : json.target;\n\n  return json;\n};\n","import { each, flatten, groupBy, isArray } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, FieldType, QueryResultMeta } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\nimport TableModel from 'app/core/TableModel';\n\nimport { InfluxQuery } from './types';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isRetentionPolicyQuery = normalizedQuery.indexOf('show retention policies') >= 0;\n    const isValueFirst = normalizedQuery.indexOf('show field keys') >= 0 || isRetentionPolicyQuery;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            res.add(value[0].toString());\n          } else if (value[1] !== undefined) {\n            res.add(value[1].toString());\n          } else {\n            res.add(value[0].toString());\n          }\n        } else {\n          res.add(value.toString());\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n\n  getTable(dfs: DataFrame[], target: InfluxQuery, meta: QueryResultMeta): TableModel {\n    let table = new TableModel();\n\n    if (dfs.length > 0) {\n      table.meta = {\n        ...meta,\n        executedQueryString: dfs[0].meta?.executedQueryString,\n      };\n\n      table.refId = target.refId;\n      table = getTableCols(dfs, table, target);\n\n      // if group by tag(s) added\n      if (dfs[0].fields[1] && dfs[0].fields[1].labels) {\n        let dfsByLabels = groupBy(dfs, (df: DataFrame) =>\n          df.fields[1].labels ? Object.values(df.fields[1].labels!) : null\n        );\n        const labels = Object.keys(dfsByLabels);\n        const dfsByLabelValues = Object.values(dfsByLabels);\n\n        for (let i = 0; i < dfsByLabelValues.length; i++) {\n          table = getTableRows(dfsByLabelValues[i], table, [...labels[i].split(',')]);\n        }\n      } else {\n        table = getTableRows(dfs, table, []);\n      }\n    }\n\n    return table;\n  }\n\n  async transformAnnotationResponse(\n    annotation: InfluxQuery,\n    data: FetchResponse<BackendDataSourceResponse>,\n    target: InfluxQuery\n  ): Promise<AnnotationEvent[]> {\n    const rsp = toDataQueryResponse(data, [target]);\n\n    if (!rsp) {\n      return [];\n    }\n\n    const table = this.getTable(rsp.data, target, {});\n    const list: AnnotationEvent[] = [];\n    let titleColIndex = 0;\n    let timeColIndex = 0;\n    let timeEndColIndex = 0;\n    let textColIndex = 0;\n    const tagsColIndexes: number[] = [];\n\n    each(table.columns, (column, index) => {\n      if (column.text.toLowerCase() === 'time') {\n        timeColIndex = index;\n        return;\n      }\n      if (column.text === annotation.titleColumn) {\n        titleColIndex = index;\n        return;\n      }\n      if (colContainsTag(column.text, annotation.tagsColumn)) {\n        tagsColIndexes.push(index);\n        return;\n      }\n      if (annotation.textColumn && column.text.includes(annotation.textColumn)) {\n        textColIndex = index;\n        return;\n      }\n      if (column.text === annotation.timeEndColumn) {\n        timeEndColIndex = index;\n        return;\n      }\n      // legacy case\n      if (!titleColIndex && textColIndex !== index) {\n        titleColIndex = index;\n      }\n    });\n\n    each(table.rows, (value) => {\n      const data = {\n        annotation: annotation,\n        time: +new Date(value[timeColIndex]),\n        title: value[titleColIndex],\n        timeEnd: value[timeEndColIndex],\n        // Remove empty values, then split in different tags for comma separated values\n        tags: flatten(\n          tagsColIndexes\n            .filter((t) => {\n              return value[t];\n            })\n            .map((t) => {\n              return value[t].split(',');\n            })\n        ),\n        text: value[textColIndex],\n      };\n\n      list.push(data);\n    });\n\n    return list;\n  }\n}\n\nfunction colContainsTag(colText: string, tagsColumn?: string): boolean {\n  const tags = (tagsColumn || '').replace(' ', '').split(',');\n  for (const tag of tags) {\n    if (tag !== '' && colText.includes(tag)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getTableCols(dfs: DataFrame[], table: TableModel, target: InfluxQuery): TableModel {\n  const selectedParams = getSelectedParams(target);\n\n  dfs[0].fields.forEach((field) => {\n    // Time col\n    if (field.name.toLowerCase() === 'time') {\n      table.columns.push({ text: 'Time', type: FieldType.time });\n    }\n\n    // Group by (label) column(s)\n    else if (field.name.toLowerCase() === 'value') {\n      if (field.labels) {\n        Object.keys(field.labels).forEach((key) => {\n          table.columns.push({ text: key });\n        });\n      }\n    }\n  });\n\n  // Get cols for annotationQuery\n  if (dfs[0].refId === 'metricFindQuery') {\n    dfs.forEach((field) => {\n      if (field.name) {\n        table.columns.push({ text: field.name });\n      }\n    });\n  }\n\n  // Select (metric) column(s)\n  for (let i = 0; i < selectedParams.length; i++) {\n    table.columns.push({ text: selectedParams[i] });\n  }\n\n  // ISSUE: https://github.com/grafana/grafana/issues/63842\n  // if rawQuery and\n  // has other selected fields in the query and\n  // dfs field names are in the rawQuery but\n  // the selected params object doesn't exist in the query then\n  // add columns to the table\n  if (\n    target.rawQuery &&\n    selectedParams.length === 0 &&\n    rawQuerySelectedFieldsInDataframe(target.query, dfs) &&\n    dfs[0].refId !== 'metricFindQuery'\n  ) {\n    dfs.map((df) => {\n      if (df.name) {\n        table.columns.push({ text: df.name });\n      }\n    });\n  }\n\n  return table;\n}\n\nfunction getTableRows(dfs: DataFrame[], table: TableModel, labels: string[]): TableModel {\n  const values = dfs[0].fields[0].values;\n\n  for (let i = 0; i < values.length; i++) {\n    const time = values[i];\n    const metrics = dfs.map((df: DataFrame) => {\n      return df.fields[1] ? df.fields[1].values[i] : null;\n    });\n    if (metrics.indexOf(null) < 0) {\n      table.rows.push([time, ...labels, ...metrics]);\n    }\n  }\n  return table;\n}\n\nexport function getSelectedParams(target: InfluxQuery): string[] {\n  let allParams: string[] = [];\n  target.select?.forEach((select) => {\n    const selector = select.filter((x) => x.type !== 'field');\n    if (selector.length > 0) {\n      const aliasIfExist = selector.find((s) => s.type === 'alias');\n      if (aliasIfExist) {\n        allParams.push(aliasIfExist.params?.[0].toString() ?? '');\n      } else {\n        allParams.push(selector[0].type);\n      }\n    } else {\n      if (select[0] && select[0].params && select[0].params[0]) {\n        allParams.push(select[0].params[0].toString());\n      }\n    }\n  });\n\n  let uniqueParams: string[] = [];\n  allParams.forEach((param) => {\n    uniqueParams.push(incrementName(param, param, uniqueParams, 0));\n  });\n\n  return uniqueParams;\n}\n\nfunction incrementName(name: string, nameIncrement: string, params: string[], index: number): string {\n  if (params.indexOf(nameIncrement) > -1) {\n    index++;\n    return incrementName(name, name + '_' + index, params, index);\n  }\n  return nameIncrement;\n}\n\nfunction rawQuerySelectedFieldsInDataframe(query: string | undefined, dfs: DataFrame[]) {\n  const names: Array<string | undefined> = dfs.map((df: DataFrame) => df.name);\n\n  const colsInRawQuery = names.every((name: string | undefined) => {\n    if (name && query) {\n      // table name and field, i.e. cpu.usage_guest_nice becomes ['cpu', 'usage_guest_nice']\n      const nameParts = name.split('.');\n\n      return nameParts.every((np) => query.toLowerCase().includes(np.toLowerCase()));\n    }\n\n    return false;\n  });\n\n  const queryChecks = ['*', 'SHOW'];\n\n  const otherChecks: boolean = queryChecks.some((qc: string) => {\n    if (query) {\n      return query.toLowerCase().includes(qc.toLowerCase());\n    }\n\n    return false;\n  });\n\n  return colsInRawQuery || otherChecks;\n}\n","import { QueryEditorProps } from '@grafana/data';\nimport { InlineFieldRow, Input, TextArea } from '@grafana/ui';\nimport { InlineField } from '@grafana/ui/';\n\nimport InfluxDatasource from '../../../datasource';\nimport { InfluxOptions, InfluxQuery, InfluxVariableQuery, InfluxVersion } from '../../../types';\nimport { FluxQueryEditor } from '../query/flux/FluxQueryEditor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions, InfluxVariableQuery>;\n\nconst refId = 'InfluxVariableQueryEditor-VariableQuery';\n\nexport const InfluxVariableEditor = ({ onChange, datasource, query }: Props) => {\n  const getVariableQuery = (q: InfluxVariableQuery | string) => {\n    // in legacy variable support query can be only a string\n    // in new variable support query can be an object and hold more information\n    // to be able to support old version we check the query here\n    if (typeof q !== 'string') {\n      return q;\n    }\n\n    return {\n      refId,\n      query: q,\n      ...(datasource.version === InfluxVersion.Flux ? { maxDataPoints: 1000 } : {}),\n    };\n  };\n\n  switch (datasource.version) {\n    case InfluxVersion.Flux:\n      return (\n        <>\n          <FluxQueryEditor\n            datasource={datasource}\n            query={getVariableQuery(query)}\n            onChange={(q) => {\n              onChange({ ...query, query: q.query ?? '' });\n            }}\n          />\n          <InlineFieldRow>\n            <InlineField\n              label=\"Max Data Points\"\n              labelWidth={20}\n              required\n              grow\n              aria-labelledby=\"flux-maxdatapoints\"\n              tooltip={<div>Upper boundary of data points will return for the variable query.</div>}\n            >\n              <Input\n                id=\"influx-sql-variable-maxdatapoints\"\n                aria-label=\"flux-maxdatapoints\"\n                type=\"number\"\n                defaultValue={query.maxDataPoints ?? 1000}\n                placeholder=\"Default is 1000\"\n                onBlur={(e) => {\n                  onChange({\n                    refId,\n                    query: query.query,\n                    maxDataPoints: Number.parseInt(e.currentTarget.value, 10),\n                  });\n                }}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </>\n      );\n    default:\n      return (\n        <InlineFieldRow>\n          <InlineField label=\"Query\" labelWidth={20} required grow aria-labelledby=\"influx-variable-query\">\n            <TextArea\n              aria-label=\"influx-variable-query\"\n              defaultValue={getVariableQuery(query).query}\n              placeholder=\"metric name or tags query\"\n              rows={1}\n              onBlur={(e) => {\n                onChange({ refId, query: e.currentTarget.value ?? '' });\n              }}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      );\n  }\n};\n","import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { InfluxVariableEditor } from './components/editor/variable/VariableQueryEditor';\nimport InfluxDatasource from './datasource';\nimport { InfluxVariableQuery } from './types';\n\nexport class InfluxVariableSupport extends CustomVariableSupport<InfluxDatasource> {\n  editor = InfluxVariableEditor;\n\n  constructor(\n    private readonly datasource: InfluxDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super();\n  }\n\n  query(request: DataQueryRequest<InfluxVariableQuery>): Observable<DataQueryResponse> {\n    let query: string | undefined;\n    if (typeof request.targets[0] === 'string') {\n      query = request.targets[0];\n    } else {\n      query = request.targets[0].query;\n    }\n\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const q = this.templateSrv.replace(query, request.scopedVars, this.datasource.interpolateQueryExpr);\n    const timeFilter = this.datasource.getTimeFilter({ rangeRaw: request.range.raw, timezone: request.timezone });\n    const interpolated = q.replace('$timeFilter', timeFilter);\n    const metricFindStream = from(\n      this.datasource.metricFindQuery(\n        {\n          refId: request.targets[0].refId,\n          query: interpolated,\n          maxDataPoints: request.targets[0].maxDataPoints ?? 1000,\n        },\n        { range: request.range }\n      )\n    );\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n}\n","import { cloneDeep, extend, has, isString, map as _map, omit, pick, reduce } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AdHocVariableFilter,\n  AnnotationEvent,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceGetTagKeysOptions,\n  DataSourceGetTagValuesOptions,\n  DataSourceInstanceSettings,\n  dateMath,\n  DateTime,\n  escapeRegex,\n  FieldType,\n  MetricFindValue,\n  QueryResultMeta,\n  QueryVariableModel,\n  RawTimeRange,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TimeSeries,\n  toDataFrame,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  DataSourceWithBackend,\n  FetchResponse,\n  getBackendSrv,\n  getTemplateSrv,\n  TemplateSrv,\n} from '@grafana/runtime';\nimport { QueryFormat, SQLQuery } from '@grafana/sql';\nimport config from 'app/core/config';\n\nimport { AnnotationEditor } from './components/editor/annotation/AnnotationEditor';\nimport { FluxQueryEditor } from './components/editor/query/flux/FluxQueryEditor';\nimport { BROWSER_MODE_DISABLED_MESSAGE } from './constants';\nimport { toRawSql } from './fsql/sqlUtil';\nimport InfluxQueryModel from './influx_query_model';\nimport InfluxSeries from './influx_series';\nimport { buildMetadataQuery } from './influxql_query_builder';\nimport { prepareAnnotation } from './migrations';\nimport { buildRawQuery, removeRegexWrapper } from './queryUtils';\nimport ResponseParser from './response_parser';\nimport {\n  DEFAULT_POLICY,\n  InfluxOptions,\n  InfluxQuery,\n  InfluxQueryTag,\n  InfluxVariableQuery,\n  InfluxVersion,\n} from './types';\nimport { InfluxVariableSupport } from './variables';\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database?: string;\n  basicAuth?: string;\n  withCredentials?: boolean;\n  access: 'direct' | 'proxy';\n  responseParser: ResponseParser;\n  httpMode: string;\n  version?: InfluxVersion;\n  isProxyAccess: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.access = instanceSettings.access;\n    const settingsData: InfluxOptions = instanceSettings.jsonData ?? {};\n    this.database = settingsData.dbName ?? instanceSettings.database;\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.version = settingsData.version ?? InfluxVersion.InfluxQL;\n    this.isProxyAccess = instanceSettings.access === 'proxy';\n    this.variables = new InfluxVariableSupport(this, this.templateSrv);\n\n    if (this.version === InfluxVersion.Flux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    } else {\n      this.annotations = {\n        QueryEditor: AnnotationEditor,\n        prepareAnnotation,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (!this.isProxyAccess) {\n      const error = new Error(BROWSER_MODE_DISABLED_MESSAGE);\n      return throwError(() => error);\n    }\n\n    return this._query(request);\n  }\n\n  _query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    // for not-flux queries we call `this.classicQuery`, and that\n    // handles the is-hidden situation.\n    // for the flux-case, we do the filtering here\n    const filteredRequest = {\n      ...request,\n      targets: request.targets.filter((t) => t.hide !== true),\n    };\n\n    // migrate annotations\n    if (filteredRequest.targets.some((target: InfluxQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const target of filteredRequest.targets) {\n        if (target.query) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvents(filteredRequest, target)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => subscriber.error(new Error(ex)))\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    if (this.version === InfluxVersion.InfluxQL && !this.isMigrationToggleOnAndIsAccessProxy()) {\n      // Fallback to classic query support\n      return this.classicQuery(request);\n    }\n\n    return super.query(filteredRequest);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    switch (this.version) {\n      case InfluxVersion.Flux:\n        return query.query;\n      case InfluxVersion.SQL:\n        return toRawSql(query);\n      case InfluxVersion.InfluxQL:\n        return new InfluxQueryModel(query).render(false);\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.version === InfluxVersion.Flux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(\n    query: InfluxQuery,\n    scopedVars: ScopedVars,\n    filters?: AdHocVariableFilter[]\n  ): InfluxQuery & SQLQuery {\n    const variables = scopedVars || {};\n\n    // We want to interpolate these variables on backend.\n    // The pre-calculated values are replaced with the variable strings.\n    variables.__interval = {\n      value: '$__interval',\n    };\n    variables.__interval_ms = {\n      value: '$__interval_ms',\n    };\n\n    if (this.version === InfluxVersion.Flux) {\n      return {\n        ...query,\n        query: this.templateSrv.replace(query.query ?? '', variables), // The raw query text\n      };\n    }\n\n    if (this.version === InfluxVersion.SQL || this.isMigrationToggleOnAndIsAccessProxy()) {\n      query = this.applyVariables(query, variables, filters);\n      if (query.adhocFilters?.length) {\n        const adhocFiltersToTags: InfluxQueryTag[] = (query.adhocFilters ?? []).map((af) => {\n          const { condition, ...asTag } = af;\n          asTag.value = this.templateSrv.replace(asTag.value ?? '', variables);\n          return asTag;\n        });\n        query.tags = [...(query.tags ?? []), ...adhocFiltersToTags];\n      }\n    }\n\n    return query;\n  }\n\n  targetContainsTemplate(target: InfluxQuery) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.version === InfluxVersion.Flux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.containsTemplate(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      if (this.version === InfluxVersion.Flux) {\n        return {\n          ...query,\n          datasource: this.getRef(),\n          query: this.templateSrv.replace(\n            query.query ?? '',\n            scopedVars,\n            (value: string | string[] = [], variable: QueryVariableModel) =>\n              this.interpolateQueryExpr(value, variable, query.query)\n          ), // The raw query text\n        };\n      }\n\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: InfluxQuery & SQLQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]) {\n    const expandedQuery = { ...query };\n    if (query.groupBy) {\n      expandedQuery.groupBy = query.groupBy.map((groupBy) => {\n        return {\n          ...groupBy,\n          params: groupBy.params?.map((param) => this.templateSrv.replace(param.toString(), undefined)),\n        };\n      });\n    }\n\n    if (query.select) {\n      expandedQuery.select = query.select.map((selects) => {\n        return selects.map((select) => {\n          return {\n            ...select,\n            params: select.params?.map((param) => this.templateSrv.replace(param.toString(), scopedVars)),\n          };\n        });\n      });\n    }\n\n    if (query.tags) {\n      expandedQuery.tags = query.tags.map((tag) => {\n        // Remove the regex wrapper if the operator is not a regex operator\n        if (tag.operator !== '=~' && tag.operator !== '!~') {\n          tag.value = removeRegexWrapper(tag.value);\n        }\n\n        return {\n          ...tag,\n          key: this.templateSrv.replace(tag.key, scopedVars),\n          value: this.templateSrv.replace(\n            tag.value ?? '',\n            scopedVars,\n            (value: string | string[] = [], variable: QueryVariableModel) =>\n              this.interpolateQueryExpr(value, variable, tag.value)\n          ),\n        };\n      });\n    }\n\n    return {\n      ...expandedQuery,\n      adhocFilters: filters ?? [],\n      query: this.templateSrv.replace(\n        query.query ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.query)\n      ), // The raw sql query text\n      rawSql: this.templateSrv.replace(\n        query.rawSql ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.rawSql)\n      ), // The raw sql query text\n      alias: this.templateSrv.replace(query.alias ?? '', scopedVars),\n      limit: this.templateSrv.replace(query.limit?.toString() ?? '', scopedVars),\n      measurement: this.templateSrv.replace(\n        query.measurement ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.measurement)\n      ),\n      policy: this.templateSrv.replace(query.policy ?? '', scopedVars),\n      slimit: this.templateSrv.replace(query.slimit?.toString() ?? '', scopedVars),\n      tz: this.templateSrv.replace(query.tz ?? '', scopedVars),\n    };\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: QueryVariableModel, query?: string) {\n    if (typeof value === 'string') {\n      // Check the value is a number. If not run to escape special characters\n      if (!isNaN(parseFloat(value))) {\n        return value;\n      }\n    }\n\n    // If template variable is a multi-value variable\n    // we always want to deal with special chars.\n    if (variable.multi) {\n      if (typeof value === 'string') {\n        // Check the value is a number. If not run to escape special characters\n        if (isNaN(parseFloat(value))) {\n          return escapeRegex(value);\n        }\n        return value;\n      }\n\n      // If the value is a string array first escape them then join them with pipe\n      // then put inside parenthesis.\n      return `(${value.map((v) => escapeRegex(v)).join('|')})`;\n    }\n\n    // If the variable is not a multi-value variable\n    // we want to see how it's been used. If it is used in a regex expression\n    // we escape it. Otherwise, we return it directly.\n    // The regex below searches for regexes within the query string\n    const regexMatcher = new RegExp(\n      /\\/((?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+)\\/((?:g(?:im?|mi?)?|i(?:gm?|mg?)?|m(?:gi?|ig?)?)?)/,\n      'gm'\n    );\n    // If matches are found this regex is evaluated to check if the variable is contained in the regex /^...$/ (^ and $ is optional)\n    // i.e. /^$myVar$/ or /$myVar/ or /^($myVar)$/\n    const regex = new RegExp(`\\\\/(?:\\\\^)?(.*)(\\\\$${variable.name})(.*)(?:\\\\$)?\\\\/`, 'gm');\n    if (!query) {\n      return value;\n    }\n\n    const queryMatches = query.match(regexMatcher);\n    if (!queryMatches) {\n      return value;\n    }\n    for (const match of queryMatches) {\n      if (!match.match(regex)) {\n        continue;\n      }\n\n      // If the value is a string array first escape them then join them with pipe\n      // then put inside parenthesis.\n      return typeof value === 'string' ? escapeRegex(value) : `(${value.map((v) => escapeRegex(v)).join('|')})`;\n    }\n\n    return value;\n  }\n\n  async runMetadataQuery(target: InfluxQuery): Promise<MetricFindValue[]> {\n    return lastValueFrom(\n      super.query({\n        targets: [target],\n      } as DataQueryRequest)\n    ).then(this.toMetricFindValue);\n  }\n\n  async metricFindQuery(query: InfluxVariableQuery, options?: any): Promise<MetricFindValue[]> {\n    if (\n      this.version === InfluxVersion.Flux ||\n      this.version === InfluxVersion.SQL ||\n      this.isMigrationToggleOnAndIsAccessProxy()\n    ) {\n      const target: InfluxQuery & SQLQuery = {\n        refId: 'metricFindQuery',\n        query: query.query,\n        rawQuery: true,\n        ...(this.version === InfluxVersion.SQL ? { rawSql: query.query, format: QueryFormat.Table } : {}),\n      };\n      return lastValueFrom(\n        super.query({\n          ...(options ?? {}), // includes 'range'\n          maxDataPoints: query.maxDataPoints,\n          targets: [target],\n        })\n      ).then(this.toMetricFindValue);\n    }\n\n    const interpolated = this.templateSrv.replace(\n      query.query,\n      options?.scopedVars,\n      (value: string | string[] = [], variable: QueryVariableModel) =>\n        this.interpolateQueryExpr(value, variable, query.query)\n    );\n\n    return lastValueFrom(this._seriesQuery(interpolated, options)).then((resp) => {\n      return this.responseParser.parse(query.query, resp);\n    });\n  }\n\n  toMetricFindValue(rsp: DataQueryResponse): MetricFindValue[] {\n    const valueMap = new Map<string, MetricFindValue>();\n    // Create MetricFindValue object for all frames\n    rsp?.data?.forEach((frame: DataFrame) => {\n      if (frame && frame.length > 0) {\n        let field = frame.fields.find((f) => f.type === FieldType.string);\n        if (!field) {\n          field = frame.fields.find((f) => f.type !== FieldType.time);\n        }\n        if (field) {\n          field.values.forEach((v) => {\n            valueMap.set(v.toString(), { text: v.toString() });\n          });\n        }\n      }\n    });\n    return Array.from(valueMap.values());\n  }\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // Used in public/app/features/variables/adhoc/picker/AdHocFilterKey.tsx::fetchFilterKeys\n  getTagKeys(options?: DataSourceGetTagKeysOptions<InfluxQuery>) {\n    const query = buildMetadataQuery({\n      type: 'TAG_KEYS',\n      templateService: this.templateSrv,\n      database: this.database,\n    });\n\n    return this.metricFindQuery({ refId: 'get-tag-keys', query });\n  }\n\n  getTagValues(options: DataSourceGetTagValuesOptions<InfluxQuery>) {\n    const query = buildMetadataQuery({\n      type: 'TAG_VALUES',\n      templateService: this.templateSrv,\n      database: this.database,\n      withKey: options.key,\n    });\n\n    return this.metricFindQuery({ refId: 'get-tag-values', query });\n  }\n\n  /**\n   * @deprecated\n   */\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  /**\n   * @deprecated\n   */\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo: string[], value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  /**\n   * @deprecated\n   */\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (options?.policy && options.policy !== DEFAULT_POLICY) {\n      params.rp = options.policy;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: FetchResponse) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  /**\n   * @deprecated\n   */\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: { rangeRaw: RawTimeRange; timezone: string }) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: DateTime | string, roundUp: boolean, timezone: string) {\n    let outPutDate;\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      outPutDate = dateMath.parse(date, roundUp, timezone);\n      if (!outPutDate) {\n        throw new Error('unable to parse date');\n      }\n      date = outPutDate;\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  // ------------------------ Legacy Code - Before Backend Migration ---------------\n\n  isMigrationToggleOnAndIsAccessProxy() {\n    return config.featureToggles.influxdbBackendMigration && this.access === 'proxy';\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   * @deprecated\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = options.filters;\n    const adhocFiltersFromDashboard = options.targets.flatMap((target: InfluxQuery) => target.adhocFilters ?? []);\n    if (adhocFilters?.length || adhocFiltersFromDashboard?.length) {\n      const ahFilters = adhocFilters?.length ? adhocFilters : adhocFiltersFromDashboard;\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(ahFilters);\n    }\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeriesToDataFrame(timeSeries[y]));\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationEvents(options: DataQueryRequest, annotation: InfluxQuery): Promise<AnnotationEvent[]> {\n    if (this.version === InfluxVersion.Flux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    if (this.isMigrationToggleOnAndIsAccessProxy()) {\n      // We want to send our query to the backend as a raw query\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        datasource: this.getRef(),\n        query: this.templateSrv.replace(\n          annotation.query,\n          undefined,\n          (value: string | string[] = [], variable: QueryVariableModel) =>\n            this.interpolateQueryExpr(value, variable, annotation.query)\n        ),\n        rawQuery: true,\n      };\n\n      return lastValueFrom(\n        getBackendSrv()\n          .fetch<BackendDataSourceResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries: [target],\n            },\n            requestId: annotation.name,\n          })\n          .pipe(\n            map(\n              async (res: FetchResponse<BackendDataSourceResponse>) =>\n                await this.responseParser.transformAnnotationResponse(annotation, res, target)\n            )\n          )\n      );\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.range.raw, timezone: options.timezone });\n    let query = annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, (value: string | string[] = [], variable: QueryVariableModel) =>\n      this.interpolateQueryExpr(value, variable, query)\n    );\n\n    return lastValueFrom(this._seriesQuery(query, options)).then((data) => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: annotation,\n      }).getAnnotations();\n    });\n  }\n}\n\n// we detect the field type based on the value-array\nfunction getFieldType(values: unknown[]): FieldType {\n  // the values-array may contain a lot of nulls.\n  // we need the first not-null item\n  const firstNotNull = values.find((v) => v !== null);\n\n  if (firstNotNull === undefined) {\n    // we could not find any not-null values\n    return FieldType.number;\n  }\n\n  const valueType = typeof firstNotNull;\n\n  switch (valueType) {\n    case 'string':\n      return FieldType.string;\n    case 'boolean':\n      return FieldType.boolean;\n    case 'number':\n      return FieldType.number;\n    default:\n      // this should never happen, influxql values\n      // can only be numbers, strings and booleans.\n      throw new Error(`InfluxQL: invalid value type ${valueType}`);\n  }\n}\n\n// this conversion function is specialized to work with the timeseries\n// data returned by InfluxDatasource.getTimeSeries()\nfunction timeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: unknown[] = [];\n\n  // the data we process here is not correctly typed.\n  // the typescript types say every data-point is number|null,\n  // but in fact it can be string or boolean too.\n\n  const points = timeSeries.datapoints;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const timeField = {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: times,\n  };\n\n  const valueField = {\n    name: TIME_SERIES_VALUE_FIELD_NAME,\n    type: getFieldType(values),\n    config: {\n      displayNameFromDS: timeSeries.title,\n    },\n    values: values,\n    labels: timeSeries.tags,\n  };\n\n  const fields = [timeField, valueField];\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport ConfigEditor from './components/editor/config/ConfigEditor';\nimport { QueryEditor } from './components/editor/query/QueryEditor';\nimport { InfluxStartPage } from './components/editor/query/influxql/InfluxStartPage';\nimport InfluxDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n","import 'react-awesome-query-builder';\nimport { toOption as toOption$1 } from '@grafana/data';\nimport 'lodash';\nimport '@grafana/ui';\nimport 'react';\nimport 'uuid';\nimport '@grafana/runtime';\nimport '../SQLEditor/utils/debugger.js';\nimport '../SQLEditor/standardSql/macros.js';\n\nvar _a;\nvar QueryFormat = /* @__PURE__ */ ((QueryFormat2) => {\n  QueryFormat2[QueryFormat2[\"Timeseries\"] = 0] = \"Timeseries\";\n  QueryFormat2[QueryFormat2[\"Table\"] = 1] = \"Table\";\n  QueryFormat2[QueryFormat2[\"Logs\"] = 2] = \"Logs\";\n  QueryFormat2[QueryFormat2[\"Trace\"] = 3] = \"Trace\";\n  QueryFormat2[QueryFormat2[\"OptionMulti\"] = 4] = \"OptionMulti\";\n  return QueryFormat2;\n})(QueryFormat || {});\nvar EditorMode = /* @__PURE__ */ ((EditorMode2) => {\n  EditorMode2[\"Builder\"] = \"builder\";\n  EditorMode2[\"Code\"] = \"code\";\n  return EditorMode2;\n})(EditorMode || {});\nconst QUERY_FORMAT_OPTIONS = [\n  { label: \"Time series\", value: 0 /* Timeseries */ },\n  { label: \"Table\", value: 1 /* Table */ }\n];\nconst backWardToOption = (value) => ({ label: value, value });\nconst toOption = (_a = toOption$1) != null ? _a : backWardToOption;\n\nexport { EditorMode, QUERY_FORMAT_OPTIONS, QueryFormat, toOption };\n//# sourceMappingURL=types.js.map\n"],"names":["isSqlDatasourceDatabaseSelectionFeatureFlagEnabled","applyQueryDefaults","q","editorMode","QueryEditorPropertyType","QueryEditorExpressionType","QueryFormat","QUERY_FORMAT_OPTIONS","backWardToOption","value","toOption","createSelectClause","sqlColumns","c","rawColumn","p","haveColumns","columns","haveColumn","haveFunction","setGroupByField","field","setPropertyField","createFunctionField","functionName","getColumnValue","column","BROWSER_MODE_DISABLED_MESSAGE","DEFAULT_POLICY","InfluxVersion","WIDTH_SHORT","InfluxFluxConfig","props","jsonData","secureJsonData","secureJsonFields","htmlPrefix","InlineFieldRow","InlineField","SecretInput","httpModes","InfluxInfluxQLConfig","options","onOptionsChange","database","styles","getStyles","Alert","event","Select","httpMode","theme","InfluxSqlConfig","versionMap","versions","ConfigEditor","selected","copy","user","rest","isDirectAccess","FieldSet","DataSourceHttpSettings","val","index","categories","createPart","part","def","register","groupByTimeFunctions","aliasRenderer","innerExpr","fieldRenderer","param","escapedParam","replaceAggregationAddStrategy","selectParts","partModel","i","morePartsAvailable","addTransformationStrategy","addMathStrategy","partCount","addAliasStrategy","addFieldStrategy","query","parts","InfluxQueryModel","target","templateSrv","scopedVars","g","stringParts","typePart","arg","s","modelsIndex","partIndex","type","operator","fieldName","textValue","removeRegexWrapper","lowerValue","tag","interpolate","str","r","escapedKey","policy","measurement","variable","y","selectText","conditions","groupBySection","filters","buildRawQuery","queryCopy","normalizeQuery","addNewSelectPart","model","removeSelectPart","selectModel","changeSelectPart","listIndex","newParams","newSel","addNewGroupByPart","removeGroupByPart","changeGroupByPart","newGroupBy","regex","match","samples","UnthemedFluxQueryEditor","sugs","label","editor","helpTooltip","CodeEditor","Segment","FluxQueryEditor","COMMON_FNS","intervalParam","fillParam","MACRO_FUNCTIONS","columnParam","MACRO_NAMES","ResponseParser","frame","values","textField","f","valueField","QueryEditor","SqlQueryEditorLazy","LoadingPlaceholder","migrateAnnotation","annotation","oldQuery","newQuery","SqlDatasource","DataSourceWithBackend","instanceSettings","v","settingsData","queries","expandedQueries","request","databaseIssue","error","throwError","range","refId","rawSql","interpolatedQuery","response","DataFrameView","lastValueFrom","map","res","queryWithoutMacros","defaultValue","onChange","width","isEmpty","setIsEmpty","e","newVal","ConnectionLimits","autoIdle","updateJsonData","newOpts","onJSONDataNumberChanged","property","number","onMaxConnectionsChanged","onConnectionIdleAutoChanged","idleConns","maxConns","labelWidth","Divider","TLSSecretsConfig","editorProps","showCACert","showKeyPair","useMigrateDatabaseFields","newOptions","optionsUpdated","maxOpenConns","maxIdleConns","connMaxLifetime","mapFieldsToTypes","fields","col","mapColumnTypeToIcon","unquoteIdentifier","quoteLiteral","toRawSql","sql","table","rawQuery","sc","formatTableName","wherePattern","whereString","groupBy","isLimit","parameter","limit","quoteIdentifierIfNecessary","isValidIdentifier","identifier","isValidName","RESERVED_WORDS","buildTableQuery","dataset","quoteIdentAsLiteral","showDatabases","buildColumnQuery","dbName","buildTableConstraint","getSqlCompletionProvider","getMeta","monaco","language","customStatementPlacementProvider","customSuggestionKinds","customStatementPlacement","customSuggestionKind","FROMKEYWORD","currentToken","previousKeyword","previousNonWhiteSpace","t","ctx","databaseName","getDatabaseName","mapToSuggestion","databaseToken","getDatabaseToken","tableName","getTableName","tableDefinition","token","getFromKeywordToken","nextIdentifier","FlightSQLDatasource","fns","fn","args","formatSQL","tableNames","interpolatedTable","queryString","defaultDB","d","UnthemedSQLQueryEditor","influxDatasource","defaultQuery","onRunQuery","onRunSQLQuery","onSQLChange","FSQLEditor","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","Button","ConfirmModal","RESULT_FORMATS","DEFAULT_RESULT_FORMAT","useShadowedState","outsideVal","currentVal","setCurrentVal","prevOutsideVal","usePrevious","RawInfluxQLEditor","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","selectElementId","resultFormat","applyDelayedChangesAndRunQuery","TextArea","buildMetadataQuery","params","templateService","retentionPolicy","tags","withKey","withMeasurementFilter","keyIdentifier","whereConditions","memo","renderTagCondition","runExploreQuery","datasource","getAllPolicies","item","getAllMeasurements","getTagKeys","getTagValues","getFieldKeys","filterTags","allTagKeys","toSelectableValue","unwrap","getNewSelectPartOptions","key","children","x","getNewGroupByPartOptions","tagKeys","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","getTemplateVariableOptions","wrapper","withTemplateVariableOptions","optionsPromise","filter","templateVariableOptions","tvo","wrapRegex","wrapPure","paddingRightClass","className","FormatAsSection","format","inputId","selectClass","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","SelSingleLoad","loadState","doLoad","useAsyncFn","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","defaultButtonClass","Seg","buttonClassName","isOpen","setOpen","FromSection","getPolicyOptions","getMeasurementOptions","handlePolicyLoadOptions","allPolicies","handleMeasurementLoadOptions","AccessoryButton","InputSection","isWide","placeholder","onBlur","OPTIONS","OrderByTimeSection","AddButton","onAdd","noRightMarginPaddingClass","noHorizMarginPaddingClass","getPartClass","Part","name","partClass","onParamChange","par","isLast","items","Fragment","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","isRegex","text","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","knownOperators","knownConditions","operatorOptions","condititonOptions","loadConditionOptions","loadOperatorOptions","Tag","onRemove","getTagKeyOptions","getTagValueOptions","condition","getTagKeySegmentOptions","err","getTagValueSegmentOptions","op","TagsSection","onTagChange","newTag","newTags","onTagRemove","addNewTag","tagKey","minimalTag","newT","VisualInfluxQLEditor","uniqueId","formatAsId","orderByTimeId","fieldKeys","selectLists","dynamicSelectPartOptions","sel","getMemoizedTagKeys","groupByList","dynamicGroupByPartOptions","onAppliedChange","handleFromSectionChange","m","handleTagsSectionChange","SegmentSection","keys","tz","slimit","alias","CHEAT_SHEET_ITEMS","InfluxCheatSheet","InfluxStartPage","AnnotationEditor","eventQuery","setEventQuery","textColumn","setTextColumn","tagsColumn","setTagsColumn","timeEndColumn","setTimeEndColumn","titleColumn","updateValue","InfluxSeries","output","j","series","seriesName","columnName","datapoints","segments","g1","g2","group","segIndex","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","data","TableModel","seriesIndex","firstCol","firstTableCol","reordered","migrateLegacyAnnotation","json","prepareAnnotation","results","influxResults","normalizedQuery","isRetentionPolicyQuery","isValueFirst","serie","dfs","meta","getTableCols","dfsByLabels","df","labels","dfsByLabelValues","getTableRows","rsp","titleColIndex","timeColIndex","timeEndColIndex","textColIndex","tagsColIndexes","colContainsTag","colText","selectedParams","getSelectedParams","rawQuerySelectedFieldsInDataframe","time","metrics","allParams","select","selector","aliasIfExist","uniqueParams","incrementName","nameIncrement","colsInRawQuery","np","otherChecks","qc","InfluxVariableEditor","getVariableQuery","InfluxVariableSupport","of","timeFilter","interpolated","from","InfluxDatasource","url","filteredRequest","streams","Observable","subscriber","events","ex","merge","variables","adhocFiltersToTags","af","asTag","queryText","expandedQuery","selects","regexMatcher","queryMatches","resp","valueMap","method","currentUrl","req","result","errors","elem","catchError","until","date","roundUp","timezone","outPutDate","amount","unit","targets","queryTargets","allQueries","acc","current","adhocFilters","adhocFiltersFromDashboard","ahFilters","tmpQuery","seriesList","influxSeries","timeSeries","timeSeriesToDataFrame","getFieldType","firstNotNull","valueType","times","points","point","timeField","_a","QueryFormat2","EditorMode","EditorMode2"],"sourceRoot":""}